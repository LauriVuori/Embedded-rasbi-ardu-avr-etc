
Chiptesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f7  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000506  00000000  00000000  000007c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000130  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	57 c0       	rjmp	.+174    	; 0xe4 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <util/delay.h>


int main (void)
{
	DDRB=0xFF; //suuntarekisteri ja suunta ulos
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
	PORTB=0xff; //B-porttiin 1111 1111 , looginen alatila -> virta kulkee
  3c:	88 bb       	out	0x18, r24	; 24
	DDRD=~((1<<PD2)|(1<<PD3)); //suuntarekisteri , bitti siirto
  3e:	93 ef       	ldi	r25, 0xF3	; 243
  40:	91 bb       	out	0x11, r25	; 17
	PORTD=0xff; //D-porttiin
  42:	82 bb       	out	0x12, r24	; 18
		//	&			0000 0100
		// tulos		0000 0100 tosi koska poikkeaa nollasta

		//~PIND eli invertoidaan koko D-portti
	int a = 0;
	int suunta = 0;
  44:	40 e0       	ldi	r20, 0x00	; 0
  46:	50 e0       	ldi	r21, 0x00	; 0
		// (1<<PD2)		0000 0100
		//	&			0000 0100
		// tulos		0000 0100 tosi koska poikkeaa nollasta

		//~PIND eli invertoidaan koko D-portti
	int a = 0;
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	30 e0       	ldi	r19, 0x00	; 0
	int suunta = 0;
		while(~PIND & (1<<PD2)) 
  4c:	2d c0       	rjmp	.+90     	; 0xa8 <__DATA_REGION_LENGTH__+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	6f eb       	ldi	r22, 0xBF	; 191
  50:	84 ed       	ldi	r24, 0xD4	; 212
  52:	91 e0       	ldi	r25, 0x01	; 1
  54:	61 50       	subi	r22, 0x01	; 1
  56:	80 40       	sbci	r24, 0x00	; 0
  58:	90 40       	sbci	r25, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <__SREG__+0x15>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <__SREG__+0x1f>
  5e:	00 00       	nop
		{

			_delay_ms(60);
			PORTB=~(0x07 << a); // looginen alatila on ledi p??ll? 1111 1110 1111 1100
  60:	87 e0       	ldi	r24, 0x07	; 7
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	02 2e       	mov	r0, r18
  66:	02 c0       	rjmp	.+4      	; 0x6c <__SREG__+0x2d>
  68:	88 0f       	add	r24, r24
  6a:	99 1f       	adc	r25, r25
  6c:	0a 94       	dec	r0
  6e:	e2 f7       	brpl	.-8      	; 0x68 <__SREG__+0x29>
  70:	80 95       	com	r24
  72:	88 bb       	out	0x18, r24	; 24
			if ((a <= 5) && (suunta == 0)){
  74:	26 30       	cpi	r18, 0x06	; 6
  76:	31 05       	cpc	r19, r1
  78:	4c f4       	brge	.+18     	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  7a:	41 15       	cp	r20, r1
  7c:	51 05       	cpc	r21, r1
  7e:	31 f4       	brne	.+12     	; 0x8c <__DATA_REGION_LENGTH__+0xc>
				a++;
  80:	2f 5f       	subi	r18, 0xFF	; 255
  82:	3f 4f       	sbci	r19, 0xFF	; 255
				if (a == 5){
  84:	25 30       	cpi	r18, 0x05	; 5
  86:	31 05       	cpc	r19, r1
  88:	79 f4       	brne	.+30     	; 0xa8 <__DATA_REGION_LENGTH__+0x28>
  8a:	09 c0       	rjmp	.+18     	; 0x9e <__DATA_REGION_LENGTH__+0x1e>
					suunta = 1;
				}
			}
			else if((a >= 0) && (suunta == 1)){
  8c:	33 23       	and	r19, r19
  8e:	64 f0       	brlt	.+24     	; 0xa8 <__DATA_REGION_LENGTH__+0x28>
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	51 05       	cpc	r21, r1
  94:	49 f4       	brne	.+18     	; 0xa8 <__DATA_REGION_LENGTH__+0x28>
				a--;
  96:	21 50       	subi	r18, 0x01	; 1
  98:	31 09       	sbc	r19, r1
				if (a == 0){
  9a:	21 f0       	breq	.+8      	; 0xa4 <__DATA_REGION_LENGTH__+0x24>
  9c:	05 c0       	rjmp	.+10     	; 0xa8 <__DATA_REGION_LENGTH__+0x28>
			_delay_ms(60);
			PORTB=~(0x07 << a); // looginen alatila on ledi p??ll? 1111 1110 1111 1100
			if ((a <= 5) && (suunta == 0)){
				a++;
				if (a == 5){
					suunta = 1;
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__DATA_REGION_LENGTH__+0x28>
				}
			}
			else if((a >= 0) && (suunta == 1)){
				a--;
				if (a == 0){
					suunta = 0;
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	50 e0       	ldi	r21, 0x00	; 0
		// tulos		0000 0100 tosi koska poikkeaa nollasta

		//~PIND eli invertoidaan koko D-portti
	int a = 0;
	int suunta = 0;
		while(~PIND & (1<<PD2)) 
  a8:	82 9b       	sbis	0x10, 2	; 16
  aa:	d1 cf       	rjmp	.-94     	; 0x4e <__SREG__+0xf>
  ac:	16 c0       	rjmp	.+44     	; 0xda <__DATA_REGION_LENGTH__+0x5a>
  ae:	2f e3       	ldi	r18, 0x3F	; 63
  b0:	6d e0       	ldi	r22, 0x0D	; 13
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	60 40       	sbci	r22, 0x00	; 0
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__DATA_REGION_LENGTH__+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__DATA_REGION_LENGTH__+0x3e>
  be:	00 00       	nop
			
		}
		while(~PIND & (1<<PD3))
		{
			_delay_ms(100);
			PORTB=0b10101010;
  c0:	8a ea       	ldi	r24, 0xAA	; 170
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	9f e3       	ldi	r25, 0x3F	; 63
  c6:	2d e0       	ldi	r18, 0x0D	; 13
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	91 50       	subi	r25, 0x01	; 1
  cc:	20 40       	sbci	r18, 0x00	; 0
  ce:	60 40       	sbci	r22, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <__DATA_REGION_LENGTH__+0x4a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <__DATA_REGION_LENGTH__+0x54>
  d4:	00 00       	nop
			_delay_ms(100);
			PORTB=~0b10101010;
  d6:	85 e5       	ldi	r24, 0x55	; 85
  d8:	88 bb       	out	0x18, r24	; 24
					suunta = 0;
				}
			}
			
		}
		while(~PIND & (1<<PD3))
  da:	83 9b       	sbis	0x10, 3	; 16
  dc:	e8 cf       	rjmp	.-48     	; 0xae <__DATA_REGION_LENGTH__+0x2e>
			_delay_ms(100);
			PORTB=~0b10101010;
		}
		
		
		PORTB=0xFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	88 bb       	out	0x18, r24	; 24
		/*
		else
		{
			PORTB=0xff;
		}*/
	}
  e2:	b0 cf       	rjmp	.-160    	; 0x44 <__SREG__+0x5>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
