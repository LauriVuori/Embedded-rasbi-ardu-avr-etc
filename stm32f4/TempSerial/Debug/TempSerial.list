
TempSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800c19c  0800c19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c220  0800c220  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c220  0800c220  0001c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c228  0800c228  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c22c  0800c22c  0001c22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d1c  20000094  0800c2c4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008db0  0800c2c4  00028db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c646  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005735  00000000  00000000  0004c70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021e8  00000000  00000000  00051e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f98  00000000  00000000  00054028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b63f  00000000  00000000  00055fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e3f7  00000000  00000000  000815ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2a40  00000000  00000000  0009f9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00192436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000912c  00000000  00000000  001924b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c184 	.word	0x0800c184

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c184 	.word	0x0800c184

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000b0 	.word	0x200000b0
 8000554:	20000108 	.word	0x20000108

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f001 f837 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f82b 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 fab3 	bl	8000ad0 <MX_GPIO_Init>
  MX_CRC_Init();
 800056a:	f000 f8ab 	bl	80006c4 <MX_CRC_Init>
  MX_DMA2D_Init();
 800056e:	f000 f8bd 	bl	80006ec <MX_DMA2D_Init>
  MX_FMC_Init();
 8000572:	f000 fa5d 	bl	8000a30 <MX_FMC_Init>
  MX_I2C3_Init();
 8000576:	f000 f8eb 	bl	8000750 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057a:	f000 f929 	bl	80007d0 <MX_LTDC_Init>
  MX_SPI5_Init();
 800057e:	f000 f9a7 	bl	80008d0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000582:	f000 f9db 	bl	800093c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000586:	f000 fa29 	bl	80009dc <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x5c>)
 800058c:	1d3c      	adds	r4, r7, #4
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f008 ffae 	bl	8009502 <osThreadCreate>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <main+0x60>)
 80005aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f008 ffa2 	bl	80094f4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x58>
 80005b2:	bf00      	nop
 80005b4:	0800c1a8 	.word	0x0800c1a8
 80005b8:	2000846c 	.word	0x2000846c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0a0      	sub	sp, #128	; 0x80
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00b fd17 	bl	800bffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2230      	movs	r2, #48	; 0x30
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00b fd08 	bl	800bffe <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <SystemClock_Config+0x100>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <SystemClock_Config+0x100>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <SystemClock_Config+0x100>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <SystemClock_Config+0x104>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <SystemClock_Config+0x104>)
 8000618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0x104>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062a:	2301      	movs	r3, #1
 800062c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000632:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063e:	2304      	movs	r3, #4
 8000640:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000642:	2348      	movs	r3, #72	; 0x48
 8000644:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800064a:	2303      	movs	r3, #3
 800064c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000652:	4618      	mov	r0, r3
 8000654:	f003 feda 	bl	800440c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065e:	f000 fb63 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f004 f934 	bl	80048ec <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800068a:	f000 fb4d 	bl	8000d28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800068e:	2308      	movs	r3, #8
 8000690:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000692:	2332      	movs	r3, #50	; 0x32
 8000694:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800069a:	2300      	movs	r3, #0
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fb46 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006ae:	f000 fb3b 	bl	8000d28 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3780      	adds	r7, #128	; 0x80
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_CRC_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_CRC_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_CRC_Init+0x20>)
 80006d0:	f001 f8c4 	bl	800185c <HAL_CRC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006da:	f000 fb25 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000851c 	.word	0x2000851c
 80006e8:	40023000 	.word	0x40023000

080006ec <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <MX_DMA2D_Init+0x60>)
 80006f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_DMA2D_Init+0x5c>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_DMA2D_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000722:	f001 f8b7 	bl	8001894 <HAL_DMA2D_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800072c:	f000 fafc 	bl	8000d28 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000730:	2101      	movs	r1, #1
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000734:	f001 fa08 	bl	8001b48 <HAL_DMA2D_ConfigLayer>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800073e:	f000 faf3 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000864c 	.word	0x2000864c
 800074c:	4002b000 	.word	0x4002b000

08000750 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C3_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C3_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C3_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C3_Init+0x74>)
 800076e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_I2C3_Init+0x74>)
 800078e:	f003 f921 	bl	80039d4 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 fac6 	bl	8000d28 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <MX_I2C3_Init+0x74>)
 80007a0:	f003 fa50 	bl	8003c44 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007aa:	f000 fabd 	bl	8000d28 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C3_Init+0x74>)
 80007b2:	f003 fa83 	bl	8003cbc <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007bc:	f000 fab4 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20008470 	.word	0x20008470
 80007c8:	40005c00 	.word	0x40005c00
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	; 0x38
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2234      	movs	r2, #52	; 0x34
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00b fc0e 	bl	800bffe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007e4:	4a39      	ldr	r2, [pc, #228]	; (80008cc <MX_LTDC_Init+0xfc>)
 80007e6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000802:	2209      	movs	r2, #9
 8000804:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000808:	2201      	movs	r2, #1
 800080a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800080e:	221d      	movs	r2, #29
 8000810:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000814:	2203      	movs	r2, #3
 8000816:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800081a:	f240 120d 	movw	r2, #269	; 0x10d
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000822:	f240 1243 	movw	r2, #323	; 0x143
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800082a:	f240 1217 	movw	r2, #279	; 0x117
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000832:	f240 1247 	movw	r2, #327	; 0x147
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000852:	f003 fa73 	bl	8003d3c <HAL_LTDC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800085c:	f000 fa64 	bl	8000d28 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000864:	23f0      	movs	r3, #240	; 0xf0
 8000866:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800086c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000870:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000876:	23ff      	movs	r3, #255	; 0xff
 8000878:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800087e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000882:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000884:	2307      	movs	r3, #7
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000888:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800088e:	23f0      	movs	r3, #240	; 0xf0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000892:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80008b2:	f003 fbd5 	bl	8004060 <HAL_LTDC_ConfigLayer>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008bc:	f000 fa34 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3738      	adds	r7, #56	; 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20008524 	.word	0x20008524
 80008cc:	40016800 	.word	0x40016800

080008d0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_SPI5_Init+0x64>)
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_SPI5_Init+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI5_Init+0x64>)
 80008dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI5_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_SPI5_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI5_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI5_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI5_Init+0x64>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI5_Init+0x64>)
 8000904:	2218      	movs	r2, #24
 8000906:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_SPI5_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI5_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_SPI5_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI5_Init+0x64>)
 800091c:	220a      	movs	r2, #10
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_SPI5_Init+0x64>)
 8000922:	f004 fbf9 	bl	8005118 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800092c:	f000 f9fc 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200084c4 	.word	0x200084c4
 8000938:	40015000 	.word	0x40015000

0800093c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM1_Init+0x98>)
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <MX_TIM1_Init+0x9c>)
 800095c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM1_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000984:	f004 fc2c 	bl	80051e0 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800098e:	f000 f9cb 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009a0:	f004 fd75 	bl	800548e <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80009aa:	f000 f9bd 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009bc:	f004 ff80 	bl	80058c0 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009c6:	f000 f9af 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000860c 	.word	0x2000860c
 80009d8:	40010000 	.word	0x40010000

080009dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART1_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f004 ffe4 	bl	80059e0 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f983 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200085cc 	.word	0x200085cc
 8000a2c:	40011000 	.word	0x40011000

08000a30 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <MX_FMC_Init+0x9c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a68:	2240      	movs	r2, #64	; 0x40
 8000a6a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a6e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a72:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a80:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000ab2:	f004 fafd 	bl	80050b0 <HAL_SDRAM_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000abc:	f000 f934 	bl	8000d28 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000868c 	.word	0x2000868c
 8000acc:	a0000140 	.word	0xa0000140

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
 8000aea:	4b7a      	ldr	r3, [pc, #488]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a79      	ldr	r2, [pc, #484]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b77      	ldr	r3, [pc, #476]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	4b73      	ldr	r3, [pc, #460]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a72      	ldr	r2, [pc, #456]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b70      	ldr	r3, [pc, #448]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0320 	and.w	r3, r3, #32
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	4b6c      	ldr	r3, [pc, #432]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a6b      	ldr	r2, [pc, #428]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b69      	ldr	r3, [pc, #420]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	4b65      	ldr	r3, [pc, #404]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a64      	ldr	r2, [pc, #400]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b5e      	ldr	r3, [pc, #376]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a5d      	ldr	r2, [pc, #372]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b57      	ldr	r3, [pc, #348]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a56      	ldr	r2, [pc, #344]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b54      	ldr	r3, [pc, #336]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a4f      	ldr	r2, [pc, #316]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2116      	movs	r1, #22
 8000bca:	4843      	ldr	r0, [pc, #268]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000bcc:	f001 f9f8 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	4841      	ldr	r0, [pc, #260]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000bd6:	f001 f9f3 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000be0:	483f      	ldr	r0, [pc, #252]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000be2:	f001 f9ed 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bec:	483d      	ldr	r0, [pc, #244]	; (8000ce4 <MX_GPIO_Init+0x214>)
 8000bee:	f001 f9e7 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bf2:	2316      	movs	r3, #22
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4833      	ldr	r0, [pc, #204]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000c0a:	f001 f82f 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c0e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c14:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_GPIO_Init+0x218>)
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	482e      	ldr	r0, [pc, #184]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000c24:	f001 f822 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4827      	ldr	r0, [pc, #156]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000c40:	f001 f814 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c44:	2320      	movs	r3, #32
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <MX_GPIO_Init+0x218>)
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000c58:	f001 f808 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481f      	ldr	r0, [pc, #124]	; (8000cec <MX_GPIO_Init+0x21c>)
 8000c70:	f000 fffc 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000c8a:	f000 ffef 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000ca8:	f000 ffe0 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <MX_GPIO_Init+0x214>)
 8000cc6:	f000 ffd1 	bl	8001c6c <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	10120000 	.word	0x10120000
 8000cec:	40020400 	.word	0x40020400

08000cf0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cf8:	f00a fe34 	bl	800b964 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f008 fc4c 	bl	800959a <osDelay>
 8000d02:	e7fb      	b.n	8000cfc <StartDefaultTask+0xc>

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d16:	f000 fc7d 	bl	8001614 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40001000 	.word	0x40001000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_MspInit+0x54>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <HAL_MspInit+0x54>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x54>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_MspInit+0x54>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_MspInit+0x54>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_MspInit+0x54>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	210f      	movs	r1, #15
 8000d7a:	f06f 0001 	mvn.w	r0, #1
 8000d7e:	f000 fd43 	bl	8001808 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_CRC_MspInit+0x3c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40023000 	.word	0x40023000
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_DMA2D_MspInit+0x48>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d115      	bne.n	8000e12 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_DMA2D_MspInit+0x4c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_DMA2D_MspInit+0x4c>)
 8000df0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_DMA2D_MspInit+0x4c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2105      	movs	r1, #5
 8000e06:	205a      	movs	r0, #90	; 0x5a
 8000e08:	f000 fcfe 	bl	8001808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e0c:	205a      	movs	r0, #90	; 0x5a
 8000e0e:	f000 fd17 	bl	8001840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	4002b000 	.word	0x4002b000
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <HAL_I2C_MspInit+0xc4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d14b      	bne.n	8000ede <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a27      	ldr	r2, [pc, #156]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e90:	2304      	movs	r3, #4
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <HAL_I2C_MspInit+0xcc>)
 8000e9c:	f000 fee6 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea6:	2312      	movs	r3, #18
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <HAL_I2C_MspInit+0xd0>)
 8000ebe:	f000 fed5 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005c00 	.word	0x40005c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	; 0x38
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a7b      	ldr	r2, [pc, #492]	; (8001104 <HAL_LTDC_MspInit+0x20c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	f040 80f0 	bne.w	80010fc <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
 8000f20:	4b79      	ldr	r3, [pc, #484]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f24:	4a78      	ldr	r2, [pc, #480]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2c:	4b76      	ldr	r3, [pc, #472]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	4b72      	ldr	r3, [pc, #456]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a71      	ldr	r2, [pc, #452]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b6f      	ldr	r3, [pc, #444]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a6a      	ldr	r2, [pc, #424]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b68      	ldr	r3, [pc, #416]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	4b64      	ldr	r3, [pc, #400]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	4a63      	ldr	r2, [pc, #396]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f80:	4b61      	ldr	r3, [pc, #388]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	4b5d      	ldr	r3, [pc, #372]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a5c      	ldr	r2, [pc, #368]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4b56      	ldr	r3, [pc, #344]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	4a55      	ldr	r2, [pc, #340]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb8:	4b53      	ldr	r3, [pc, #332]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <HAL_LTDC_MspInit+0x210>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff2:	230e      	movs	r3, #14
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4843      	ldr	r0, [pc, #268]	; (800110c <HAL_LTDC_MspInit+0x214>)
 8000ffe:	f000 fe35 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8001002:	f641 0358 	movw	r3, #6232	; 0x1858
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001014:	230e      	movs	r3, #14
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	483c      	ldr	r0, [pc, #240]	; (8001110 <HAL_LTDC_MspInit+0x218>)
 8001020:	f000 fe24 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001024:	2303      	movs	r3, #3
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001034:	2309      	movs	r3, #9
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4835      	ldr	r0, [pc, #212]	; (8001114 <HAL_LTDC_MspInit+0x21c>)
 8001040:	f000 fe14 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001044:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001056:	230e      	movs	r3, #14
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	482c      	ldr	r0, [pc, #176]	; (8001114 <HAL_LTDC_MspInit+0x21c>)
 8001062:	f000 fe03 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001066:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001078:	230e      	movs	r3, #14
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	4825      	ldr	r0, [pc, #148]	; (8001118 <HAL_LTDC_MspInit+0x220>)
 8001084:	f000 fdf2 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001088:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800109a:	230e      	movs	r3, #14
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	481d      	ldr	r0, [pc, #116]	; (800111c <HAL_LTDC_MspInit+0x224>)
 80010a6:	f000 fde1 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80010aa:	2348      	movs	r3, #72	; 0x48
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ba:	230e      	movs	r3, #14
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4816      	ldr	r0, [pc, #88]	; (8001120 <HAL_LTDC_MspInit+0x228>)
 80010c6:	f000 fdd1 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010dc:	2309      	movs	r3, #9
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <HAL_LTDC_MspInit+0x220>)
 80010e8:	f000 fdc0 	bl	8001c6c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2105      	movs	r1, #5
 80010f0:	2058      	movs	r0, #88	; 0x58
 80010f2:	f000 fb89 	bl	8001808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010f6:	2058      	movs	r0, #88	; 0x58
 80010f8:	f000 fba2 	bl	8001840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3738      	adds	r7, #56	; 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40016800 	.word	0x40016800
 8001108:	40023800 	.word	0x40023800
 800110c:	40021400 	.word	0x40021400
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40021800 	.word	0x40021800
 800111c:	40020800 	.word	0x40020800
 8001120:	40020c00 	.word	0x40020c00

08001124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_SPI_MspInit+0x84>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d12c      	bne.n	80011a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_SPI_MspInit+0x88>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_SPI_MspInit+0x88>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800117e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 800119c:	f000 fd66 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40015000 	.word	0x40015000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40021400 	.word	0x40021400

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10d      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_TIM_Base_MspInit+0x40>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_TIM_Base_MspInit+0x40>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_TIM_Base_MspInit+0x40>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_UART_MspInit+0x84>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d12c      	bne.n	8001274 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0x88>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001252:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001264:	2307      	movs	r3, #7
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0x8c>)
 8001270:	f000 fcfc 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40011000 	.word	0x40011000
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_FMC_MspInit+0x104>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d16f      	bne.n	8001384 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_FMC_MspInit+0x104>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <HAL_FMC_MspInit+0x108>)
 80012b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b2:	4a37      	ldr	r2, [pc, #220]	; (8001390 <HAL_FMC_MspInit+0x108>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6393      	str	r3, [r2, #56]	; 0x38
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_FMC_MspInit+0x108>)
 80012bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80012c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012ca:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012d8:	230c      	movs	r3, #12
 80012da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	482c      	ldr	r0, [pc, #176]	; (8001394 <HAL_FMC_MspInit+0x10c>)
 80012e2:	f000 fcc3 	bl	8001c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4826      	ldr	r0, [pc, #152]	; (8001398 <HAL_FMC_MspInit+0x110>)
 8001300:	f000 fcb4 	bl	8001c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8001304:	f248 1333 	movw	r3, #33075	; 0x8133
 8001308:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001316:	230c      	movs	r3, #12
 8001318:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	481f      	ldr	r0, [pc, #124]	; (800139c <HAL_FMC_MspInit+0x114>)
 8001320:	f000 fca4 	bl	8001c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8001324:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001328:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001336:	230c      	movs	r3, #12
 8001338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <HAL_FMC_MspInit+0x118>)
 8001340:	f000 fc94 	bl	8001c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8001344:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001348:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <HAL_FMC_MspInit+0x11c>)
 8001360:	f000 fc84 	bl	8001c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001374:	230c      	movs	r3, #12
 8001376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <HAL_FMC_MspInit+0x120>)
 800137e:	f000 fc75 	bl	8001c6c <HAL_GPIO_Init>
 8001382:	e000      	b.n	8001386 <HAL_FMC_MspInit+0xfe>
    return;
 8001384:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000308 	.word	0x20000308
 8001390:	40023800 	.word	0x40023800
 8001394:	40021400 	.word	0x40021400
 8001398:	40020800 	.word	0x40020800
 800139c:	40021800 	.word	0x40021800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40020400 	.word	0x40020400

080013ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013b4:	f7ff ff68 	bl	8001288 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	2036      	movs	r0, #54	; 0x36
 80013d6:	f000 fa17 	bl	8001808 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80013da:	2036      	movs	r0, #54	; 0x36
 80013dc:	f000 fa30 	bl	8001840 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_InitTick+0xa4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <HAL_InitTick+0xa4>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_InitTick+0xa4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013fc:	f107 0210 	add.w	r2, r7, #16
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fc62 	bl	8004cd0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800140c:	f003 fc38 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8001410:	4603      	mov	r3, r0
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	4a13      	ldr	r2, [pc, #76]	; (8001468 <HAL_InitTick+0xa8>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9b      	lsrs	r3, r3, #18
 8001420:	3b01      	subs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_InitTick+0xac>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_InitTick+0xb0>)
 8001428:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_InitTick+0xac>)
 800142c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001430:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_InitTick+0xac>)
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_InitTick+0xac>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_InitTick+0xac>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <HAL_InitTick+0xac>)
 8001446:	f003 fecb 	bl	80051e0 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <HAL_InitTick+0xac>)
 8001452:	f003 fef0 	bl	8005236 <HAL_TIM_Base_Start_IT>
 8001456:	4603      	mov	r3, r0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3730      	adds	r7, #48	; 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	431bde83 	.word	0x431bde83
 800146c:	200086c0 	.word	0x200086c0
 8001470:	40001000 	.word	0x40001000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <TIM6_DAC_IRQHandler+0x10>)
 80014ae:	f003 fee6 	bl	800527e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200086c0 	.word	0x200086c0

080014bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <OTG_HS_IRQHandler+0x10>)
 80014c2:	f001 f825 	bl	8002510 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20008ae8 	.word	0x20008ae8

080014d0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <LTDC_IRQHandler+0x10>)
 80014d6:	f002 fd01 	bl	8003edc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20008524 	.word	0x20008524

080014e4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <DMA2D_IRQHandler+0x10>)
 80014ea:	f000 fa1c 	bl	8001926 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000864c 	.word	0x2000864c

080014f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <_sbrk+0x50>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x16>
		heap_end = &end;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <_sbrk+0x50>)
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <_sbrk+0x54>)
 800150c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <_sbrk+0x50>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <_sbrk+0x50>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	466a      	mov	r2, sp
 800151e:	4293      	cmp	r3, r2
 8001520:	d907      	bls.n	8001532 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001522:	f00a fd27 	bl	800bf74 <__errno>
 8001526:	4602      	mov	r2, r0
 8001528:	230c      	movs	r3, #12
 800152a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	e006      	b.n	8001540 <_sbrk+0x48>
	}

	heap_end += incr;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <_sbrk+0x50>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a03      	ldr	r2, [pc, #12]	; (8001548 <_sbrk+0x50>)
 800153c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000030c 	.word	0x2000030c
 800154c:	20008db0 	.word	0x20008db0

08001550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <SystemInit+0x28>)
 8001556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <SystemInit+0x28>)
 800155c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SystemInit+0x28>)
 8001566:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800156a:	609a      	str	r2, [r3, #8]
#endif
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001580:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001582:	e003      	b.n	800158c <LoopCopyDataInit>

08001584 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001586:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001588:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800158a:	3104      	adds	r1, #4

0800158c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001590:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001592:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001594:	d3f6      	bcc.n	8001584 <CopyDataInit>
  ldr  r2, =_sbss
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001598:	e002      	b.n	80015a0 <LoopFillZerobss>

0800159a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800159a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800159c:	f842 3b04 	str.w	r3, [r2], #4

080015a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015a4:	d3f9      	bcc.n	800159a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015a6:	f7ff ffd3 	bl	8001550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f00a fce9 	bl	800bf80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7fe ffd3 	bl	8000558 <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80015b8:	0800c230 	.word	0x0800c230
  ldr  r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015c0:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80015c4:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80015c8:	20008db0 	.word	0x20008db0

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_Init+0x40>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_Init+0x40>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_Init+0x40>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f8fa 	bl	80017f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fede 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fb98 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008
 8001638:	20008700 	.word	0x20008700

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20008700 	.word	0x20008700

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ffee 	bl	800163c <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_Delay+0x40>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffde 	bl	800163c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000008 	.word	0x20000008

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff4c 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181a:	f7ff ff61 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 800181e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	6978      	ldr	r0, [r7, #20]
 8001826:	f7ff ffb1 	bl	800178c <NVIC_EncodePriority>
 800182a:	4602      	mov	r2, r0
 800182c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff80 	bl	8001738 <__NVIC_SetPriority>
}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff54 	bl	80016fc <__NVIC_EnableIRQ>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	795b      	ldrb	r3, [r3, #5]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d105      	bne.n	8001884 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fa86 	bl	8000d90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e03b      	b.n	800191e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fa8a 	bl	8000dd4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	f023 0107 	bic.w	r1, r3, #7
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68d1      	ldr	r1, [r2, #12]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	430b      	orrs	r3, r1
 800190c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d026      	beq.n	8001996 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d021      	beq.n	8001996 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001960:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2204      	movs	r2, #4
 800197a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b00      	cmp	r3, #0
 800199e:	d026      	beq.n	80019ee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d021      	beq.n	80019ee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2220      	movs	r2, #32
 80019c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c6:	f043 0202 	orr.w	r2, r3, #2
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2204      	movs	r2, #4
 80019d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d026      	beq.n	8001a46 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d021      	beq.n	8001a46 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a10:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2208      	movs	r2, #8
 8001a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	f043 0204 	orr.w	r2, r3, #4
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00e      	beq.n	8001a78 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a68:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f853 	bl	8001b1e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01f      	beq.n	8001acc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01f      	beq.n	8001b16 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01a      	beq.n	8001b16 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2210      	movs	r2, #16
 8001af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f80e 	bl	8001b32 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_DMA2D_ConfigLayer+0x20>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e079      	b.n	8001c5c <HAL_DMA2D_ConfigLayer+0x114>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	3318      	adds	r3, #24
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_DMA2D_ConfigLayer+0x120>)
 8001b94:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b0a      	cmp	r3, #10
 8001b9c:	d003      	beq.n	8001ba6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b09      	cmp	r3, #9
 8001ba4:	d107      	bne.n	8001bb6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e005      	b.n	8001bc2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	061b      	lsls	r3, r3, #24
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d120      	bne.n	8001c0a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	ea02 0103 	and.w	r1, r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d003      	beq.n	8001bfa <HAL_DMA2D_ConfigLayer+0xb2>
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b09      	cmp	r3, #9
 8001bf8:	d127      	bne.n	8001c4a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
 8001c08:	e01f      	b.n	8001c4a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	ea02 0103 	and.w	r1, r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b0a      	cmp	r3, #10
 8001c32:	d003      	beq.n	8001c3c <HAL_DMA2D_ConfigLayer+0xf4>
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b09      	cmp	r3, #9
 8001c3a:	d106      	bne.n	8001c4a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c48:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	ff03000f 	.word	0xff03000f

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e177      	b.n	8001f78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8166 	bne.w	8001f72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d00b      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cba:	2b11      	cmp	r3, #17
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0xfc>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80c0 	beq.w	8001f72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <HAL_GPIO_Init+0x320>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a64      	ldr	r2, [pc, #400]	; (8001f8c <HAL_GPIO_Init+0x320>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_GPIO_Init+0x320>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a60      	ldr	r2, [pc, #384]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_GPIO_Init+0x328>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d037      	beq.n	8001eaa <HAL_GPIO_Init+0x23e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a56      	ldr	r2, [pc, #344]	; (8001f98 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d031      	beq.n	8001ea6 <HAL_GPIO_Init+0x23a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d02b      	beq.n	8001ea2 <HAL_GPIO_Init+0x236>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a54      	ldr	r2, [pc, #336]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d025      	beq.n	8001e9e <HAL_GPIO_Init+0x232>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_GPIO_Init+0x338>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01f      	beq.n	8001e9a <HAL_GPIO_Init+0x22e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_GPIO_Init+0x33c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x22a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a51      	ldr	r2, [pc, #324]	; (8001fac <HAL_GPIO_Init+0x340>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x226>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a50      	ldr	r2, [pc, #320]	; (8001fb0 <HAL_GPIO_Init+0x344>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x222>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <HAL_GPIO_Init+0x348>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x21e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4e      	ldr	r2, [pc, #312]	; (8001fb8 <HAL_GPIO_Init+0x34c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x21a>
 8001e82:	2309      	movs	r3, #9
 8001e84:	e012      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e86:	230a      	movs	r3, #10
 8001e88:	e010      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	e00e      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e00c      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e92:	2306      	movs	r3, #6
 8001e94:	e00a      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e96:	2305      	movs	r3, #5
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebc:	4934      	ldr	r1, [pc, #208]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eca:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eee:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f18:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f ae84 	bls.w	8001c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	3724      	adds	r7, #36	; 0x24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40021400 	.word	0x40021400
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40021c00 	.word	0x40021c00
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40022400 	.word	0x40022400
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff4:	b08f      	sub	sp, #60	; 0x3c
 8001ff6:	af0a      	add	r7, sp, #40	; 0x28
 8001ff8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e054      	b.n	80020ae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f009 fcf4 	bl	800ba0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2203      	movs	r2, #3
 8002028:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f9fa 	bl	800643c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	687e      	ldr	r6, [r7, #4]
 8002050:	466d      	mov	r5, sp
 8002052:	f106 0410 	add.w	r4, r6, #16
 8002056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002062:	e885 0003 	stmia.w	r5, {r0, r1}
 8002066:	1d33      	adds	r3, r6, #4
 8002068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206a:	6838      	ldr	r0, [r7, #0]
 800206c:	f004 f974 	bl	8006358 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f9f1 	bl	800645e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	687e      	ldr	r6, [r7, #4]
 8002084:	466d      	mov	r5, sp
 8002086:	f106 0410 	add.w	r4, r6, #16
 800208a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002096:	e885 0003 	stmia.w	r5, {r0, r1}
 800209a:	1d33      	adds	r3, r6, #4
 800209c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	f004 fb04 	bl	80066ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b089      	sub	sp, #36	; 0x24
 80020ba:	af04      	add	r7, sp, #16
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	4608      	mov	r0, r1
 80020c0:	4611      	mov	r1, r2
 80020c2:	461a      	mov	r2, r3
 80020c4:	4603      	mov	r3, r0
 80020c6:	70fb      	strb	r3, [r7, #3]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70bb      	strb	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_HCD_HC_Init+0x28>
 80020da:	2302      	movs	r3, #2
 80020dc:	e07f      	b.n	80021de <HAL_HCD_HC_Init+0x128>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	333d      	adds	r3, #61	; 0x3d
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	3338      	adds	r3, #56	; 0x38
 800210a:	787a      	ldrb	r2, [r7, #1]
 800210c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	3340      	adds	r3, #64	; 0x40
 800211e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002120:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3339      	adds	r3, #57	; 0x39
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	333f      	adds	r3, #63	; 0x3f
 8002146:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800214a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	78bb      	ldrb	r3, [r7, #2]
 8002150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002154:	b2d8      	uxtb	r0, r3
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	333a      	adds	r3, #58	; 0x3a
 8002164:	4602      	mov	r2, r0
 8002166:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da0a      	bge.n	8002186 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	333b      	adds	r3, #59	; 0x3b
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e009      	b.n	800219a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	333b      	adds	r3, #59	; 0x3b
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	333c      	adds	r3, #60	; 0x3c
 80021aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021ae:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	787c      	ldrb	r4, [r7, #1]
 80021b6:	78ba      	ldrb	r2, [r7, #2]
 80021b8:	78f9      	ldrb	r1, [r7, #3]
 80021ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	4623      	mov	r3, r4
 80021cc:	f004 fbf0 	bl	80069b0 <USB_HC_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}

080021e6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_HCD_HC_Halt+0x1e>
 8002200:	2302      	movs	r3, #2
 8002202:	e00f      	b.n	8002224 <HAL_HCD_HC_Halt+0x3e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f004 fe2c 	bl	8006e72 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	70fb      	strb	r3, [r7, #3]
 800223e:	460b      	mov	r3, r1
 8002240:	70bb      	strb	r3, [r7, #2]
 8002242:	4613      	mov	r3, r2
 8002244:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	333b      	adds	r3, #59	; 0x3b
 8002256:	78ba      	ldrb	r2, [r7, #2]
 8002258:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	333f      	adds	r3, #63	; 0x3f
 800226a:	787a      	ldrb	r2, [r7, #1]
 800226c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800226e:	7c3b      	ldrb	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d114      	bne.n	800229e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	3342      	adds	r3, #66	; 0x42
 8002284:	2203      	movs	r2, #3
 8002286:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	333d      	adds	r3, #61	; 0x3d
 8002298:	7f3a      	ldrb	r2, [r7, #28]
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	e009      	b.n	80022b2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	3342      	adds	r3, #66	; 0x42
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022b2:	787b      	ldrb	r3, [r7, #1]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	f200 80d6 	bhi.w	8002466 <HAL_HCD_HC_SubmitRequest+0x23a>
 80022ba:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	08002451 	.word	0x08002451
 80022c8:	0800233d 	.word	0x0800233d
 80022cc:	080023c7 	.word	0x080023c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022d0:	7c3b      	ldrb	r3, [r7, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 80c9 	bne.w	800246a <HAL_HCD_HC_SubmitRequest+0x23e>
 80022d8:	78bb      	ldrb	r3, [r7, #2]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 80c5 	bne.w	800246a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80022e0:	8b3b      	ldrh	r3, [r7, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	3351      	adds	r3, #81	; 0x51
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	3351      	adds	r3, #81	; 0x51
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3342      	adds	r3, #66	; 0x42
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002324:	e0a1      	b.n	800246a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	3342      	adds	r3, #66	; 0x42
 8002336:	2202      	movs	r2, #2
 8002338:	701a      	strb	r2, [r3, #0]
      break;
 800233a:	e096      	b.n	800246a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800233c:	78bb      	ldrb	r3, [r7, #2]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d120      	bne.n	8002384 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	3351      	adds	r3, #81	; 0x51
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3342      	adds	r3, #66	; 0x42
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800236c:	e07e      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	3342      	adds	r3, #66	; 0x42
 800237e:	2202      	movs	r2, #2
 8002380:	701a      	strb	r2, [r3, #0]
      break;
 8002382:	e073      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	3350      	adds	r3, #80	; 0x50
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	3342      	adds	r3, #66	; 0x42
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
      break;
 80023ae:	e05d      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	3342      	adds	r3, #66	; 0x42
 80023c0:	2202      	movs	r2, #2
 80023c2:	701a      	strb	r2, [r3, #0]
      break;
 80023c4:	e052      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023c6:	78bb      	ldrb	r3, [r7, #2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d120      	bne.n	800240e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	3351      	adds	r3, #81	; 0x51
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	3342      	adds	r3, #66	; 0x42
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023f6:	e039      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3342      	adds	r3, #66	; 0x42
 8002408:	2202      	movs	r2, #2
 800240a:	701a      	strb	r2, [r3, #0]
      break;
 800240c:	e02e      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	3350      	adds	r3, #80	; 0x50
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	3342      	adds	r3, #66	; 0x42
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
      break;
 8002438:	e018      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	3342      	adds	r3, #66	; 0x42
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
      break;
 800244e:	e00d      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	3342      	adds	r3, #66	; 0x42
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
      break;
 8002464:	e002      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002466:	bf00      	nop
 8002468:	e000      	b.n	800246c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800246a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	3344      	adds	r3, #68	; 0x44
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	8b39      	ldrh	r1, [r7, #24]
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4403      	add	r3, r0
 8002490:	3348      	adds	r3, #72	; 0x48
 8002492:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	335c      	adds	r3, #92	; 0x5c
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	334c      	adds	r3, #76	; 0x4c
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	3339      	adds	r3, #57	; 0x39
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	335d      	adds	r3, #93	; 0x5d
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	3338      	adds	r3, #56	; 0x38
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	18d1      	adds	r1, r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	f004 fb60 	bl	8006bc4 <USB_HC_StartXfer>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop

08002510 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f004 f87d 	bl	8006626 <USB_GetMode>
 800252c:	4603      	mov	r3, r0
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 80ef 	bne.w	8002712 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f004 f861 	bl	8006600 <USB_ReadInterrupts>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80e5 	beq.w	8002710 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f004 f858 	bl	8006600 <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800255a:	d104      	bne.n	8002566 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002564:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f004 f848 	bl	8006600 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800257a:	d104      	bne.n	8002586 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002584:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f004 f838 	bl	8006600 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002596:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800259a:	d104      	bne.n	80025a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f004 f828 	bl	8006600 <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d103      	bne.n	80025c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2202      	movs	r2, #2
 80025c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 f81a 	bl	8006600 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d6:	d115      	bne.n	8002604 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f009 fa84 	bl	800bb00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 f910 	bl	8006824 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f003 fff9 	bl	8006600 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d102      	bne.n	8002620 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f001 f966 	bl	80038ec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 ffeb 	bl	8006600 <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b08      	cmp	r3, #8
 8002632:	d106      	bne.n	8002642 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f009 fa47 	bl	800bac8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2208      	movs	r2, #8
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 ffda 	bl	8006600 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002656:	d138      	bne.n	80026ca <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f004 fbf7 	bl	8006e50 <USB_HC_ReadInterrupt>
 8002662:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e025      	b.n	80026b6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002694:	d106      	bne.n	80026a4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f8cf 	bl	8002840 <HCD_HC_IN_IRQHandler>
 80026a2:	e005      	b.n	80026b0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fcfd 	bl	80030aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d3d4      	bcc.n	800266a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ff96 	bl	8006600 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d101      	bne.n	80026e2 <HAL_HCD_IRQHandler+0x1d2>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_HCD_IRQHandler+0x1d4>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d014      	beq.n	8002712 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0210 	bic.w	r2, r2, #16
 80026f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f001 f84b 	bl	8003794 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0210 	orr.w	r2, r2, #16
 800270c:	619a      	str	r2, [r3, #24]
 800270e:	e000      	b.n	8002712 <HAL_HCD_IRQHandler+0x202>
      return;
 8002710:	bf00      	nop
    }
  }
}
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_HCD_Start+0x16>
 800272a:	2302      	movs	r3, #2
 800272c:	e013      	b.n	8002756 <HAL_HCD_Start+0x3e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fe6d 	bl	800641a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2101      	movs	r1, #1
 8002746:	4618      	mov	r0, r3
 8002748:	f004 f8d0 	bl	80068ec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_HCD_Stop+0x16>
 8002770:	2302      	movs	r3, #2
 8002772:	e00d      	b.n	8002790 <HAL_HCD_Stop+0x32>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f004 fcb1 	bl	80070e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 f877 	bl	8006898 <USB_ResetPort>
 80027aa:	4603      	mov	r3, r0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	335c      	adds	r3, #92	; 0x5c
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	334c      	adds	r3, #76	; 0x4c
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f004 f8b9 	bl	800698c <USB_GetCurrentFrame>
 800281a:	4603      	mov	r3, r0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f004 f894 	bl	800695e <USB_GetHostSpeed>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d119      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2304      	movs	r3, #4
 8002880:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	0151      	lsls	r1, r2, #5
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	440a      	add	r2, r1
 8002898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	60d3      	str	r3, [r2, #12]
 80028a2:	e0ce      	b.n	8002a42 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ba:	d12c      	bne.n	8002916 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	335d      	adds	r3, #93	; 0x5d
 80028e0:	2207      	movs	r2, #7
 80028e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	0151      	lsls	r1, r2, #5
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	440a      	add	r2, r1
 80028fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f004 faaf 	bl	8006e72 <USB_HC_Halt>
 8002914:	e095      	b.n	8002a42 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b20      	cmp	r3, #32
 800292a:	d109      	bne.n	8002940 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	461a      	mov	r2, r3
 800293a:	2320      	movs	r3, #32
 800293c:	6093      	str	r3, [r2, #8]
 800293e:	e080      	b.n	8002a42 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b08      	cmp	r3, #8
 8002954:	d134      	bne.n	80029c0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	440a      	add	r2, r1
 800296c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	335d      	adds	r3, #93	; 0x5d
 8002986:	2205      	movs	r2, #5
 8002988:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	2310      	movs	r3, #16
 800299a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	2308      	movs	r3, #8
 80029ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 fa5a 	bl	8006e72 <USB_HC_Halt>
 80029be:	e040      	b.n	8002a42 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d6:	d134      	bne.n	8002a42 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	0151      	lsls	r1, r2, #5
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	440a      	add	r2, r1
 80029ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f2:	f043 0302 	orr.w	r3, r3, #2
 80029f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 fa35 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	461a      	mov	r2, r3
 8002a16:	2310      	movs	r3, #16
 8002a18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	335d      	adds	r3, #93	; 0x5d
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a40:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a58:	d122      	bne.n	8002aa0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	0151      	lsls	r1, r2, #5
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	440a      	add	r2, r1
 8002a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f004 f9f4 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a9c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a9e:	e300      	b.n	80030a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	f040 80fd 	bne.w	8002cb2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01b      	beq.n	8002af8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3348      	adds	r3, #72	; 0x48
 8002ad0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0159      	lsls	r1, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	440b      	add	r3, r1
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ae4:	1ad1      	subs	r1, r2, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4403      	add	r3, r0
 8002af4:	334c      	adds	r3, #76	; 0x4c
 8002af6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	335d      	adds	r3, #93	; 0x5d
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3358      	adds	r3, #88	; 0x58
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2301      	movs	r3, #1
 8002b30:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	333f      	adds	r3, #63	; 0x3f
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	333f      	adds	r3, #63	; 0x3f
 8002b58:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d121      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	0151      	lsls	r1, r2, #5
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	440a      	add	r2, r1
 8002b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 f972 	bl	8006e72 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	6093      	str	r3, [r2, #8]
 8002ba0:	e070      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	333f      	adds	r3, #63	; 0x3f
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d12a      	bne.n	8002c0e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	0151      	lsls	r1, r2, #5
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	440a      	add	r2, r1
 8002bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bd6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	335c      	adds	r3, #92	; 0x5c
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	4601      	mov	r1, r0
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f008 ff88 	bl	800bb1c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c0c:	e03a      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	333f      	adds	r3, #63	; 0x3f
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d12f      	bne.n	8002c84 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	3350      	adds	r3, #80	; 0x50
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	f083 0301 	eor.w	r3, r3, #1
 8002c4e:	b2d8      	uxtb	r0, r3
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3350      	adds	r3, #80	; 0x50
 8002c60:	4602      	mov	r2, r0
 8002c62:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	b2d8      	uxtb	r0, r3
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	335c      	adds	r3, #92	; 0x5c
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f008 ff4c 	bl	800bb1c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3350      	adds	r3, #80	; 0x50
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f083 0301 	eor.w	r3, r3, #1
 8002c9a:	b2d8      	uxtb	r0, r3
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	3350      	adds	r3, #80	; 0x50
 8002cac:	4602      	mov	r2, r0
 8002cae:	701a      	strb	r2, [r3, #0]
}
 8002cb0:	e1f7      	b.n	80030a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	f040 811a 	bne.w	8002efe <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	0151      	lsls	r1, r2, #5
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	440a      	add	r2, r1
 8002ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ce4:	f023 0302 	bic.w	r3, r3, #2
 8002ce8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	335d      	adds	r3, #93	; 0x5d
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10a      	bne.n	8002d16 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	335c      	adds	r3, #92	; 0x5c
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e0d9      	b.n	8002eca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	335d      	adds	r3, #93	; 0x5d
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d10a      	bne.n	8002d42 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	335c      	adds	r3, #92	; 0x5c
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e0c3      	b.n	8002eca <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	335d      	adds	r3, #93	; 0x5d
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d00a      	beq.n	8002d6e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	335d      	adds	r3, #93	; 0x5d
 8002d68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d156      	bne.n	8002e1c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3358      	adds	r3, #88	; 0x58
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	1c59      	adds	r1, r3, #1
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4403      	add	r3, r0
 8002d90:	3358      	adds	r3, #88	; 0x58
 8002d92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3358      	adds	r3, #88	; 0x58
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d914      	bls.n	8002dd4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3358      	adds	r3, #88	; 0x58
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	335c      	adds	r3, #92	; 0x5c
 8002dce:	2204      	movs	r2, #4
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e009      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	335c      	adds	r3, #92	; 0x5c
 8002de4:	2202      	movs	r2, #2
 8002de6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dfe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e06:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e056      	b.n	8002eca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	335d      	adds	r3, #93	; 0x5d
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d123      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	335c      	adds	r3, #92	; 0x5c
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e5c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e64:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	461a      	mov	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e027      	b.n	8002eca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	335d      	adds	r3, #93	; 0x5d
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b07      	cmp	r3, #7
 8002e8e:	d11c      	bne.n	8002eca <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3358      	adds	r3, #88	; 0x58
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4403      	add	r3, r0
 8002eb2:	3358      	adds	r3, #88	; 0x58
 8002eb4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	335c      	adds	r3, #92	; 0x5c
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2302      	movs	r3, #2
 8002eda:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	b2d8      	uxtb	r0, r3
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	440b      	add	r3, r1
 8002eee:	335c      	adds	r3, #92	; 0x5c
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f008 fe10 	bl	800bb1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002efc:	e0d1      	b.n	80030a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d13e      	bne.n	8002f92 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	0151      	lsls	r1, r2, #5
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	440a      	add	r2, r1
 8002f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	440b      	add	r3, r1
 8002f42:	3358      	adds	r3, #88	; 0x58
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4403      	add	r3, r0
 8002f56:	3358      	adds	r3, #88	; 0x58
 8002f58:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	335d      	adds	r3, #93	; 0x5d
 8002f6a:	2206      	movs	r2, #6
 8002f6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 ff7a 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	6093      	str	r3, [r2, #8]
}
 8002f90:	e087      	b.n	80030a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d17c      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	333f      	adds	r3, #63	; 0x3f
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d122      	bne.n	8003004 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	440b      	add	r3, r1
 8002fcc:	3358      	adds	r3, #88	; 0x58
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	0151      	lsls	r1, r2, #5
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	440a      	add	r2, r1
 8002fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 ff38 	bl	8006e72 <USB_HC_Halt>
 8003002:	e045      	b.n	8003090 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	333f      	adds	r3, #63	; 0x3f
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	333f      	adds	r3, #63	; 0x3f
 800302a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800302c:	2b02      	cmp	r3, #2
 800302e:	d12f      	bne.n	8003090 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	3358      	adds	r3, #88	; 0x58
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d121      	bne.n	8003090 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	335d      	adds	r3, #93	; 0x5d
 800305c:	2203      	movs	r2, #3
 800305e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	0151      	lsls	r1, r2, #5
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	440a      	add	r2, r1
 8003076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fef1 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	461a      	mov	r2, r3
 800309e:	2310      	movs	r3, #16
 80030a0:	6093      	str	r3, [r2, #8]
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d119      	bne.n	800310e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	461a      	mov	r2, r3
 80030e8:	2304      	movs	r3, #4
 80030ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	0151      	lsls	r1, r2, #5
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	440a      	add	r2, r1
 8003102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003106:	f043 0302 	orr.w	r3, r3, #2
 800310a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800310c:	e33e      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b20      	cmp	r3, #32
 8003122:	d141      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	2320      	movs	r3, #32
 8003134:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	333d      	adds	r3, #61	; 0x3d
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	f040 831f 	bne.w	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	333d      	adds	r3, #61	; 0x3d
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	440b      	add	r3, r1
 8003170:	335c      	adds	r3, #92	; 0x5c
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	0151      	lsls	r1, r2, #5
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	440a      	add	r2, r1
 800318c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fe66 	bl	8006e72 <USB_HC_Halt>
}
 80031a6:	e2f1      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d13f      	bne.n	800323e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	335d      	adds	r3, #93	; 0x5d
 80031ce:	2204      	movs	r2, #4
 80031d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	333d      	adds	r3, #61	; 0x3d
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	3358      	adds	r3, #88	; 0x58
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	0151      	lsls	r1, r2, #5
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	440a      	add	r2, r1
 8003210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f003 fe24 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	461a      	mov	r2, r3
 8003238:	2340      	movs	r3, #64	; 0x40
 800323a:	6093      	str	r3, [r2, #8]
}
 800323c:	e2a6      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d122      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	0151      	lsls	r1, r2, #5
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	440a      	add	r2, r1
 800326c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f003 fdf6 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003298:	6093      	str	r3, [r2, #8]
}
 800329a:	e277      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d135      	bne.n	800331e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	440b      	add	r3, r1
 80032c0:	3358      	adds	r3, #88	; 0x58
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	0151      	lsls	r1, r2, #5
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	440a      	add	r2, r1
 80032dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fdbe 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	461a      	mov	r2, r3
 8003304:	2301      	movs	r3, #1
 8003306:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	335d      	adds	r3, #93	; 0x5d
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
}
 800331c:	e236      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b08      	cmp	r3, #8
 8003332:	d12b      	bne.n	800338c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	461a      	mov	r2, r3
 8003342:	2308      	movs	r3, #8
 8003344:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	0151      	lsls	r1, r2, #5
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	440a      	add	r2, r1
 800335c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f003 fd7e 	bl	8006e72 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	335d      	adds	r3, #93	; 0x5d
 8003386:	2205      	movs	r2, #5
 8003388:	701a      	strb	r2, [r3, #0]
}
 800338a:	e1ff      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d155      	bne.n	800344e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	440b      	add	r3, r1
 80033b0:	3358      	adds	r3, #88	; 0x58
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	335d      	adds	r3, #93	; 0x5d
 80033c6:	2203      	movs	r2, #3
 80033c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	333d      	adds	r3, #61	; 0x3d
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d114      	bne.n	800340a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	333c      	adds	r3, #60	; 0x3c
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	333d      	adds	r3, #61	; 0x3d
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	0151      	lsls	r1, r2, #5
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	440a      	add	r2, r1
 8003420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fd1c 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	461a      	mov	r2, r3
 8003448:	2310      	movs	r3, #16
 800344a:	6093      	str	r3, [r2, #8]
}
 800344c:	e19e      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4413      	add	r3, r2
 8003456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d12b      	bne.n	80034bc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	0151      	lsls	r1, r2, #5
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	440a      	add	r2, r1
 800347a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f003 fcef 	bl	8006e72 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	335d      	adds	r3, #93	; 0x5d
 80034a4:	2206      	movs	r2, #6
 80034a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b4:	461a      	mov	r2, r3
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	6093      	str	r3, [r2, #8]
}
 80034ba:	e167      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d135      	bne.n	8003540 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fcb7 	bl	8006e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	461a      	mov	r2, r3
 8003512:	2310      	movs	r3, #16
 8003514:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003522:	461a      	mov	r2, r3
 8003524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003528:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	440b      	add	r3, r1
 8003538:	335d      	adds	r3, #93	; 0x5d
 800353a:	2208      	movs	r2, #8
 800353c:	701a      	strb	r2, [r3, #0]
}
 800353e:	e125      	b.n	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	f040 811a 	bne.w	800378c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	0151      	lsls	r1, r2, #5
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	440a      	add	r2, r1
 800356e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003572:	f023 0302 	bic.w	r3, r3, #2
 8003576:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	335d      	adds	r3, #93	; 0x5d
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d137      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	335c      	adds	r3, #92	; 0x5c
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	440b      	add	r3, r1
 80035b0:	333f      	adds	r3, #63	; 0x3f
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d00b      	beq.n	80035d0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	333f      	adds	r3, #63	; 0x3f
 80035c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	f040 80c5 	bne.w	800375a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	3351      	adds	r3, #81	; 0x51
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	f083 0301 	eor.w	r3, r3, #1
 80035e6:	b2d8      	uxtb	r0, r3
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	3351      	adds	r3, #81	; 0x51
 80035f8:	4602      	mov	r2, r0
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e0ad      	b.n	800375a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	440b      	add	r3, r1
 800360c:	335d      	adds	r3, #93	; 0x5d
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d10a      	bne.n	800362a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	335c      	adds	r3, #92	; 0x5c
 8003624:	2202      	movs	r2, #2
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e097      	b.n	800375a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	440b      	add	r3, r1
 8003638:	335d      	adds	r3, #93	; 0x5d
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d10a      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	335c      	adds	r3, #92	; 0x5c
 8003650:	2202      	movs	r2, #2
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e081      	b.n	800375a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	440b      	add	r3, r1
 8003664:	335d      	adds	r3, #93	; 0x5d
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d10a      	bne.n	8003682 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	335c      	adds	r3, #92	; 0x5c
 800367c:	2205      	movs	r2, #5
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e06b      	b.n	800375a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	335d      	adds	r3, #93	; 0x5d
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b06      	cmp	r3, #6
 8003696:	d00a      	beq.n	80036ae <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	335d      	adds	r3, #93	; 0x5d
 80036a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d155      	bne.n	800375a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	3358      	adds	r3, #88	; 0x58
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	1c59      	adds	r1, r3, #1
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4403      	add	r3, r0
 80036d0:	3358      	adds	r3, #88	; 0x58
 80036d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	3358      	adds	r3, #88	; 0x58
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d914      	bls.n	8003714 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	3358      	adds	r3, #88	; 0x58
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	335c      	adds	r3, #92	; 0x5c
 800370e:	2204      	movs	r2, #4
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e009      	b.n	8003728 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	335c      	adds	r3, #92	; 0x5c
 8003724:	2202      	movs	r2, #2
 8003726:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800373e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003746:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003754:	461a      	mov	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4413      	add	r3, r2
 8003762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003766:	461a      	mov	r2, r3
 8003768:	2302      	movs	r3, #2
 800376a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	b2d8      	uxtb	r0, r3
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	335c      	adds	r3, #92	; 0x5c
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	4601      	mov	r1, r0
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f008 f9c8 	bl	800bb1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	0c5b      	lsrs	r3, r3, #17
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d003      	beq.n	80037d8 <HCD_RXQLVL_IRQHandler+0x44>
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	f000 8082 	beq.w	80038da <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037d6:	e083      	b.n	80038e0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d07f      	beq.n	80038de <HCD_RXQLVL_IRQHandler+0x14a>
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	3344      	adds	r3, #68	; 0x44
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d074      	beq.n	80038de <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	3344      	adds	r3, #68	; 0x44
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	b292      	uxth	r2, r2
 800380e:	4619      	mov	r1, r3
 8003810:	f002 fecd 	bl	80065ae <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	440b      	add	r3, r1
 8003822:	3344      	adds	r3, #68	; 0x44
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	18d1      	adds	r1, r2, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4403      	add	r3, r0
 8003838:	3344      	adds	r3, #68	; 0x44
 800383a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	334c      	adds	r3, #76	; 0x4c
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	18d1      	adds	r1, r2, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4403      	add	r3, r0
 8003860:	334c      	adds	r3, #76	; 0x4c
 8003862:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d031      	beq.n	80038de <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003890:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003898:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	3350      	adds	r3, #80	; 0x50
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	f083 0301 	eor.w	r3, r3, #1
 80038c2:	b2d8      	uxtb	r0, r3
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	3350      	adds	r3, #80	; 0x50
 80038d4:	4602      	mov	r2, r0
 80038d6:	701a      	strb	r2, [r3, #0]
      break;
 80038d8:	e001      	b.n	80038de <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80038de:	bf00      	nop
  }
}
 80038e0:	bf00      	nop
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	1ff80000 	.word	0x1ff80000

080038ec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003918:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b02      	cmp	r3, #2
 8003922:	d10b      	bne.n	800393c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d102      	bne.n	8003934 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f008 f8d8 	bl	800bae4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b08      	cmp	r3, #8
 8003944:	d132      	bne.n	80039ac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f043 0308 	orr.w	r3, r3, #8
 800394c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d126      	bne.n	80039a6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d113      	bne.n	8003988 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003966:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800396a:	d106      	bne.n	800397a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2102      	movs	r1, #2
 8003972:	4618      	mov	r0, r3
 8003974:	f002 ff56 	bl	8006824 <USB_InitFSLSPClkSel>
 8003978:	e011      	b.n	800399e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	4618      	mov	r0, r3
 8003982:	f002 ff4f 	bl	8006824 <USB_InitFSLSPClkSel>
 8003986:	e00a      	b.n	800399e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d106      	bne.n	800399e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003996:	461a      	mov	r2, r3
 8003998:	f64e 2360 	movw	r3, #60000	; 0xea60
 800399c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f008 f8ce 	bl	800bb40 <HAL_HCD_PortEnabled_Callback>
 80039a4:	e002      	b.n	80039ac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f008 f8d8 	bl	800bb5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d103      	bne.n	80039be <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f043 0320 	orr.w	r3, r3, #32
 80039bc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6013      	str	r3, [r2, #0]
}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e11f      	b.n	8003c26 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fa12 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a38:	f001 f922 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8003a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <HAL_I2C_Init+0x25c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d807      	bhi.n	8003a58 <HAL_I2C_Init+0x84>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a7a      	ldr	r2, [pc, #488]	; (8003c34 <HAL_I2C_Init+0x260>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	bf94      	ite	ls
 8003a50:	2301      	movls	r3, #1
 8003a52:	2300      	movhi	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e006      	b.n	8003a66 <HAL_I2C_Init+0x92>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a77      	ldr	r2, [pc, #476]	; (8003c38 <HAL_I2C_Init+0x264>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	bf94      	ite	ls
 8003a60:	2301      	movls	r3, #1
 8003a62:	2300      	movhi	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0db      	b.n	8003c26 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a72      	ldr	r2, [pc, #456]	; (8003c3c <HAL_I2C_Init+0x268>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0c9b      	lsrs	r3, r3, #18
 8003a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a64      	ldr	r2, [pc, #400]	; (8003c30 <HAL_I2C_Init+0x25c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d802      	bhi.n	8003aa8 <HAL_I2C_Init+0xd4>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	e009      	b.n	8003abc <HAL_I2C_Init+0xe8>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	4a63      	ldr	r2, [pc, #396]	; (8003c40 <HAL_I2C_Init+0x26c>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	3301      	adds	r3, #1
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4956      	ldr	r1, [pc, #344]	; (8003c30 <HAL_I2C_Init+0x25c>)
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	d80d      	bhi.n	8003af8 <HAL_I2C_Init+0x124>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e59      	subs	r1, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	bf38      	it	cc
 8003af4:	2304      	movcc	r3, #4
 8003af6:	e04f      	b.n	8003b98 <HAL_I2C_Init+0x1c4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d111      	bne.n	8003b24 <HAL_I2C_Init+0x150>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e012      	b.n	8003b4a <HAL_I2C_Init+0x176>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e58      	subs	r0, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Init+0x17e>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e022      	b.n	8003b98 <HAL_I2C_Init+0x1c4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10e      	bne.n	8003b78 <HAL_I2C_Init+0x1a4>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1e58      	subs	r0, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	440b      	add	r3, r1
 8003b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b76:	e00f      	b.n	8003b98 <HAL_I2C_Init+0x1c4>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	6809      	ldr	r1, [r1, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6911      	ldr	r1, [r2, #16]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	000186a0 	.word	0x000186a0
 8003c34:	001e847f 	.word	0x001e847f
 8003c38:	003d08ff 	.word	0x003d08ff
 8003c3c:	431bde83 	.word	0x431bde83
 8003c40:	10624dd3 	.word	0x10624dd3

08003c44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d129      	bne.n	8003cae <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2224      	movs	r2, #36	; 0x24
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0210 	bic.w	r2, r2, #16
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d12a      	bne.n	8003d2c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2224      	movs	r2, #36	; 0x24
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003cf6:	89fb      	ldrh	r3, [r7, #14]
 8003cf8:	f023 030f 	bic.w	r3, r3, #15
 8003cfc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	89fb      	ldrh	r3, [r7, #14]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	89fa      	ldrh	r2, [r7, #14]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0bf      	b.n	8003ece <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd f8c8 	bl	8000ef8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d7e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6999      	ldr	r1, [r3, #24]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d94:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_LTDC_Init+0x19c>)
 8003db0:	400b      	ands	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6899      	ldr	r1, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68d9      	ldr	r1, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_LTDC_Init+0x19c>)
 8003dde:	400b      	ands	r3, r1
 8003de0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6919      	ldr	r1, [r3, #16]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_LTDC_Init+0x19c>)
 8003e0c:	400b      	ands	r3, r1
 8003e0e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6919      	ldr	r1, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6959      	ldr	r1, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_LTDC_Init+0x19c>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6959      	ldr	r1, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0206 	orr.w	r2, r2, #6
 8003eaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	f000f800 	.word	0xf000f800

08003edc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d023      	beq.n	8003f46 <HAL_LTDC_IRQHandler+0x6a>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01e      	beq.n	8003f46 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0204 	bic.w	r2, r2, #4
 8003f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2204      	movs	r2, #4
 8003f34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f86f 	bl	8004024 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d023      	beq.n	8003f98 <HAL_LTDC_IRQHandler+0xbc>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01e      	beq.n	8003f98 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0202 	bic.w	r2, r2, #2
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f78:	f043 0202 	orr.w	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2204      	movs	r2, #4
 8003f86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f846 	bl	8004024 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01b      	beq.n	8003fda <HAL_LTDC_IRQHandler+0xfe>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d016      	beq.n	8003fda <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f82f 	bl	8004038 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <HAL_LTDC_IRQHandler+0x140>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0208 	bic.w	r2, r2, #8
 8003ffc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2208      	movs	r2, #8
 8004004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f818 	bl	800404c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_LTDC_ConfigLayer+0x1a>
 8004076:	2302      	movs	r3, #2
 8004078:	e02c      	b.n	80040d4 <HAL_LTDC_ConfigLayer+0x74>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2134      	movs	r1, #52	; 0x34
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	4413      	add	r3, r2
 8004096:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4614      	mov	r4, r2
 800409e:	461d      	mov	r5, r3
 80040a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f811 	bl	80040dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2201      	movs	r2, #1
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bdb0      	pop	{r4, r5, r7, pc}

080040dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f8:	4413      	add	r3, r2
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	01db      	lsls	r3, r3, #7
 8004108:	4413      	add	r3, r2
 800410a:	3384      	adds	r3, #132	; 0x84
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	4611      	mov	r1, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	01d2      	lsls	r2, r2, #7
 8004118:	440a      	add	r2, r1
 800411a:	3284      	adds	r2, #132	; 0x84
 800411c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004120:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004132:	4413      	add	r3, r2
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4619      	mov	r1, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	01db      	lsls	r3, r3, #7
 8004140:	440b      	add	r3, r1
 8004142:	3384      	adds	r3, #132	; 0x84
 8004144:	4619      	mov	r1, r3
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800415a:	4413      	add	r3, r2
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	01db      	lsls	r3, r3, #7
 800416a:	4413      	add	r3, r2
 800416c:	3384      	adds	r3, #132	; 0x84
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	4611      	mov	r1, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	01d2      	lsls	r2, r2, #7
 800417a:	440a      	add	r2, r1
 800417c:	3284      	adds	r2, #132	; 0x84
 800417e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004182:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004192:	4413      	add	r3, r2
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4619      	mov	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	01db      	lsls	r3, r3, #7
 80041a0:	440b      	add	r3, r1
 80041a2:	3384      	adds	r3, #132	; 0x84
 80041a4:	4619      	mov	r1, r3
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	01db      	lsls	r3, r3, #7
 80041b6:	4413      	add	r3, r2
 80041b8:	3384      	adds	r3, #132	; 0x84
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	4611      	mov	r1, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	01d2      	lsls	r2, r2, #7
 80041c6:	440a      	add	r2, r1
 80041c8:	3284      	adds	r2, #132	; 0x84
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	01db      	lsls	r3, r3, #7
 80041da:	4413      	add	r3, r2
 80041dc:	3384      	adds	r3, #132	; 0x84
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	061b      	lsls	r3, r3, #24
 8004200:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	01db      	lsls	r3, r3, #7
 800420c:	4413      	add	r3, r2
 800420e:	3384      	adds	r3, #132	; 0x84
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	01db      	lsls	r3, r3, #7
 800421c:	4413      	add	r3, r2
 800421e:	3384      	adds	r3, #132	; 0x84
 8004220:	461a      	mov	r2, r3
 8004222:	2300      	movs	r3, #0
 8004224:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800422c:	461a      	mov	r2, r3
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	431a      	orrs	r2, r3
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4619      	mov	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	01db      	lsls	r3, r3, #7
 8004240:	440b      	add	r3, r1
 8004242:	3384      	adds	r3, #132	; 0x84
 8004244:	4619      	mov	r1, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	01db      	lsls	r3, r3, #7
 8004256:	4413      	add	r3, r2
 8004258:	3384      	adds	r3, #132	; 0x84
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	4611      	mov	r1, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	01d2      	lsls	r2, r2, #7
 8004266:	440a      	add	r2, r1
 8004268:	3284      	adds	r2, #132	; 0x84
 800426a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800426e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	01db      	lsls	r3, r3, #7
 800427a:	4413      	add	r3, r2
 800427c:	3384      	adds	r3, #132	; 0x84
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	01db      	lsls	r3, r3, #7
 8004290:	4413      	add	r3, r2
 8004292:	3384      	adds	r3, #132	; 0x84
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	4611      	mov	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	01d2      	lsls	r2, r2, #7
 80042a0:	440a      	add	r2, r1
 80042a2:	3284      	adds	r2, #132	; 0x84
 80042a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042a8:	f023 0307 	bic.w	r3, r3, #7
 80042ac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	6809      	ldr	r1, [r1, #0]
 80042ba:	4608      	mov	r0, r1
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	01c9      	lsls	r1, r1, #7
 80042c0:	4401      	add	r1, r0
 80042c2:	3184      	adds	r1, #132	; 0x84
 80042c4:	4313      	orrs	r3, r2
 80042c6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	01db      	lsls	r3, r3, #7
 80042d2:	4413      	add	r3, r2
 80042d4:	3384      	adds	r3, #132	; 0x84
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	01db      	lsls	r3, r3, #7
 80042e2:	4413      	add	r3, r2
 80042e4:	3384      	adds	r3, #132	; 0x84
 80042e6:	461a      	mov	r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	01db      	lsls	r3, r3, #7
 80042f6:	4413      	add	r3, r2
 80042f8:	3384      	adds	r3, #132	; 0x84
 80042fa:	461a      	mov	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800430a:	2304      	movs	r3, #4
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	e01b      	b.n	8004348 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d102      	bne.n	800431e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004318:	2303      	movs	r3, #3
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e014      	b.n	8004348 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b04      	cmp	r3, #4
 8004324:	d00b      	beq.n	800433e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800432a:	2b02      	cmp	r3, #2
 800432c:	d007      	beq.n	800433e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004332:	2b03      	cmp	r3, #3
 8004334:	d003      	beq.n	800433e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800433a:	2b07      	cmp	r3, #7
 800433c:	d102      	bne.n	8004344 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800433e:	2302      	movs	r3, #2
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	e001      	b.n	8004348 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	01db      	lsls	r3, r3, #7
 8004352:	4413      	add	r3, r2
 8004354:	3384      	adds	r3, #132	; 0x84
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	4611      	mov	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	01d2      	lsls	r2, r2, #7
 8004362:	440a      	add	r2, r1
 8004364:	3284      	adds	r2, #132	; 0x84
 8004366:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800436a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	041a      	lsls	r2, r3, #16
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1acb      	subs	r3, r1, r3
 8004382:	69f9      	ldr	r1, [r7, #28]
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	3303      	adds	r3, #3
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	6809      	ldr	r1, [r1, #0]
 800438e:	4608      	mov	r0, r1
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	01c9      	lsls	r1, r1, #7
 8004394:	4401      	add	r1, r0
 8004396:	3184      	adds	r1, #132	; 0x84
 8004398:	4313      	orrs	r3, r2
 800439a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	01db      	lsls	r3, r3, #7
 80043a6:	4413      	add	r3, r2
 80043a8:	3384      	adds	r3, #132	; 0x84
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	4611      	mov	r1, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	01d2      	lsls	r2, r2, #7
 80043b6:	440a      	add	r2, r1
 80043b8:	3284      	adds	r2, #132	; 0x84
 80043ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043be:	f023 0307 	bic.w	r3, r3, #7
 80043c2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	01db      	lsls	r3, r3, #7
 80043ce:	4413      	add	r3, r2
 80043d0:	3384      	adds	r3, #132	; 0x84
 80043d2:	461a      	mov	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	01db      	lsls	r3, r3, #7
 80043e4:	4413      	add	r3, r2
 80043e6:	3384      	adds	r3, #132	; 0x84
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	4611      	mov	r1, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	01d2      	lsls	r2, r2, #7
 80043f4:	440a      	add	r2, r1
 80043f6:	3284      	adds	r2, #132	; 0x84
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6013      	str	r3, [r2, #0]
}
 80043fe:	bf00      	nop
 8004400:	3724      	adds	r7, #36	; 0x24
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e25b      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d075      	beq.n	8004516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442a:	4ba3      	ldr	r3, [pc, #652]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b04      	cmp	r3, #4
 8004434:	d00c      	beq.n	8004450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004436:	4ba0      	ldr	r3, [pc, #640]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800443e:	2b08      	cmp	r3, #8
 8004440:	d112      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	4b9d      	ldr	r3, [pc, #628]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444e:	d10b      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	4b99      	ldr	r3, [pc, #612]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05b      	beq.n	8004514 <HAL_RCC_OscConfig+0x108>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d157      	bne.n	8004514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e236      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x74>
 8004472:	4b91      	ldr	r3, [pc, #580]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a90      	ldr	r2, [pc, #576]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e01d      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x98>
 800448a:	4b8b      	ldr	r3, [pc, #556]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a8a      	ldr	r2, [pc, #552]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b88      	ldr	r3, [pc, #544]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a87      	ldr	r2, [pc, #540]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 80044a4:	4b84      	ldr	r3, [pc, #528]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a83      	ldr	r2, [pc, #524]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b81      	ldr	r3, [pc, #516]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a80      	ldr	r2, [pc, #512]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fd f8ba 	bl	800163c <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fd f8b6 	bl	800163c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1fb      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0xc0>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd f8a6 	bl	800163c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fd f8a2 	bl	800163c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1e7      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004506:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0xe8>
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d063      	beq.n	80045ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004522:	4b65      	ldr	r3, [pc, #404]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452e:	4b62      	ldr	r3, [pc, #392]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004536:	2b08      	cmp	r3, #8
 8004538:	d11c      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b5f      	ldr	r3, [pc, #380]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d116      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	4b5c      	ldr	r3, [pc, #368]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e1bb      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455e:	4b56      	ldr	r3, [pc, #344]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4952      	ldr	r1, [pc, #328]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004572:	e03a      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800457c:	4b4f      	ldr	r3, [pc, #316]	; (80046bc <HAL_RCC_OscConfig+0x2b0>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd f85b 	bl	800163c <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458a:	f7fd f857 	bl	800163c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e19c      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459c:	4b46      	ldr	r3, [pc, #280]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4940      	ldr	r1, [pc, #256]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_RCC_OscConfig+0x2b0>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd f83a 	bl	800163c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fd f836 	bl	800163c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e17b      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d030      	beq.n	8004658 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d016      	beq.n	800462c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fe:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <HAL_RCC_OscConfig+0x2b4>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004604:	f7fd f81a 	bl	800163c <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460c:	f7fd f816 	bl	800163c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e15b      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461e:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x200>
 800462a:	e015      	b.n	8004658 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462c:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCC_OscConfig+0x2b4>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7fd f803 	bl	800163c <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463a:	f7fc ffff 	bl	800163c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e144      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800464e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80a0 	beq.w	80047a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004684:	6413      	str	r3, [r2, #64]	; 0x40
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004692:	2301      	movs	r3, #1
 8004694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCC_OscConfig+0x2b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d121      	bne.n	80046e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_RCC_OscConfig+0x2b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <HAL_RCC_OscConfig+0x2b8>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ae:	f7fc ffc5 	bl	800163c <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	e011      	b.n	80046da <HAL_RCC_OscConfig+0x2ce>
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	42470000 	.word	0x42470000
 80046c0:	42470e80 	.word	0x42470e80
 80046c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c8:	f7fc ffb8 	bl	800163c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0fd      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046da:	4b81      	ldr	r3, [pc, #516]	; (80048e0 <HAL_RCC_OscConfig+0x4d4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d106      	bne.n	80046fc <HAL_RCC_OscConfig+0x2f0>
 80046ee:	4b7d      	ldr	r3, [pc, #500]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	4a7c      	ldr	r2, [pc, #496]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6713      	str	r3, [r2, #112]	; 0x70
 80046fa:	e01c      	b.n	8004736 <HAL_RCC_OscConfig+0x32a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b05      	cmp	r3, #5
 8004702:	d10c      	bne.n	800471e <HAL_RCC_OscConfig+0x312>
 8004704:	4b77      	ldr	r3, [pc, #476]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4a76      	ldr	r2, [pc, #472]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 800470a:	f043 0304 	orr.w	r3, r3, #4
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
 8004710:	4b74      	ldr	r3, [pc, #464]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a73      	ldr	r2, [pc, #460]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	e00b      	b.n	8004736 <HAL_RCC_OscConfig+0x32a>
 800471e:	4b71      	ldr	r3, [pc, #452]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	4a70      	ldr	r2, [pc, #448]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
 800472a:	4b6e      	ldr	r3, [pc, #440]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	4a6d      	ldr	r2, [pc, #436]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 8004730:	f023 0304 	bic.w	r3, r3, #4
 8004734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d015      	beq.n	800476a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473e:	f7fc ff7d 	bl	800163c <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004744:	e00a      	b.n	800475c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fc ff79 	bl	800163c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	; 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e0bc      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	4b61      	ldr	r3, [pc, #388]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ee      	beq.n	8004746 <HAL_RCC_OscConfig+0x33a>
 8004768:	e014      	b.n	8004794 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fc ff67 	bl	800163c <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fc ff63 	bl	800163c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e0a6      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004788:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ee      	bne.n	8004772 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479a:	4b52      	ldr	r3, [pc, #328]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	4a51      	ldr	r2, [pc, #324]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 80047a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8092 	beq.w	80048d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047b0:	4b4c      	ldr	r3, [pc, #304]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d05c      	beq.n	8004876 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d141      	bne.n	8004848 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c4:	4b48      	ldr	r3, [pc, #288]	; (80048e8 <HAL_RCC_OscConfig+0x4dc>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fc ff37 	bl	800163c <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d2:	f7fc ff33 	bl	800163c <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e078      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e4:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f0      	bne.n	80047d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	019b      	lsls	r3, r3, #6
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	3b01      	subs	r3, #1
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	4933      	ldr	r1, [pc, #204]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800481a:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <HAL_RCC_OscConfig+0x4dc>)
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fc ff0c 	bl	800163c <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004828:	f7fc ff08 	bl	800163c <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e04d      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483a:	4b2a      	ldr	r3, [pc, #168]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x41c>
 8004846:	e045      	b.n	80048d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004848:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <HAL_RCC_OscConfig+0x4dc>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fc fef5 	bl	800163c <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004856:	f7fc fef1 	bl	800163c <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e036      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004868:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <HAL_RCC_OscConfig+0x44a>
 8004874:	e02e      	b.n	80048d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e029      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004882:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <HAL_RCC_OscConfig+0x4d8>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	429a      	cmp	r2, r3
 8004894:	d11c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d115      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048aa:	4013      	ands	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10d      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d106      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40007000 	.word	0x40007000
 80048e4:	40023800 	.word	0x40023800
 80048e8:	42470060 	.word	0x42470060

080048ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0cc      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b68      	ldr	r3, [pc, #416]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d90c      	bls.n	8004928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b63      	ldr	r3, [pc, #396]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0b8      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004940:	4b59      	ldr	r3, [pc, #356]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a58      	ldr	r2, [pc, #352]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800494a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004958:	4b53      	ldr	r3, [pc, #332]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a52      	ldr	r2, [pc, #328]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	494d      	ldr	r1, [pc, #308]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d044      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d119      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e07f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049aa:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e06f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e067      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ca:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4934      	ldr	r1, [pc, #208]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049dc:	f7fc fe2e 	bl	800163c <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7fc fe2a 	bl	800163c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e04f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 020c 	and.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1eb      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d20c      	bcs.n	8004a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e032      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4916      	ldr	r1, [pc, #88]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	490e      	ldr	r1, [pc, #56]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a72:	f000 f821 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a76:	4601      	mov	r1, r0
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	5cd3      	ldrb	r3, [r2, r3]
 8004a86:	fa21 f303 	lsr.w	r3, r1, r3
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fc94 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023c00 	.word	0x40023c00
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	0800c208 	.word	0x0800c208
 8004ab0:	20000000 	.word	0x20000000
 8004ab4:	20000004 	.word	0x20000004

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ace:	4b63      	ldr	r3, [pc, #396]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d007      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x32>
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d008      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x38>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 80b4 	bne.w	8004c4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b5e      	ldr	r3, [pc, #376]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ae6:	60bb      	str	r3, [r7, #8]
       break;
 8004ae8:	e0b3      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aea:	4b5e      	ldr	r3, [pc, #376]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004aec:	60bb      	str	r3, [r7, #8]
      break;
 8004aee:	e0b0      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af0:	4b5a      	ldr	r3, [pc, #360]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004afa:	4b58      	ldr	r3, [pc, #352]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04a      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b55      	ldr	r3, [pc, #340]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	ea03 0501 	and.w	r5, r3, r1
 8004b1c:	ea04 0602 	and.w	r6, r4, r2
 8004b20:	4629      	mov	r1, r5
 8004b22:	4632      	mov	r2, r6
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	f04f 0400 	mov.w	r4, #0
 8004b2c:	0154      	lsls	r4, r2, #5
 8004b2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b32:	014b      	lsls	r3, r1, #5
 8004b34:	4619      	mov	r1, r3
 8004b36:	4622      	mov	r2, r4
 8004b38:	1b49      	subs	r1, r1, r5
 8004b3a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	f04f 0400 	mov.w	r4, #0
 8004b46:	0194      	lsls	r4, r2, #6
 8004b48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b4c:	018b      	lsls	r3, r1, #6
 8004b4e:	1a5b      	subs	r3, r3, r1
 8004b50:	eb64 0402 	sbc.w	r4, r4, r2
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	00e2      	lsls	r2, r4, #3
 8004b5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b62:	00d9      	lsls	r1, r3, #3
 8004b64:	460b      	mov	r3, r1
 8004b66:	4614      	mov	r4, r2
 8004b68:	195b      	adds	r3, r3, r5
 8004b6a:	eb44 0406 	adc.w	r4, r4, r6
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	0262      	lsls	r2, r4, #9
 8004b78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b7c:	0259      	lsls	r1, r3, #9
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4614      	mov	r4, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	4621      	mov	r1, r4
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f04f 0400 	mov.w	r4, #0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	f7fb fb2e 	bl	80001f0 <__aeabi_uldivmod>
 8004b94:	4603      	mov	r3, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e049      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9c:	4b2f      	ldr	r3, [pc, #188]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	f04f 0400 	mov.w	r4, #0
 8004ba6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	ea03 0501 	and.w	r5, r3, r1
 8004bb2:	ea04 0602 	and.w	r6, r4, r2
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4632      	mov	r2, r6
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	f04f 0400 	mov.w	r4, #0
 8004bc2:	0154      	lsls	r4, r2, #5
 8004bc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bc8:	014b      	lsls	r3, r1, #5
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4622      	mov	r2, r4
 8004bce:	1b49      	subs	r1, r1, r5
 8004bd0:	eb62 0206 	sbc.w	r2, r2, r6
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	0194      	lsls	r4, r2, #6
 8004bde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004be2:	018b      	lsls	r3, r1, #6
 8004be4:	1a5b      	subs	r3, r3, r1
 8004be6:	eb64 0402 	sbc.w	r4, r4, r2
 8004bea:	f04f 0100 	mov.w	r1, #0
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	00e2      	lsls	r2, r4, #3
 8004bf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bf8:	00d9      	lsls	r1, r3, #3
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	195b      	adds	r3, r3, r5
 8004c00:	eb44 0406 	adc.w	r4, r4, r6
 8004c04:	f04f 0100 	mov.w	r1, #0
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	02a2      	lsls	r2, r4, #10
 8004c0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c12:	0299      	lsls	r1, r3, #10
 8004c14:	460b      	mov	r3, r1
 8004c16:	4614      	mov	r4, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f04f 0400 	mov.w	r4, #0
 8004c22:	461a      	mov	r2, r3
 8004c24:	4623      	mov	r3, r4
 8004c26:	f7fb fae3 	bl	80001f0 <__aeabi_uldivmod>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	60bb      	str	r3, [r7, #8]
      break;
 8004c4a:	e002      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c4e:	60bb      	str	r3, [r7, #8]
      break;
 8004c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c52:	68bb      	ldr	r3, [r7, #8]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	00f42400 	.word	0x00f42400
 8004c64:	007a1200 	.word	0x007a1200

08004c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000000 	.word	0x20000000

08004c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c84:	f7ff fff0 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8004c88:	4601      	mov	r1, r0
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	0a9b      	lsrs	r3, r3, #10
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4a03      	ldr	r2, [pc, #12]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c96:	5cd3      	ldrb	r3, [r2, r3]
 8004c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	0800c218 	.word	0x0800c218

08004ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cac:	f7ff ffdc 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	0b5b      	lsrs	r3, r3, #13
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	4a03      	ldr	r2, [pc, #12]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cbe:	5cd3      	ldrb	r3, [r2, r3]
 8004cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	0800c218 	.word	0x0800c218

08004cd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	220f      	movs	r2, #15
 8004cde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ce0:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_RCC_GetClockConfig+0x5c>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 0203 	and.w	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <HAL_RCC_GetClockConfig+0x5c>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <HAL_RCC_GetClockConfig+0x5c>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_RCC_GetClockConfig+0x5c>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	08db      	lsrs	r3, r3, #3
 8004d0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d12:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <HAL_RCC_GetClockConfig+0x60>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 020f 	and.w	r2, r3, #15
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	601a      	str	r2, [r3, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	40023c00 	.word	0x40023c00

08004d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d075      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d68:	4bad      	ldr	r3, [pc, #692]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d6e:	f7fc fc65 	bl	800163c <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d76:	f7fc fc61 	bl	800163c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e18b      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d88:	4ba6      	ldr	r3, [pc, #664]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f0      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	019a      	lsls	r2, r3, #6
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	071b      	lsls	r3, r3, #28
 8004dac:	499d      	ldr	r1, [pc, #628]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01f      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dc0:	4b98      	ldr	r3, [pc, #608]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc6:	0f1b      	lsrs	r3, r3, #28
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	019a      	lsls	r2, r3, #6
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	061b      	lsls	r3, r3, #24
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	071b      	lsls	r3, r3, #28
 8004de0:	4990      	ldr	r1, [pc, #576]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004de8:	4b8e      	ldr	r3, [pc, #568]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dee:	f023 021f 	bic.w	r2, r3, #31
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	498a      	ldr	r1, [pc, #552]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	019a      	lsls	r2, r3, #6
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	061b      	lsls	r3, r3, #24
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	071b      	lsls	r3, r3, #28
 8004e20:	4980      	ldr	r1, [pc, #512]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e28:	4b7d      	ldr	r3, [pc, #500]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e2e:	f7fc fc05 	bl	800163c <HAL_GetTick>
 8004e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e36:	f7fc fc01 	bl	800163c <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e12b      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e48:	4b76      	ldr	r3, [pc, #472]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d079      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e6c:	4b6e      	ldr	r3, [pc, #440]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e72:	f7fc fbe3 	bl	800163c <HAL_GetTick>
 8004e76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e7a:	f7fc fbdf 	bl	800163c <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e109      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e8c:	4b65      	ldr	r3, [pc, #404]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e98:	d0ef      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d020      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ea6:	4b5f      	ldr	r3, [pc, #380]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	0f1b      	lsrs	r3, r3, #28
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	019a      	lsls	r2, r3, #6
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	061b      	lsls	r3, r3, #24
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	071b      	lsls	r3, r3, #28
 8004ec6:	4957      	ldr	r1, [pc, #348]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ece:	4b55      	ldr	r3, [pc, #340]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	4950      	ldr	r1, [pc, #320]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01e      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ef4:	4b4b      	ldr	r3, [pc, #300]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	0e1b      	lsrs	r3, r3, #24
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	019a      	lsls	r2, r3, #6
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	071b      	lsls	r3, r3, #28
 8004f14:	4943      	ldr	r1, [pc, #268]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f1c:	4b41      	ldr	r3, [pc, #260]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	493e      	ldr	r1, [pc, #248]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f32:	4b3d      	ldr	r3, [pc, #244]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f38:	f7fc fb80 	bl	800163c <HAL_GetTick>
 8004f3c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f40:	f7fc fb7c 	bl	800163c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0a6      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f52:	4b34      	ldr	r3, [pc, #208]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5e:	d1ef      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 808d 	beq.w	8005088 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	4b2c      	ldr	r3, [pc, #176]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f7e:	4b29      	ldr	r3, [pc, #164]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f8a:	4b28      	ldr	r3, [pc, #160]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a27      	ldr	r2, [pc, #156]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f96:	f7fc fb51 	bl	800163c <HAL_GetTick>
 8004f9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f9e:	f7fc fb4d 	bl	800163c <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e077      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fb0:	4b1e      	ldr	r3, [pc, #120]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fbc:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d039      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d032      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fe4:	4b12      	ldr	r3, [pc, #72]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fea:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d11e      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005002:	f7fc fb1b 	bl	800163c <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005008:	e014      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500a:	f7fc fb17 	bl	800163c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d90b      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e03f      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005020:	42470068 	.word	0x42470068
 8005024:	40023800 	.word	0x40023800
 8005028:	42470070 	.word	0x42470070
 800502c:	40007000 	.word	0x40007000
 8005030:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0e4      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504c:	d10d      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800504e:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	4911      	ldr	r1, [pc, #68]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005064:	4313      	orrs	r3, r2
 8005066:	608b      	str	r3, [r1, #8]
 8005068:	e005      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005070:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005074:	6093      	str	r3, [r2, #8]
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005078:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005082:	4909      	ldr	r1, [pc, #36]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005084:	4313      	orrs	r3, r2
 8005086:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800509c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40023800 	.word	0x40023800
 80050ac:	424711e0 	.word	0x424711e0

080050b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e025      	b.n	8005110 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fc f967 	bl	80013ac <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f001 f83f 	bl	8006174 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	461a      	mov	r2, r3
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	f001 f8aa 	bl	800625a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e056      	b.n	80051d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fb ffed 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005160:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	ea42 0103 	orr.w	r1, r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	f003 0104 	and.w	r1, r3, #4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e01d      	b.n	800522e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fb ffd4 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fa14 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b06      	cmp	r3, #6
 800525e:	d007      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d122      	bne.n	80052da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d11b      	bne.n	80052da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0202 	mvn.w	r2, #2
 80052aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f9a5 	bl	8005610 <HAL_TIM_IC_CaptureCallback>
 80052c6:	e005      	b.n	80052d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f997 	bl	80055fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9a8 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d122      	bne.n	800532e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d11b      	bne.n	800532e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f06f 0204 	mvn.w	r2, #4
 80052fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f97b 	bl	8005610 <HAL_TIM_IC_CaptureCallback>
 800531a:	e005      	b.n	8005328 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f96d 	bl	80055fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f97e 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d122      	bne.n	8005382 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b08      	cmp	r3, #8
 8005348:	d11b      	bne.n	8005382 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f06f 0208 	mvn.w	r2, #8
 8005352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2204      	movs	r2, #4
 8005358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f951 	bl	8005610 <HAL_TIM_IC_CaptureCallback>
 800536e:	e005      	b.n	800537c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f943 	bl	80055fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f954 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b10      	cmp	r3, #16
 800538e:	d122      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b10      	cmp	r3, #16
 800539c:	d11b      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f06f 0210 	mvn.w	r2, #16
 80053a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2208      	movs	r2, #8
 80053ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f927 	bl	8005610 <HAL_TIM_IC_CaptureCallback>
 80053c2:	e005      	b.n	80053d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f919 	bl	80055fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f92a 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10e      	bne.n	8005402 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0201 	mvn.w	r2, #1
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fb fc81 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d10e      	bne.n	800542e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d107      	bne.n	800542e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 facf 	bl	80059cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d10e      	bne.n	800545a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d107      	bne.n	800545a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8ef 	bl	8005638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b20      	cmp	r3, #32
 8005466:	d10e      	bne.n	8005486 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b20      	cmp	r3, #32
 8005474:	d107      	bne.n	8005486 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f06f 0220 	mvn.w	r2, #32
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fa99 	bl	80059b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005486:	bf00      	nop
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_TIM_ConfigClockSource+0x18>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e0a6      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x166>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054cc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d067      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x120>
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d80b      	bhi.n	80054fa <HAL_TIM_ConfigClockSource+0x6c>
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d073      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x140>
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d802      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x62>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d06f      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80054ee:	e078      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d06c      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x140>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d06a      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054f8:	e073      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054fa:	2b70      	cmp	r3, #112	; 0x70
 80054fc:	d00d      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x8c>
 80054fe:	2b70      	cmp	r3, #112	; 0x70
 8005500:	d804      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x7e>
 8005502:	2b50      	cmp	r3, #80	; 0x50
 8005504:	d033      	beq.n	800556e <HAL_TIM_ConfigClockSource+0xe0>
 8005506:	2b60      	cmp	r3, #96	; 0x60
 8005508:	d041      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800550a:	e06a      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005510:	d066      	beq.n	80055e0 <HAL_TIM_ConfigClockSource+0x152>
 8005512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005516:	d017      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005518:	e063      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6899      	ldr	r1, [r3, #8]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f000 f9a9 	bl	8005880 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800553c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	609a      	str	r2, [r3, #8]
      break;
 8005546:	e04c      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f000 f992 	bl	8005880 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800556a:	609a      	str	r2, [r3, #8]
      break;
 800556c:	e039      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	f000 f906 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2150      	movs	r1, #80	; 0x50
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f95f 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 800558c:	e029      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 f925 	bl	80057ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2160      	movs	r1, #96	; 0x60
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f94f 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 80055ac:	e019      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 f8e6 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2140      	movs	r1, #64	; 0x40
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f93f 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 80055cc:	e009      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f000 f936 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 80055de:	e000      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80055e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a40      	ldr	r2, [pc, #256]	; (8005760 <TIM_Base_SetConfig+0x114>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d013      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566a:	d00f      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3d      	ldr	r2, [pc, #244]	; (8005764 <TIM_Base_SetConfig+0x118>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00b      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3c      	ldr	r2, [pc, #240]	; (8005768 <TIM_Base_SetConfig+0x11c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d007      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3b      	ldr	r2, [pc, #236]	; (800576c <TIM_Base_SetConfig+0x120>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3a      	ldr	r2, [pc, #232]	; (8005770 <TIM_Base_SetConfig+0x124>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d108      	bne.n	800569e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2f      	ldr	r2, [pc, #188]	; (8005760 <TIM_Base_SetConfig+0x114>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d02b      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ac:	d027      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2c      	ldr	r2, [pc, #176]	; (8005764 <TIM_Base_SetConfig+0x118>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d023      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2b      	ldr	r2, [pc, #172]	; (8005768 <TIM_Base_SetConfig+0x11c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01f      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2a      	ldr	r2, [pc, #168]	; (800576c <TIM_Base_SetConfig+0x120>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01b      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a29      	ldr	r2, [pc, #164]	; (8005770 <TIM_Base_SetConfig+0x124>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d017      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a28      	ldr	r2, [pc, #160]	; (8005774 <TIM_Base_SetConfig+0x128>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a27      	ldr	r2, [pc, #156]	; (8005778 <TIM_Base_SetConfig+0x12c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00f      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a26      	ldr	r2, [pc, #152]	; (800577c <TIM_Base_SetConfig+0x130>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00b      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a25      	ldr	r2, [pc, #148]	; (8005780 <TIM_Base_SetConfig+0x134>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d007      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a24      	ldr	r2, [pc, #144]	; (8005784 <TIM_Base_SetConfig+0x138>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a23      	ldr	r2, [pc, #140]	; (8005788 <TIM_Base_SetConfig+0x13c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d108      	bne.n	8005710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <TIM_Base_SetConfig+0x114>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_Base_SetConfig+0xf8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0c      	ldr	r2, [pc, #48]	; (8005770 <TIM_Base_SetConfig+0x124>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d103      	bne.n	800574c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	615a      	str	r2, [r3, #20]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40010400 	.word	0x40010400
 8005774:	40014000 	.word	0x40014000
 8005778:	40014400 	.word	0x40014400
 800577c:	40014800 	.word	0x40014800
 8005780:	40001800 	.word	0x40001800
 8005784:	40001c00 	.word	0x40001c00
 8005788:	40002000 	.word	0x40002000

0800578c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 030a 	bic.w	r3, r3, #10
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b087      	sub	sp, #28
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0210 	bic.w	r2, r3, #16
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005826:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	f043 0307 	orr.w	r3, r3, #7
 800586c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	021a      	lsls	r2, r3, #8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	609a      	str	r2, [r3, #8]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e05a      	b.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005924:	d01d      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1a      	ldr	r2, [pc, #104]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10c      	bne.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	40010400 	.word	0x40010400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40001800 	.word	0x40001800

080059b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e03f      	b.n	8005a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fb fbf6 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f829 	bl	8005a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005abe:	f023 030c 	bic.w	r3, r3, #12
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aea:	f040 818b 	bne.w	8005e04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4ac1      	ldr	r2, [pc, #772]	; (8005df8 <UART_SetConfig+0x37c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d005      	beq.n	8005b04 <UART_SetConfig+0x88>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4abf      	ldr	r2, [pc, #764]	; (8005dfc <UART_SetConfig+0x380>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	f040 80bd 	bne.w	8005c7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b04:	f7ff f8d0 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
 8005b08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	461d      	mov	r5, r3
 8005b0e:	f04f 0600 	mov.w	r6, #0
 8005b12:	46a8      	mov	r8, r5
 8005b14:	46b1      	mov	r9, r6
 8005b16:	eb18 0308 	adds.w	r3, r8, r8
 8005b1a:	eb49 0409 	adc.w	r4, r9, r9
 8005b1e:	4698      	mov	r8, r3
 8005b20:	46a1      	mov	r9, r4
 8005b22:	eb18 0805 	adds.w	r8, r8, r5
 8005b26:	eb49 0906 	adc.w	r9, r9, r6
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b3e:	4688      	mov	r8, r1
 8005b40:	4691      	mov	r9, r2
 8005b42:	eb18 0005 	adds.w	r0, r8, r5
 8005b46:	eb49 0106 	adc.w	r1, r9, r6
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	461d      	mov	r5, r3
 8005b50:	f04f 0600 	mov.w	r6, #0
 8005b54:	196b      	adds	r3, r5, r5
 8005b56:	eb46 0406 	adc.w	r4, r6, r6
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	f7fa fb47 	bl	80001f0 <__aeabi_uldivmod>
 8005b62:	4603      	mov	r3, r0
 8005b64:	460c      	mov	r4, r1
 8005b66:	461a      	mov	r2, r3
 8005b68:	4ba5      	ldr	r3, [pc, #660]	; (8005e00 <UART_SetConfig+0x384>)
 8005b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	461d      	mov	r5, r3
 8005b78:	f04f 0600 	mov.w	r6, #0
 8005b7c:	46a9      	mov	r9, r5
 8005b7e:	46b2      	mov	sl, r6
 8005b80:	eb19 0309 	adds.w	r3, r9, r9
 8005b84:	eb4a 040a 	adc.w	r4, sl, sl
 8005b88:	4699      	mov	r9, r3
 8005b8a:	46a2      	mov	sl, r4
 8005b8c:	eb19 0905 	adds.w	r9, r9, r5
 8005b90:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b94:	f04f 0100 	mov.w	r1, #0
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ba0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ba4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ba8:	4689      	mov	r9, r1
 8005baa:	4692      	mov	sl, r2
 8005bac:	eb19 0005 	adds.w	r0, r9, r5
 8005bb0:	eb4a 0106 	adc.w	r1, sl, r6
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	461d      	mov	r5, r3
 8005bba:	f04f 0600 	mov.w	r6, #0
 8005bbe:	196b      	adds	r3, r5, r5
 8005bc0:	eb46 0406 	adc.w	r4, r6, r6
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	f7fa fb12 	bl	80001f0 <__aeabi_uldivmod>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4b8b      	ldr	r3, [pc, #556]	; (8005e00 <UART_SetConfig+0x384>)
 8005bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	2164      	movs	r1, #100	; 0x64
 8005bdc:	fb01 f303 	mul.w	r3, r1, r3
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	3332      	adds	r3, #50	; 0x32
 8005be6:	4a86      	ldr	r2, [pc, #536]	; (8005e00 <UART_SetConfig+0x384>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bf4:	4498      	add	r8, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	461d      	mov	r5, r3
 8005bfa:	f04f 0600 	mov.w	r6, #0
 8005bfe:	46a9      	mov	r9, r5
 8005c00:	46b2      	mov	sl, r6
 8005c02:	eb19 0309 	adds.w	r3, r9, r9
 8005c06:	eb4a 040a 	adc.w	r4, sl, sl
 8005c0a:	4699      	mov	r9, r3
 8005c0c:	46a2      	mov	sl, r4
 8005c0e:	eb19 0905 	adds.w	r9, r9, r5
 8005c12:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c16:	f04f 0100 	mov.w	r1, #0
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c2a:	4689      	mov	r9, r1
 8005c2c:	4692      	mov	sl, r2
 8005c2e:	eb19 0005 	adds.w	r0, r9, r5
 8005c32:	eb4a 0106 	adc.w	r1, sl, r6
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	461d      	mov	r5, r3
 8005c3c:	f04f 0600 	mov.w	r6, #0
 8005c40:	196b      	adds	r3, r5, r5
 8005c42:	eb46 0406 	adc.w	r4, r6, r6
 8005c46:	461a      	mov	r2, r3
 8005c48:	4623      	mov	r3, r4
 8005c4a:	f7fa fad1 	bl	80001f0 <__aeabi_uldivmod>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	461a      	mov	r2, r3
 8005c54:	4b6a      	ldr	r3, [pc, #424]	; (8005e00 <UART_SetConfig+0x384>)
 8005c56:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	2164      	movs	r1, #100	; 0x64
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	3332      	adds	r3, #50	; 0x32
 8005c68:	4a65      	ldr	r2, [pc, #404]	; (8005e00 <UART_SetConfig+0x384>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	f003 0207 	and.w	r2, r3, #7
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4442      	add	r2, r8
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	e26f      	b.n	800615e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c7e:	f7fe ffff 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8005c82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	461d      	mov	r5, r3
 8005c88:	f04f 0600 	mov.w	r6, #0
 8005c8c:	46a8      	mov	r8, r5
 8005c8e:	46b1      	mov	r9, r6
 8005c90:	eb18 0308 	adds.w	r3, r8, r8
 8005c94:	eb49 0409 	adc.w	r4, r9, r9
 8005c98:	4698      	mov	r8, r3
 8005c9a:	46a1      	mov	r9, r4
 8005c9c:	eb18 0805 	adds.w	r8, r8, r5
 8005ca0:	eb49 0906 	adc.w	r9, r9, r6
 8005ca4:	f04f 0100 	mov.w	r1, #0
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cb8:	4688      	mov	r8, r1
 8005cba:	4691      	mov	r9, r2
 8005cbc:	eb18 0005 	adds.w	r0, r8, r5
 8005cc0:	eb49 0106 	adc.w	r1, r9, r6
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	461d      	mov	r5, r3
 8005cca:	f04f 0600 	mov.w	r6, #0
 8005cce:	196b      	adds	r3, r5, r5
 8005cd0:	eb46 0406 	adc.w	r4, r6, r6
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	f7fa fa8a 	bl	80001f0 <__aeabi_uldivmod>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4b47      	ldr	r3, [pc, #284]	; (8005e00 <UART_SetConfig+0x384>)
 8005ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	f04f 0600 	mov.w	r6, #0
 8005cf6:	46a9      	mov	r9, r5
 8005cf8:	46b2      	mov	sl, r6
 8005cfa:	eb19 0309 	adds.w	r3, r9, r9
 8005cfe:	eb4a 040a 	adc.w	r4, sl, sl
 8005d02:	4699      	mov	r9, r3
 8005d04:	46a2      	mov	sl, r4
 8005d06:	eb19 0905 	adds.w	r9, r9, r5
 8005d0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d0e:	f04f 0100 	mov.w	r1, #0
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d22:	4689      	mov	r9, r1
 8005d24:	4692      	mov	sl, r2
 8005d26:	eb19 0005 	adds.w	r0, r9, r5
 8005d2a:	eb4a 0106 	adc.w	r1, sl, r6
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	461d      	mov	r5, r3
 8005d34:	f04f 0600 	mov.w	r6, #0
 8005d38:	196b      	adds	r3, r5, r5
 8005d3a:	eb46 0406 	adc.w	r4, r6, r6
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4623      	mov	r3, r4
 8005d42:	f7fa fa55 	bl	80001f0 <__aeabi_uldivmod>
 8005d46:	4603      	mov	r3, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <UART_SetConfig+0x384>)
 8005d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	2164      	movs	r1, #100	; 0x64
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	3332      	adds	r3, #50	; 0x32
 8005d60:	4a27      	ldr	r2, [pc, #156]	; (8005e00 <UART_SetConfig+0x384>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d6e:	4498      	add	r8, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	461d      	mov	r5, r3
 8005d74:	f04f 0600 	mov.w	r6, #0
 8005d78:	46a9      	mov	r9, r5
 8005d7a:	46b2      	mov	sl, r6
 8005d7c:	eb19 0309 	adds.w	r3, r9, r9
 8005d80:	eb4a 040a 	adc.w	r4, sl, sl
 8005d84:	4699      	mov	r9, r3
 8005d86:	46a2      	mov	sl, r4
 8005d88:	eb19 0905 	adds.w	r9, r9, r5
 8005d8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d90:	f04f 0100 	mov.w	r1, #0
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005da0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005da4:	4689      	mov	r9, r1
 8005da6:	4692      	mov	sl, r2
 8005da8:	eb19 0005 	adds.w	r0, r9, r5
 8005dac:	eb4a 0106 	adc.w	r1, sl, r6
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	461d      	mov	r5, r3
 8005db6:	f04f 0600 	mov.w	r6, #0
 8005dba:	196b      	adds	r3, r5, r5
 8005dbc:	eb46 0406 	adc.w	r4, r6, r6
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	f7fa fa14 	bl	80001f0 <__aeabi_uldivmod>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <UART_SetConfig+0x384>)
 8005dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	2164      	movs	r1, #100	; 0x64
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	3332      	adds	r3, #50	; 0x32
 8005de2:	4a07      	ldr	r2, [pc, #28]	; (8005e00 <UART_SetConfig+0x384>)
 8005de4:	fba2 2303 	umull	r2, r3, r2, r3
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	f003 0207 	and.w	r2, r3, #7
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4442      	add	r2, r8
 8005df4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005df6:	e1b2      	b.n	800615e <UART_SetConfig+0x6e2>
 8005df8:	40011000 	.word	0x40011000
 8005dfc:	40011400 	.word	0x40011400
 8005e00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4ad7      	ldr	r2, [pc, #860]	; (8006168 <UART_SetConfig+0x6ec>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d005      	beq.n	8005e1a <UART_SetConfig+0x39e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4ad6      	ldr	r2, [pc, #856]	; (800616c <UART_SetConfig+0x6f0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	f040 80d1 	bne.w	8005fbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e1a:	f7fe ff45 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
 8005e1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	469a      	mov	sl, r3
 8005e24:	f04f 0b00 	mov.w	fp, #0
 8005e28:	46d0      	mov	r8, sl
 8005e2a:	46d9      	mov	r9, fp
 8005e2c:	eb18 0308 	adds.w	r3, r8, r8
 8005e30:	eb49 0409 	adc.w	r4, r9, r9
 8005e34:	4698      	mov	r8, r3
 8005e36:	46a1      	mov	r9, r4
 8005e38:	eb18 080a 	adds.w	r8, r8, sl
 8005e3c:	eb49 090b 	adc.w	r9, r9, fp
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e54:	4688      	mov	r8, r1
 8005e56:	4691      	mov	r9, r2
 8005e58:	eb1a 0508 	adds.w	r5, sl, r8
 8005e5c:	eb4b 0609 	adc.w	r6, fp, r9
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4619      	mov	r1, r3
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	f04f 0400 	mov.w	r4, #0
 8005e72:	0094      	lsls	r4, r2, #2
 8005e74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e78:	008b      	lsls	r3, r1, #2
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	4631      	mov	r1, r6
 8005e82:	f7fa f9b5 	bl	80001f0 <__aeabi_uldivmod>
 8005e86:	4603      	mov	r3, r0
 8005e88:	460c      	mov	r4, r1
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4bb8      	ldr	r3, [pc, #736]	; (8006170 <UART_SetConfig+0x6f4>)
 8005e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	469b      	mov	fp, r3
 8005e9c:	f04f 0c00 	mov.w	ip, #0
 8005ea0:	46d9      	mov	r9, fp
 8005ea2:	46e2      	mov	sl, ip
 8005ea4:	eb19 0309 	adds.w	r3, r9, r9
 8005ea8:	eb4a 040a 	adc.w	r4, sl, sl
 8005eac:	4699      	mov	r9, r3
 8005eae:	46a2      	mov	sl, r4
 8005eb0:	eb19 090b 	adds.w	r9, r9, fp
 8005eb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ec8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ecc:	4689      	mov	r9, r1
 8005ece:	4692      	mov	sl, r2
 8005ed0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ed4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	4619      	mov	r1, r3
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	f04f 0400 	mov.w	r4, #0
 8005eea:	0094      	lsls	r4, r2, #2
 8005eec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ef0:	008b      	lsls	r3, r1, #2
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	4631      	mov	r1, r6
 8005efa:	f7fa f979 	bl	80001f0 <__aeabi_uldivmod>
 8005efe:	4603      	mov	r3, r0
 8005f00:	460c      	mov	r4, r1
 8005f02:	461a      	mov	r2, r3
 8005f04:	4b9a      	ldr	r3, [pc, #616]	; (8006170 <UART_SetConfig+0x6f4>)
 8005f06:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	2164      	movs	r1, #100	; 0x64
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	3332      	adds	r3, #50	; 0x32
 8005f18:	4a95      	ldr	r2, [pc, #596]	; (8006170 <UART_SetConfig+0x6f4>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f24:	4498      	add	r8, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	469b      	mov	fp, r3
 8005f2a:	f04f 0c00 	mov.w	ip, #0
 8005f2e:	46d9      	mov	r9, fp
 8005f30:	46e2      	mov	sl, ip
 8005f32:	eb19 0309 	adds.w	r3, r9, r9
 8005f36:	eb4a 040a 	adc.w	r4, sl, sl
 8005f3a:	4699      	mov	r9, r3
 8005f3c:	46a2      	mov	sl, r4
 8005f3e:	eb19 090b 	adds.w	r9, r9, fp
 8005f42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	f04f 0200 	mov.w	r2, #0
 8005f4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	4692      	mov	sl, r2
 8005f5e:	eb1b 0509 	adds.w	r5, fp, r9
 8005f62:	eb4c 060a 	adc.w	r6, ip, sl
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f04f 0400 	mov.w	r4, #0
 8005f78:	0094      	lsls	r4, r2, #2
 8005f7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f7e:	008b      	lsls	r3, r1, #2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4623      	mov	r3, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	4631      	mov	r1, r6
 8005f88:	f7fa f932 	bl	80001f0 <__aeabi_uldivmod>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	461a      	mov	r2, r3
 8005f92:	4b77      	ldr	r3, [pc, #476]	; (8006170 <UART_SetConfig+0x6f4>)
 8005f94:	fba3 1302 	umull	r1, r3, r3, r2
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	2164      	movs	r1, #100	; 0x64
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	3332      	adds	r3, #50	; 0x32
 8005fa6:	4a72      	ldr	r2, [pc, #456]	; (8006170 <UART_SetConfig+0x6f4>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	f003 020f 	and.w	r2, r3, #15
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4442      	add	r2, r8
 8005fb8:	609a      	str	r2, [r3, #8]
 8005fba:	e0d0      	b.n	800615e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fe fe60 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8005fc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	469a      	mov	sl, r3
 8005fc6:	f04f 0b00 	mov.w	fp, #0
 8005fca:	46d0      	mov	r8, sl
 8005fcc:	46d9      	mov	r9, fp
 8005fce:	eb18 0308 	adds.w	r3, r8, r8
 8005fd2:	eb49 0409 	adc.w	r4, r9, r9
 8005fd6:	4698      	mov	r8, r3
 8005fd8:	46a1      	mov	r9, r4
 8005fda:	eb18 080a 	adds.w	r8, r8, sl
 8005fde:	eb49 090b 	adc.w	r9, r9, fp
 8005fe2:	f04f 0100 	mov.w	r1, #0
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ff2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ff6:	4688      	mov	r8, r1
 8005ff8:	4691      	mov	r9, r2
 8005ffa:	eb1a 0508 	adds.w	r5, sl, r8
 8005ffe:	eb4b 0609 	adc.w	r6, fp, r9
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4619      	mov	r1, r3
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	f04f 0400 	mov.w	r4, #0
 8006014:	0094      	lsls	r4, r2, #2
 8006016:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800601a:	008b      	lsls	r3, r1, #2
 800601c:	461a      	mov	r2, r3
 800601e:	4623      	mov	r3, r4
 8006020:	4628      	mov	r0, r5
 8006022:	4631      	mov	r1, r6
 8006024:	f7fa f8e4 	bl	80001f0 <__aeabi_uldivmod>
 8006028:	4603      	mov	r3, r0
 800602a:	460c      	mov	r4, r1
 800602c:	461a      	mov	r2, r3
 800602e:	4b50      	ldr	r3, [pc, #320]	; (8006170 <UART_SetConfig+0x6f4>)
 8006030:	fba3 2302 	umull	r2, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	469b      	mov	fp, r3
 800603e:	f04f 0c00 	mov.w	ip, #0
 8006042:	46d9      	mov	r9, fp
 8006044:	46e2      	mov	sl, ip
 8006046:	eb19 0309 	adds.w	r3, r9, r9
 800604a:	eb4a 040a 	adc.w	r4, sl, sl
 800604e:	4699      	mov	r9, r3
 8006050:	46a2      	mov	sl, r4
 8006052:	eb19 090b 	adds.w	r9, r9, fp
 8006056:	eb4a 0a0c 	adc.w	sl, sl, ip
 800605a:	f04f 0100 	mov.w	r1, #0
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006066:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800606a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800606e:	4689      	mov	r9, r1
 8006070:	4692      	mov	sl, r2
 8006072:	eb1b 0509 	adds.w	r5, fp, r9
 8006076:	eb4c 060a 	adc.w	r6, ip, sl
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	4619      	mov	r1, r3
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	f04f 0400 	mov.w	r4, #0
 800608c:	0094      	lsls	r4, r2, #2
 800608e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006092:	008b      	lsls	r3, r1, #2
 8006094:	461a      	mov	r2, r3
 8006096:	4623      	mov	r3, r4
 8006098:	4628      	mov	r0, r5
 800609a:	4631      	mov	r1, r6
 800609c:	f7fa f8a8 	bl	80001f0 <__aeabi_uldivmod>
 80060a0:	4603      	mov	r3, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b32      	ldr	r3, [pc, #200]	; (8006170 <UART_SetConfig+0x6f4>)
 80060a8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	2164      	movs	r1, #100	; 0x64
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	3332      	adds	r3, #50	; 0x32
 80060ba:	4a2d      	ldr	r2, [pc, #180]	; (8006170 <UART_SetConfig+0x6f4>)
 80060bc:	fba2 2303 	umull	r2, r3, r2, r3
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c6:	4498      	add	r8, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	469b      	mov	fp, r3
 80060cc:	f04f 0c00 	mov.w	ip, #0
 80060d0:	46d9      	mov	r9, fp
 80060d2:	46e2      	mov	sl, ip
 80060d4:	eb19 0309 	adds.w	r3, r9, r9
 80060d8:	eb4a 040a 	adc.w	r4, sl, sl
 80060dc:	4699      	mov	r9, r3
 80060de:	46a2      	mov	sl, r4
 80060e0:	eb19 090b 	adds.w	r9, r9, fp
 80060e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060e8:	f04f 0100 	mov.w	r1, #0
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060fc:	4689      	mov	r9, r1
 80060fe:	4692      	mov	sl, r2
 8006100:	eb1b 0509 	adds.w	r5, fp, r9
 8006104:	eb4c 060a 	adc.w	r6, ip, sl
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4619      	mov	r1, r3
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	f04f 0400 	mov.w	r4, #0
 800611a:	0094      	lsls	r4, r2, #2
 800611c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006120:	008b      	lsls	r3, r1, #2
 8006122:	461a      	mov	r2, r3
 8006124:	4623      	mov	r3, r4
 8006126:	4628      	mov	r0, r5
 8006128:	4631      	mov	r1, r6
 800612a:	f7fa f861 	bl	80001f0 <__aeabi_uldivmod>
 800612e:	4603      	mov	r3, r0
 8006130:	460c      	mov	r4, r1
 8006132:	461a      	mov	r2, r3
 8006134:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <UART_SetConfig+0x6f4>)
 8006136:	fba3 1302 	umull	r1, r3, r3, r2
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	2164      	movs	r1, #100	; 0x64
 800613e:	fb01 f303 	mul.w	r3, r1, r3
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	3332      	adds	r3, #50	; 0x32
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <UART_SetConfig+0x6f4>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	f003 020f 	and.w	r2, r3, #15
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4442      	add	r2, r8
 800615a:	609a      	str	r2, [r3, #8]
}
 800615c:	e7ff      	b.n	800615e <UART_SetConfig+0x6e2>
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	40011000 	.word	0x40011000
 800616c:	40011400 	.word	0x40011400
 8006170:	51eb851f 	.word	0x51eb851f

08006174 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d029      	beq.n	80061e2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800619a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800619e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061a8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80061ae:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80061b4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80061ba:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80061c0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80061c6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80061cc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80061d2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e034      	b.n	800624c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061ee:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80061fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006212:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006216:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006220:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006226:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800622c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006232:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006238:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	4313      	orrs	r3, r2
 800623e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800625a:	b480      	push	{r7}
 800625c:	b087      	sub	sp, #28
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d02e      	beq.n	80062d2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006280:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	3b01      	subs	r3, #1
 800628e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006290:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	3b01      	subs	r3, #1
 8006298:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800629a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80062a4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80062ae:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80062b8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	3b01      	subs	r3, #1
 80062c0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80062c2:	4313      	orrs	r3, r2
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	e03b      	b.n	800634a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062e2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80062f4:	4313      	orrs	r3, r2
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006308:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	3b01      	subs	r3, #1
 8006316:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006318:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	3b01      	subs	r3, #1
 8006320:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006322:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	3b01      	subs	r3, #1
 800632a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800632c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	3b01      	subs	r3, #1
 8006334:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006336:	4313      	orrs	r3, r2
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006358:	b084      	sub	sp, #16
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	f107 001c 	add.w	r0, r7, #28
 8006366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2b01      	cmp	r3, #1
 800636e:	d122      	bne.n	80063b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639a:	2b01      	cmp	r3, #1
 800639c:	d105      	bne.n	80063aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f94a 	bl	8006644 <USB_CoreReset>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	e01a      	b.n	80063ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f93e 	bl	8006644 <USB_CoreReset>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
 80063de:	e005      	b.n	80063ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d10b      	bne.n	800640a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f043 0206 	orr.w	r2, r3, #6
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006416:	b004      	add	sp, #16
 8006418:	4770      	bx	lr

0800641a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f043 0201 	orr.w	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f023 0201 	bic.w	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d106      	bne.n	800648a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60da      	str	r2, [r3, #12]
 8006488:	e00b      	b.n	80064a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d106      	bne.n	800649e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	e001      	b.n	80064a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e003      	b.n	80064aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064a2:	2032      	movs	r0, #50	; 0x32
 80064a4:	f7fb f8d6 	bl	8001654 <HAL_Delay>

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	019b      	lsls	r3, r3, #6
 80064c6:	f043 0220 	orr.w	r2, r3, #32
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a09      	ldr	r2, [pc, #36]	; (80064fc <USB_FlushTxFifo+0x48>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e006      	b.n	80064ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d0f0      	beq.n	80064ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	00030d40 	.word	0x00030d40

08006500 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2210      	movs	r2, #16
 8006510:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a09      	ldr	r2, [pc, #36]	; (8006540 <USB_FlushRxFifo+0x40>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e006      	b.n	8006532 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	2b10      	cmp	r3, #16
 800652e:	d0f0      	beq.n	8006512 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	00030d40 	.word	0x00030d40

08006544 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006544:	b480      	push	{r7}
 8006546:	b089      	sub	sp, #36	; 0x24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4611      	mov	r1, r2
 8006550:	461a      	mov	r2, r3
 8006552:	460b      	mov	r3, r1
 8006554:	71fb      	strb	r3, [r7, #7]
 8006556:	4613      	mov	r3, r2
 8006558:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006562:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d11a      	bne.n	80065a0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800656a:	88bb      	ldrh	r3, [r7, #4]
 800656c:	3303      	adds	r3, #3
 800656e:	089b      	lsrs	r3, r3, #2
 8006570:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006572:	2300      	movs	r3, #0
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	e00f      	b.n	8006598 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	031a      	lsls	r2, r3, #12
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4413      	add	r3, r2
 8006580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006584:	461a      	mov	r2, r3
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	3304      	adds	r3, #4
 8006590:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	3301      	adds	r3, #1
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	429a      	cmp	r2, r3
 800659e:	d3eb      	bcc.n	8006578 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3724      	adds	r7, #36	; 0x24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b089      	sub	sp, #36	; 0x24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	3303      	adds	r3, #3
 80065c8:	089b      	lsrs	r3, r3, #2
 80065ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	e00b      	b.n	80065ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3304      	adds	r3, #4
 80065e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	3301      	adds	r3, #1
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d3ef      	bcc.n	80065d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80065f2:	69fb      	ldr	r3, [r7, #28]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3724      	adds	r7, #36	; 0x24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4013      	ands	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006618:	68fb      	ldr	r3, [r7, #12]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f003 0301 	and.w	r3, r3, #1
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
	...

08006644 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3301      	adds	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <USB_CoreReset+0x64>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d901      	bls.n	8006662 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e01b      	b.n	800669a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	daf2      	bge.n	8006650 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f043 0201 	orr.w	r2, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3301      	adds	r3, #1
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <USB_CoreReset+0x64>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d901      	bls.n	800668c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e006      	b.n	800669a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b01      	cmp	r3, #1
 8006696:	d0f0      	beq.n	800667a <USB_CoreReset+0x36>

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	00030d40 	.word	0x00030d40

080066ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066ac:	b084      	sub	sp, #16
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	f107 001c 	add.w	r0, r7, #28
 80066ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d018      	beq.n	8006730 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	2b01      	cmp	r3, #1
 8006702:	d10a      	bne.n	800671a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006712:	f043 0304 	orr.w	r3, r3, #4
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e014      	b.n	8006744 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e009      	b.n	8006744 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800673e:	f023 0304 	bic.w	r3, r3, #4
 8006742:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006744:	2110      	movs	r1, #16
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff feb4 	bl	80064b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fed7 	bl	8006500 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	e015      	b.n	8006784 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4413      	add	r3, r2
 8006760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006764:	461a      	mov	r2, r3
 8006766:	f04f 33ff 	mov.w	r3, #4294967295
 800676a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	461a      	mov	r2, r3
 800677a:	2300      	movs	r3, #0
 800677c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3301      	adds	r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	429a      	cmp	r2, r3
 800678a:	d3e5      	bcc.n	8006758 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800678c:	2101      	movs	r1, #1
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f8ac 	bl	80068ec <USB_DriveVbus>

  HAL_Delay(200U);
 8006794:	20c8      	movs	r0, #200	; 0xc8
 8006796:	f7fa ff5d 	bl	8001654 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295
 80067a6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a14      	ldr	r2, [pc, #80]	; (8006810 <USB_HostInit+0x164>)
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a13      	ldr	r2, [pc, #76]	; (8006814 <USB_HostInit+0x168>)
 80067c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80067ca:	e009      	b.n	80067e0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2280      	movs	r2, #128	; 0x80
 80067d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a10      	ldr	r2, [pc, #64]	; (8006818 <USB_HostInit+0x16c>)
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <USB_HostInit+0x170>)
 80067dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f043 0210 	orr.w	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699a      	ldr	r2, [r3, #24]
 80067f6:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <USB_HostInit+0x174>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800680a:	b004      	add	sp, #16
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	01000200 	.word	0x01000200
 8006814:	00e00300 	.word	0x00e00300
 8006818:	00600080 	.word	0x00600080
 800681c:	004000e0 	.word	0x004000e0
 8006820:	a3200008 	.word	0xa3200008

08006824 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800685c:	4313      	orrs	r3, r2
 800685e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d107      	bne.n	8006876 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686c:	461a      	mov	r2, r3
 800686e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006872:	6053      	str	r3, [r2, #4]
 8006874:	e009      	b.n	800688a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d106      	bne.n	800688a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006882:	461a      	mov	r2, r3
 8006884:	f241 7370 	movw	r3, #6000	; 0x1770
 8006888:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80068c8:	2064      	movs	r0, #100	; 0x64
 80068ca:	f7fa fec3 	bl	8001654 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068da:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80068dc:	200a      	movs	r0, #10
 80068de:	f7fa feb9 	bl	8001654 <HAL_Delay>

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006910:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <USB_DriveVbus+0x44>
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d106      	bne.n	8006930 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800692a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800692e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693a:	d109      	bne.n	8006950 <USB_DriveVbus+0x64>
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800694a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800694e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	0c5b      	lsrs	r3, r3, #17
 800697c:	f003 0303 	and.w	r3, r3, #3
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	b29b      	uxth	r3, r3
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	4603      	mov	r3, r0
 80069c0:	70fb      	strb	r3, [r7, #3]
 80069c2:	460b      	mov	r3, r1
 80069c4:	70bb      	strb	r3, [r7, #2]
 80069c6:	4613      	mov	r3, r2
 80069c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	461a      	mov	r2, r3
 80069e0:	f04f 33ff 	mov.w	r3, #4294967295
 80069e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80069e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d87e      	bhi.n	8006aec <USB_HC_Init+0x13c>
 80069ee:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <USB_HC_Init+0x44>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a05 	.word	0x08006a05
 80069f8:	08006aaf 	.word	0x08006aaf
 80069fc:	08006a05 	.word	0x08006a05
 8006a00:	08006a71 	.word	0x08006a71
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	461a      	mov	r2, r3
 8006a12:	f240 439d 	movw	r3, #1181	; 0x49d
 8006a16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006a18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	da10      	bge.n	8006a42 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a3e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006a40:	e057      	b.n	8006af2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d051      	beq.n	8006af2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a6c:	60d3      	str	r3, [r2, #12]
      break;
 8006a6e:	e040      	b.n	8006af2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006a82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da34      	bge.n	8006af6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aaa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006aac:	e023      	b.n	8006af6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	461a      	mov	r2, r3
 8006abc:	f240 2325 	movw	r3, #549	; 0x225
 8006ac0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ac2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da17      	bge.n	8006afa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	78fa      	ldrb	r2, [r7, #3]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ae4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ae8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006aea:	e006      	b.n	8006afa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
      break;
 8006af0:	e004      	b.n	8006afc <USB_HC_Init+0x14c>
      break;
 8006af2:	bf00      	nop
 8006af4:	e002      	b.n	8006afc <USB_HC_Init+0x14c>
      break;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <USB_HC_Init+0x14c>
      break;
 8006afa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b16:	4313      	orrs	r3, r2
 8006b18:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006b26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	da03      	bge.n	8006b36 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	e001      	b.n	8006b3a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d103      	bne.n	8006b4a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	e001      	b.n	8006b4e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b4e:	787b      	ldrb	r3, [r7, #1]
 8006b50:	059b      	lsls	r3, r3, #22
 8006b52:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b56:	78bb      	ldrb	r3, [r7, #2]
 8006b58:	02db      	lsls	r3, r3, #11
 8006b5a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b5e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b64:	049b      	lsls	r3, r3, #18
 8006b66:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b6a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	0159      	lsls	r1, r3, #5
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	440b      	add	r3, r1
 8006b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b84:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b8a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d10f      	bne.n	8006bb4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	78fa      	ldrb	r2, [r7, #3]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bb2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop

08006bc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	; 0x30
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d028      	beq.n	8006c40 <USB_HC_StartXfer+0x7c>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	791b      	ldrb	r3, [r3, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d124      	bne.n	8006c40 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10b      	bne.n	8006c14 <USB_HC_StartXfer+0x50>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	795b      	ldrb	r3, [r3, #5]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d107      	bne.n	8006c14 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fa30 	bl	8007070 <USB_DoPing>
      return HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e114      	b.n	8006e3e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d112      	bne.n	8006c40 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	6a3a      	ldr	r2, [r7, #32]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c34:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006c38:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d018      	beq.n	8006c7a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	8912      	ldrh	r2, [r2, #8]
 8006c50:	4413      	add	r3, r2
 8006c52:	3b01      	subs	r3, #1
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	8912      	ldrh	r2, [r2, #8]
 8006c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c5c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006c5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c60:	8b7b      	ldrh	r3, [r7, #26]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d90b      	bls.n	8006c7e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006c66:	8b7b      	ldrh	r3, [r7, #26]
 8006c68:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006c6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	8912      	ldrh	r2, [r2, #8]
 8006c70:	fb02 f203 	mul.w	r2, r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	611a      	str	r2, [r3, #16]
 8006c78:	e001      	b.n	8006c7e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	78db      	ldrb	r3, [r3, #3]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d006      	beq.n	8006c94 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006c86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	8912      	ldrh	r2, [r2, #8]
 8006c8c:	fb02 f203 	mul.w	r2, r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c9e:	04d9      	lsls	r1, r3, #19
 8006ca0:	4b69      	ldr	r3, [pc, #420]	; (8006e48 <USB_HC_StartXfer+0x284>)
 8006ca2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ca4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	7a9b      	ldrb	r3, [r3, #10]
 8006caa:	075b      	lsls	r3, r3, #29
 8006cac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cb0:	69f9      	ldr	r1, [r7, #28]
 8006cb2:	0148      	lsls	r0, r1, #5
 8006cb4:	6a39      	ldr	r1, [r7, #32]
 8006cb6:	4401      	add	r1, r0
 8006cb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	68d9      	ldr	r1, [r3, #12]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bf0c      	ite	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	2300      	movne	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	6a3a      	ldr	r2, [r7, #32]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	7e7b      	ldrb	r3, [r7, #25]
 8006d22:	075b      	lsls	r3, r3, #29
 8006d24:	69f9      	ldr	r1, [r7, #28]
 8006d26:	0148      	lsls	r0, r1, #5
 8006d28:	6a39      	ldr	r1, [r7, #32]
 8006d2a:	4401      	add	r1, r0
 8006d2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a42      	ldr	r2, [pc, #264]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d44:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d46:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d4e:	4a3f      	ldr	r2, [pc, #252]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d50:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	78db      	ldrb	r3, [r3, #3]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d006      	beq.n	8006d68 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d5a:	4b3c      	ldr	r3, [pc, #240]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d62:	4a3a      	ldr	r2, [pc, #232]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e005      	b.n	8006d74 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d68:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d70:	4a36      	ldr	r2, [pc, #216]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d72:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d74:	4b35      	ldr	r3, [pc, #212]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d7c:	4a33      	ldr	r2, [pc, #204]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d7e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4b2f      	ldr	r3, [pc, #188]	; (8006e4c <USB_HC_StartXfer+0x288>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e04f      	b.n	8006e3e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	78db      	ldrb	r3, [r3, #3]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d14a      	bne.n	8006e3c <USB_HC_StartXfer+0x278>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d046      	beq.n	8006e3c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	79db      	ldrb	r3, [r3, #7]
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d830      	bhi.n	8006e18 <USB_HC_StartXfer+0x254>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <USB_HC_StartXfer+0x1f8>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006dcd 	.word	0x08006dcd
 8006dc0:	08006df1 	.word	0x08006df1
 8006dc4:	08006dcd 	.word	0x08006dcd
 8006dc8:	08006df1 	.word	0x08006df1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	3303      	adds	r3, #3
 8006dd2:	089b      	lsrs	r3, r3, #2
 8006dd4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006dd6:	8afa      	ldrh	r2, [r7, #22]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d91c      	bls.n	8006e1c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dee:	e015      	b.n	8006e1c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	3303      	adds	r3, #3
 8006df6:	089b      	lsrs	r3, r3, #2
 8006df8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006dfa:	8afa      	ldrh	r2, [r7, #22]
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d90a      	bls.n	8006e20 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e16:	e003      	b.n	8006e20 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006e18:	bf00      	nop
 8006e1a:	e002      	b.n	8006e22 <USB_HC_StartXfer+0x25e>
        break;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <USB_HC_StartXfer+0x25e>
        break;
 8006e20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68d9      	ldr	r1, [r3, #12]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	785a      	ldrb	r2, [r3, #1]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	b298      	uxth	r0, r3
 8006e30:	2300      	movs	r3, #0
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	4603      	mov	r3, r0
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff fb84 	bl	8006544 <USB_WritePacket>
  }

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3728      	adds	r7, #40	; 0x28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	1ff80000 	.word	0x1ff80000
 8006e4c:	20000310 	.word	0x20000310

08006e50 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	b29b      	uxth	r3, r3
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b087      	sub	sp, #28
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	0c9b      	lsrs	r3, r3, #18
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <USB_HC_Halt+0x3a>
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d16c      	bne.n	8006f86 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d143      	bne.n	8006f60 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f36:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f44:	d81d      	bhi.n	8006f82 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f5c:	d0ec      	beq.n	8006f38 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f5e:	e080      	b.n	8007062 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f7e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f80:	e06f      	b.n	8007062 <USB_HC_Halt+0x1f0>
          break;
 8006f82:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f84:	e06d      	b.n	8007062 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	0151      	lsls	r1, r2, #5
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	440a      	add	r2, r1
 8006f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fa4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d143      	bne.n	800703e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fd4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	0151      	lsls	r1, r2, #5
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	440a      	add	r2, r1
 8006fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ff4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	440a      	add	r2, r1
 800700c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007010:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007014:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	3301      	adds	r3, #1
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007022:	d81d      	bhi.n	8007060 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4413      	add	r3, r2
 800702c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800703a:	d0ec      	beq.n	8007016 <USB_HC_Halt+0x1a4>
 800703c:	e011      	b.n	8007062 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	440a      	add	r2, r1
 8007054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e000      	b.n	8007062 <USB_HC_Halt+0x1f0>
          break;
 8007060:	bf00      	nop
    }
  }

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007084:	2301      	movs	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	04da      	lsls	r2, r3, #19
 800708c:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <USB_DoPing+0x74>)
 800708e:	4013      	ands	r3, r2
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	440a      	add	r2, r1
 8007098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800709c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ce:	461a      	mov	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	1ff80000 	.word	0x1ff80000

080070e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff f99f 	bl	800643c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80070fe:	2110      	movs	r1, #16
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff f9d7 	bl	80064b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff f9fa 	bl	8006500 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800710c:	2300      	movs	r3, #0
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	e01f      	b.n	8007152 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007128:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007130:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007138:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007146:	461a      	mov	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	3301      	adds	r3, #1
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b0f      	cmp	r3, #15
 8007156:	d9dc      	bls.n	8007112 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007158:	2300      	movs	r3, #0
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	e034      	b.n	80071c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007174:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800717c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007184:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007192:	461a      	mov	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3301      	adds	r3, #1
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071a4:	d80c      	bhi.n	80071c0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071bc:	d0ec      	beq.n	8007198 <USB_StopHost+0xb0>
 80071be:	e000      	b.n	80071c2 <USB_StopHost+0xda>
        break;
 80071c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	3301      	adds	r3, #1
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b0f      	cmp	r3, #15
 80071cc:	d9c7      	bls.n	800715e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071d4:	461a      	mov	r2, r3
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f04f 32ff 	mov.w	r2, #4294967295
 80071e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff f918 	bl	800641a <USB_EnableGlobalInt>

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b089      	sub	sp, #36	; 0x24
 80071f8:	af04      	add	r7, sp, #16
 80071fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80071fc:	2301      	movs	r3, #1
 80071fe:	2202      	movs	r2, #2
 8007200:	2102      	movs	r1, #2
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fcba 	bl	8007b7c <USBH_FindInterface>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	2bff      	cmp	r3, #255	; 0xff
 8007210:	d002      	beq.n	8007218 <USBH_CDC_InterfaceInit+0x24>
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d901      	bls.n	800721c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007218:	2302      	movs	r3, #2
 800721a:	e13d      	b.n	8007498 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc8f 	bl	8007b44 <USBH_SelectInterface>
 8007226:	4603      	mov	r3, r0
 8007228:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007230:	2302      	movs	r3, #2
 8007232:	e131      	b.n	8007498 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800723a:	2050      	movs	r0, #80	; 0x50
 800723c:	f004 fec4 	bl	800bfc8 <malloc>
 8007240:	4603      	mov	r3, r0
 8007242:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007254:	2302      	movs	r3, #2
 8007256:	e11f      	b.n	8007498 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007258:	2250      	movs	r2, #80	; 0x50
 800725a:	2100      	movs	r1, #0
 800725c:	68b8      	ldr	r0, [r7, #8]
 800725e:	f004 fece 	bl	800bffe <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	211a      	movs	r1, #26
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	4413      	add	r3, r2
 800726e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	b25b      	sxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	da15      	bge.n	80072a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	211a      	movs	r1, #26
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	4413      	add	r3, r2
 8007286:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	211a      	movs	r1, #26
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072a0:	881a      	ldrh	r2, [r3, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f002 f894 	bl	80093da <USBH_AllocPipe>
 80072b2:	4603      	mov	r3, r0
 80072b4:	461a      	mov	r2, r3
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	7819      	ldrb	r1, [r3, #0]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	7858      	ldrb	r0, [r3, #1]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	8952      	ldrh	r2, [r2, #10]
 80072d2:	9202      	str	r2, [sp, #8]
 80072d4:	2203      	movs	r2, #3
 80072d6:	9201      	str	r2, [sp, #4]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	4623      	mov	r3, r4
 80072dc:	4602      	mov	r2, r0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f002 f84c 	bl	800937c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2200      	movs	r2, #0
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f004 fdbb 	bl	800be68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80072f2:	2300      	movs	r3, #0
 80072f4:	2200      	movs	r2, #0
 80072f6:	210a      	movs	r1, #10
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fc3f 	bl	8007b7c <USBH_FindInterface>
 80072fe:	4603      	mov	r3, r0
 8007300:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	2bff      	cmp	r3, #255	; 0xff
 8007306:	d002      	beq.n	800730e <USBH_CDC_InterfaceInit+0x11a>
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d901      	bls.n	8007312 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800730e:	2302      	movs	r3, #2
 8007310:	e0c2      	b.n	8007498 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	211a      	movs	r1, #26
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	b25b      	sxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	da16      	bge.n	8007358 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	211a      	movs	r1, #26
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	4413      	add	r3, r2
 8007336:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	211a      	movs	r1, #26
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007350:	881a      	ldrh	r2, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	835a      	strh	r2, [r3, #26]
 8007356:	e015      	b.n	8007384 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	211a      	movs	r1, #26
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	211a      	movs	r1, #26
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800737e:	881a      	ldrh	r2, [r3, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	211a      	movs	r1, #26
 800738a:	fb01 f303 	mul.w	r3, r1, r3
 800738e:	4413      	add	r3, r2
 8007390:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	b25b      	sxtb	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	da16      	bge.n	80073ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	211a      	movs	r1, #26
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	211a      	movs	r1, #26
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	4413      	add	r3, r2
 80073be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073c2:	881a      	ldrh	r2, [r3, #0]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	835a      	strh	r2, [r3, #26]
 80073c8:	e015      	b.n	80073f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	211a      	movs	r1, #26
 80073d0:	fb01 f303 	mul.w	r3, r1, r3
 80073d4:	4413      	add	r3, r2
 80073d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	211a      	movs	r1, #26
 80073e6:	fb01 f303 	mul.w	r3, r1, r3
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073f0:	881a      	ldrh	r2, [r3, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	7b9b      	ldrb	r3, [r3, #14]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 ffec 	bl	80093da <USBH_AllocPipe>
 8007402:	4603      	mov	r3, r0
 8007404:	461a      	mov	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	7bdb      	ldrb	r3, [r3, #15]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 ffe2 	bl	80093da <USBH_AllocPipe>
 8007416:	4603      	mov	r3, r0
 8007418:	461a      	mov	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	7b59      	ldrb	r1, [r3, #13]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	7b98      	ldrb	r0, [r3, #14]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	8b12      	ldrh	r2, [r2, #24]
 8007436:	9202      	str	r2, [sp, #8]
 8007438:	2202      	movs	r2, #2
 800743a:	9201      	str	r2, [sp, #4]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	4623      	mov	r3, r4
 8007440:	4602      	mov	r2, r0
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 ff9a 	bl	800937c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	7b19      	ldrb	r1, [r3, #12]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	7bd8      	ldrb	r0, [r3, #15]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	8b52      	ldrh	r2, [r2, #26]
 8007460:	9202      	str	r2, [sp, #8]
 8007462:	2202      	movs	r2, #2
 8007464:	9201      	str	r2, [sp, #4]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	4623      	mov	r3, r4
 800746a:	4602      	mov	r2, r0
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 ff85 	bl	800937c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	7b5b      	ldrb	r3, [r3, #13]
 800747e:	2200      	movs	r2, #0
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f004 fcf0 	bl	800be68 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	7b1b      	ldrb	r3, [r3, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f004 fce9 	bl	800be68 <USBH_LL_SetToggle>

  return USBH_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	bd90      	pop	{r4, r7, pc}

080074a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 ff7a 	bl	80093ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 ffa5 	bl	800941c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	7b1b      	ldrb	r3, [r3, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00e      	beq.n	80074fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	7b1b      	ldrb	r3, [r3, #12]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 ff67 	bl	80093ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	7b1b      	ldrb	r3, [r3, #12]
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 ff92 	bl	800941c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	7b5b      	ldrb	r3, [r3, #13]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00e      	beq.n	8007524 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	7b5b      	ldrb	r3, [r3, #13]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 ff54 	bl	80093ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	7b5b      	ldrb	r3, [r3, #13]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 ff7f 	bl	800941c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4618      	mov	r0, r3
 800753a:	f004 fd4d 	bl	800bfd8 <free>
    phost->pActiveClass->pData = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007544:	2200      	movs	r2, #0
 8007546:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3340      	adds	r3, #64	; 0x40
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f8b1 	bl	80076d2 <GetLineCoding>
 8007570:	4603      	mov	r3, r0
 8007572:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d105      	bne.n	8007586 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007580:	2102      	movs	r1, #2
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007586:	7afb      	ldrb	r3, [r7, #11]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d877      	bhi.n	80076a4 <USBH_CDC_Process+0x114>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <USBH_CDC_Process+0x2c>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075d1 	.word	0x080075d1
 80075c0:	080075d7 	.word	0x080075d7
 80075c4:	08007607 	.word	0x08007607
 80075c8:	0800767b 	.word	0x0800767b
 80075cc:	08007689 	.word	0x08007689
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]
      break;
 80075d4:	e06d      	b.n	80076b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f897 	bl	8007710 <SetLineCoding>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075f4:	e058      	b.n	80076a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d055      	beq.n	80076a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2204      	movs	r2, #4
 8007600:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007604:	e050      	b.n	80076a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	3340      	adds	r3, #64	; 0x40
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f860 	bl	80076d2 <GetLineCoding>
 8007612:	4603      	mov	r3, r0
 8007614:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d126      	bne.n	800766a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762e:	791b      	ldrb	r3, [r3, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d13b      	bne.n	80076ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007640:	429a      	cmp	r2, r3
 8007642:	d133      	bne.n	80076ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007650:	429a      	cmp	r2, r3
 8007652:	d12b      	bne.n	80076ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800765e:	429a      	cmp	r2, r3
 8007660:	d124      	bne.n	80076ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f984 	bl	8007970 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007668:	e020      	b.n	80076ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d01d      	beq.n	80076ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2204      	movs	r2, #4
 8007674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007678:	e018      	b.n	80076ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f867 	bl	800774e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f8f8 	bl	8007876 <CDC_ProcessReception>
      break;
 8007686:	e014      	b.n	80076b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007688:	2100      	movs	r1, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 f953 	bl	8008936 <USBH_ClrFeature>
 8007690:	4603      	mov	r3, r0
 8007692:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80076a2:	e005      	b.n	80076b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80076a4:	bf00      	nop
 80076a6:	e004      	b.n	80076b2 <USBH_CDC_Process+0x122>
      break;
 80076a8:	bf00      	nop
 80076aa:	e002      	b.n	80076b2 <USBH_CDC_Process+0x122>
      break;
 80076ac:	bf00      	nop
 80076ae:	e000      	b.n	80076b2 <USBH_CDC_Process+0x122>
      break;
 80076b0:	bf00      	nop

  }

  return status;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	22a1      	movs	r2, #161	; 0xa1
 80076e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2221      	movs	r2, #33	; 0x21
 80076e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2207      	movs	r2, #7
 80076f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2207      	movs	r2, #7
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 faf8 	bl	8008cf6 <USBH_CtlReq>
 8007706:	4603      	mov	r3, r0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2221      	movs	r2, #33	; 0x21
 800771e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2207      	movs	r2, #7
 8007736:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2207      	movs	r2, #7
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 fad9 	bl	8008cf6 <USBH_CtlReq>
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af02      	add	r7, sp, #8
 8007754:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007760:	2300      	movs	r3, #0
 8007762:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800776a:	2b01      	cmp	r3, #1
 800776c:	d002      	beq.n	8007774 <CDC_ProcessTransmission+0x26>
 800776e:	2b02      	cmp	r3, #2
 8007770:	d025      	beq.n	80077be <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007772:	e07c      	b.n	800786e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	8b12      	ldrh	r2, [r2, #24]
 800777c:	4293      	cmp	r3, r2
 800777e:	d90c      	bls.n	800779a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	69d9      	ldr	r1, [r3, #28]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8b1a      	ldrh	r2, [r3, #24]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	7b58      	ldrb	r0, [r3, #13]
 800778c:	2301      	movs	r3, #1
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4603      	mov	r3, r0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fdaf 	bl	80092f6 <USBH_BulkSendData>
 8007798:	e00c      	b.n	80077b4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	7b58      	ldrb	r0, [r3, #13]
 80077a8:	2301      	movs	r3, #1
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	4603      	mov	r3, r0
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 fda1 	bl	80092f6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80077bc:	e057      	b.n	800786e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	7b5b      	ldrb	r3, [r3, #13]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f004 fb25 	bl	800be14 <USBH_LL_GetURBState>
 80077ca:	4603      	mov	r3, r0
 80077cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d136      	bne.n	8007842 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	8b12      	ldrh	r2, [r2, #24]
 80077dc:	4293      	cmp	r3, r2
 80077de:	d90e      	bls.n	80077fe <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	8b12      	ldrh	r2, [r2, #24]
 80077e8:	1a9a      	subs	r2, r3, r2
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	8b12      	ldrh	r2, [r2, #24]
 80077f6:	441a      	add	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	61da      	str	r2, [r3, #28]
 80077fc:	e002      	b.n	8007804 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007814:	e006      	b.n	8007824 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f892 	bl	8007948 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2204      	movs	r2, #4
 8007828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007838:	2200      	movs	r2, #0
 800783a:	4619      	mov	r1, r3
 800783c:	f001 feea 	bl	8009614 <osMessagePut>
      break;
 8007840:	e014      	b.n	800786c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8007842:	7afb      	ldrb	r3, [r7, #11]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d111      	bne.n	800786c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2204      	movs	r2, #4
 8007854:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007864:	2200      	movs	r2, #0
 8007866:	4619      	mov	r1, r3
 8007868:	f001 fed4 	bl	8009614 <osMessagePut>
      break;
 800786c:	bf00      	nop
  }
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007888:	2300      	movs	r3, #0
 800788a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007892:	2b03      	cmp	r3, #3
 8007894:	d002      	beq.n	800789c <CDC_ProcessReception+0x26>
 8007896:	2b04      	cmp	r3, #4
 8007898:	d00e      	beq.n	80078b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800789a:	e051      	b.n	8007940 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	6a19      	ldr	r1, [r3, #32]
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	8b5a      	ldrh	r2, [r3, #26]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	7b1b      	ldrb	r3, [r3, #12]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fd49 	bl	8009340 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2204      	movs	r2, #4
 80078b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80078b6:	e043      	b.n	8007940 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	7b1b      	ldrb	r3, [r3, #12]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f004 faa8 	bl	800be14 <USBH_LL_GetURBState>
 80078c4:	4603      	mov	r3, r0
 80078c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80078c8:	7cfb      	ldrb	r3, [r7, #19]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d137      	bne.n	800793e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	7b1b      	ldrb	r3, [r3, #12]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f004 fa0b 	bl	800bcf0 <USBH_LL_GetLastXferSize>
 80078da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d016      	beq.n	8007914 <CDC_ProcessReception+0x9e>
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	8b5b      	ldrh	r3, [r3, #26]
 80078ea:	461a      	mov	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d910      	bls.n	8007914 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	6a1a      	ldr	r2, [r3, #32]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	441a      	add	r2, r3
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2203      	movs	r2, #3
 800790e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007912:	e006      	b.n	8007922 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f81d 	bl	800795c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2204      	movs	r2, #4
 8007926:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007936:	2200      	movs	r2, #0
 8007938:	4619      	mov	r1, r3
 800793a:	f001 fe6b 	bl	8009614 <osMessagePut>
      break;
 800793e:	bf00      	nop
  }
}
 8007940:	bf00      	nop
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007984:	b5b0      	push	{r4, r5, r7, lr}
 8007986:	b090      	sub	sp, #64	; 0x40
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007998:	2302      	movs	r3, #2
 800799a:	e04d      	b.n	8007a38 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	79fa      	ldrb	r2, [r7, #7]
 80079a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f847 	bl	8007a48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80079e8:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <USBH_Init+0xbc>)
 80079ea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80079ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80079f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 fde1 	bl	80095c2 <osMessageCreate>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007a08:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <USBH_Init+0xc0>)
 8007a0a:	f107 0414 	add.w	r4, r7, #20
 8007a0e:	461d      	mov	r5, r3
 8007a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007a18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007a1c:	f107 0314 	add.w	r3, r7, #20
 8007a20:	68f9      	ldr	r1, [r7, #12]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 fd6d 	bl	8009502 <osThreadCreate>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f004 f8a1 	bl	800bb78 <USBH_LL_Init>

  return USBH_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3740      	adds	r7, #64	; 0x40
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8007a40:	0800c1c8 	.word	0x0800c1c8
 8007a44:	0800c1e4 	.word	0x0800c1e4

08007a48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	e009      	b.n	8007a6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	33e0      	adds	r3, #224	; 0xe0
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b0e      	cmp	r3, #14
 8007a72:	d9f2      	bls.n	8007a5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e009      	b.n	8007a8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a94:	d3f1      	bcc.n	8007a7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2240      	movs	r2, #64	; 0x40
 8007aba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d016      	beq.n	8007b32 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10e      	bne.n	8007b2c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b14:	1c59      	adds	r1, r3, #1
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	33de      	adds	r3, #222	; 0xde
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
 8007b2a:	e004      	b.n	8007b36 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	73fb      	strb	r3, [r7, #15]
 8007b30:	e001      	b.n	8007b36 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b32:	2302      	movs	r3, #2
 8007b34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d204      	bcs.n	8007b6a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007b68:	e001      	b.n	8007b6e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	70fb      	strb	r3, [r7, #3]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	70bb      	strb	r3, [r7, #2]
 8007b92:	4613      	mov	r3, r2
 8007b94:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ba4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ba6:	e025      	b.n	8007bf4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	221a      	movs	r2, #26
 8007bac:	fb02 f303 	mul.w	r3, r2, r3
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d002      	beq.n	8007bca <USBH_FindInterface+0x4e>
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	2bff      	cmp	r3, #255	; 0xff
 8007bc8:	d111      	bne.n	8007bee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bce:	78ba      	ldrb	r2, [r7, #2]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d002      	beq.n	8007bda <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bd4:	78bb      	ldrb	r3, [r7, #2]
 8007bd6:	2bff      	cmp	r3, #255	; 0xff
 8007bd8:	d109      	bne.n	8007bee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bde:	787a      	ldrb	r2, [r7, #1]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d002      	beq.n	8007bea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007be4:	787b      	ldrb	r3, [r7, #1]
 8007be6:	2bff      	cmp	r3, #255	; 0xff
 8007be8:	d101      	bne.n	8007bee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	e006      	b.n	8007bfc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d9d6      	bls.n	8007ba8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007bfa:	23ff      	movs	r3, #255	; 0xff
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f003 fff7 	bl	800bc04 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007c16:	2101      	movs	r1, #1
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f004 f90e 	bl	800be3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d102      	bne.n	8007c4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b0b      	cmp	r3, #11
 8007c52:	f200 823c 	bhi.w	80080ce <USBH_Process+0x4a6>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <USBH_Process+0x34>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c8d 	.word	0x08007c8d
 8007c60:	08007cdb 	.word	0x08007cdb
 8007c64:	08007d5f 	.word	0x08007d5f
 8007c68:	0800804d 	.word	0x0800804d
 8007c6c:	080080cf 	.word	0x080080cf
 8007c70:	08007e1f 	.word	0x08007e1f
 8007c74:	08007fd7 	.word	0x08007fd7
 8007c78:	08007e71 	.word	0x08007e71
 8007c7c:	08007ead 	.word	0x08007ead
 8007c80:	08007ee7 	.word	0x08007ee7
 8007c84:	08007f2f 	.word	0x08007f2f
 8007c88:	08008035 	.word	0x08008035
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 821c 	beq.w	80080d2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ca0:	20c8      	movs	r0, #200	; 0xc8
 8007ca2:	f004 f914 	bl	800bece <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f004 f807 	bl	800bcba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	f001 fc9e 	bl	8009614 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007cd8:	e1fb      	b.n	80080d2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d107      	bne.n	8007cf4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	e025      	b.n	8007d40 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cfe:	d914      	bls.n	8007d2a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d06:	3301      	adds	r3, #1
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d903      	bls.n	8007d22 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	220d      	movs	r2, #13
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	e00e      	b.n	8007d40 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
 8007d28:	e00a      	b.n	8007d40 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d30:	f103 020a 	add.w	r2, r3, #10
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007d3a:	200a      	movs	r0, #10
 8007d3c:	f004 f8c7 	bl	800bece <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d54:	2200      	movs	r2, #0
 8007d56:	4619      	mov	r1, r3
 8007d58:	f001 fc5c 	bl	8009614 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d5c:	e1c0      	b.n	80080e0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d6e:	2104      	movs	r1, #4
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d74:	2064      	movs	r0, #100	; 0x64
 8007d76:	f004 f8aa 	bl	800bece <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f003 ff78 	bl	800bc70 <USBH_LL_GetSpeed>
 8007d80:	4603      	mov	r3, r0
 8007d82:	461a      	mov	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2205      	movs	r2, #5
 8007d8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d90:	2100      	movs	r1, #0
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fb21 	bl	80093da <USBH_AllocPipe>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007da0:	2180      	movs	r1, #128	; 0x80
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fb19 	bl	80093da <USBH_AllocPipe>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7919      	ldrb	r1, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007dc4:	b292      	uxth	r2, r2
 8007dc6:	9202      	str	r2, [sp, #8]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	9201      	str	r2, [sp, #4]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2280      	movs	r2, #128	; 0x80
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fad2 	bl	800937c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	7959      	ldrb	r1, [r3, #5]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dec:	b292      	uxth	r2, r2
 8007dee:	9202      	str	r2, [sp, #8]
 8007df0:	2200      	movs	r2, #0
 8007df2:	9201      	str	r2, [sp, #4]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	4603      	mov	r3, r0
 8007df8:	2200      	movs	r2, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 fabe 	bl	800937c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e14:	2200      	movs	r2, #0
 8007e16:	4619      	mov	r1, r3
 8007e18:	f001 fbfc 	bl	8009614 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e1c:	e160      	b.n	80080e0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f964 	bl	80080ec <USBH_HandleEnum>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f040 8152 	bne.w	80080d6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d103      	bne.n	8007e4c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2208      	movs	r2, #8
 8007e48:	701a      	strb	r2, [r3, #0]
 8007e4a:	e002      	b.n	8007e52 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2207      	movs	r2, #7
 8007e50:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2205      	movs	r2, #5
 8007e56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e66:	2200      	movs	r2, #0
 8007e68:	4619      	mov	r1, r3
 8007e6a:	f001 fbd3 	bl	8009614 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e6e:	e132      	b.n	80080d6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 812f 	beq.w	80080da <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e82:	2101      	movs	r1, #1
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2205      	movs	r2, #5
 8007e92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	f001 fbb5 	bl	8009614 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007eaa:	e116      	b.n	80080da <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fcf6 	bl	80088a8 <USBH_SetCfg>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d102      	bne.n	8007ec8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2209      	movs	r2, #9
 8007ec6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007edc:	2200      	movs	r2, #0
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f001 fb98 	bl	8009614 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ee4:	e0fc      	b.n	80080e0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fcf9 	bl	80088ee <USBH_SetFeature>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	220a      	movs	r2, #10
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	e002      	b.n	8007f10 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f24:	2200      	movs	r2, #0
 8007f26:	4619      	mov	r1, r3
 8007f28:	f001 fb74 	bl	8009614 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f2c:	e0d8      	b.n	80080e0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d03f      	beq.n	8007fb8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
 8007f44:	e016      	b.n	8007f74 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f46:	7bfa      	ldrb	r2, [r7, #15]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	32de      	adds	r2, #222	; 0xde
 8007f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f50:	791a      	ldrb	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d108      	bne.n	8007f6e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f5c:	7bfa      	ldrb	r2, [r7, #15]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	32de      	adds	r2, #222	; 0xde
 8007f62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007f6c:	e005      	b.n	8007f7a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	3301      	adds	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0e5      	beq.n	8007f46 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d016      	beq.n	8007fb2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2206      	movs	r2, #6
 8007f9a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fa2:	2103      	movs	r1, #3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
 8007fa8:	e006      	b.n	8007fb8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	220d      	movs	r2, #13
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e002      	b.n	8007fb8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	220d      	movs	r2, #13
 8007fb6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2205      	movs	r2, #5
 8007fbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4619      	mov	r1, r3
 8007fd0:	f001 fb20 	bl	8009614 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fd4:	e084      	b.n	80080e0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d017      	beq.n	8008010 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d103      	bne.n	8008000 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	220b      	movs	r2, #11
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	e00a      	b.n	8008016 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d106      	bne.n	8008016 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	220d      	movs	r2, #13
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	e002      	b.n	8008016 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	220d      	movs	r2, #13
 8008014:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2205      	movs	r2, #5
 800801a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800802a:	2200      	movs	r2, #0
 800802c:	4619      	mov	r1, r3
 800802e:	f001 faf1 	bl	8009614 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008032:	e055      	b.n	80080e0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d04f      	beq.n	80080de <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
      }
      break;
 800804a:	e048      	b.n	80080de <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fcf7 	bl	8007a48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008060:	2b00      	cmp	r3, #0
 8008062:	d009      	beq.n	8008078 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008088:	2105      	movs	r1, #5
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b01      	cmp	r3, #1
 8008098:	d107      	bne.n	80080aa <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff fdb0 	bl	8007c08 <USBH_Start>
 80080a8:	e002      	b.n	80080b0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f003 fdaa 	bl	800bc04 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080c4:	2200      	movs	r2, #0
 80080c6:	4619      	mov	r1, r3
 80080c8:	f001 faa4 	bl	8009614 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080cc:	e008      	b.n	80080e0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80080ce:	bf00      	nop
 80080d0:	e006      	b.n	80080e0 <USBH_Process+0x4b8>
      break;
 80080d2:	bf00      	nop
 80080d4:	e004      	b.n	80080e0 <USBH_Process+0x4b8>
      break;
 80080d6:	bf00      	nop
 80080d8:	e002      	b.n	80080e0 <USBH_Process+0x4b8>
    break;
 80080da:	bf00      	nop
 80080dc:	e000      	b.n	80080e0 <USBH_Process+0x4b8>
      break;
 80080de:	bf00      	nop
  }
  return USBH_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop

080080ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af04      	add	r7, sp, #16
 80080f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	2b07      	cmp	r3, #7
 8008102:	f200 8208 	bhi.w	8008516 <USBH_HandleEnum+0x42a>
 8008106:	a201      	add	r2, pc, #4	; (adr r2, 800810c <USBH_HandleEnum+0x20>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	0800812d 	.word	0x0800812d
 8008110:	080081eb 	.word	0x080081eb
 8008114:	08008255 	.word	0x08008255
 8008118:	080082e3 	.word	0x080082e3
 800811c:	0800834d 	.word	0x0800834d
 8008120:	080083bd 	.word	0x080083bd
 8008124:	08008459 	.word	0x08008459
 8008128:	080084d7 	.word	0x080084d7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800812c:	2108      	movs	r1, #8
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 faea 	bl	8008708 <USBH_Get_DevDesc>
 8008134:	4603      	mov	r3, r0
 8008136:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d130      	bne.n	80081a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7919      	ldrb	r1, [r3, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008162:	b292      	uxth	r2, r2
 8008164:	9202      	str	r2, [sp, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	9201      	str	r2, [sp, #4]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	4603      	mov	r3, r0
 800816e:	2280      	movs	r2, #128	; 0x80
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 f903 	bl	800937c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7959      	ldrb	r1, [r3, #5]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800818a:	b292      	uxth	r2, r2
 800818c:	9202      	str	r2, [sp, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	9201      	str	r2, [sp, #4]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	4603      	mov	r3, r0
 8008196:	2200      	movs	r2, #0
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f8ef 	bl	800937c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800819e:	e1bc      	b.n	800851a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	f040 81b9 	bne.w	800851a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081ae:	3301      	adds	r3, #1
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d903      	bls.n	80081ca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	220d      	movs	r2, #13
 80081c6:	701a      	strb	r2, [r3, #0]
      break;
 80081c8:	e1a7      	b.n	800851a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	795b      	ldrb	r3, [r3, #5]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 f923 	bl	800941c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	791b      	ldrb	r3, [r3, #4]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 f91d 	bl	800941c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
      break;
 80081e8:	e197      	b.n	800851a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081ea:	2112      	movs	r1, #18
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fa8b 	bl	8008708 <USBH_Get_DevDesc>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008202:	e18c      	b.n	800851e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	2b03      	cmp	r3, #3
 8008208:	f040 8189 	bne.w	800851e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008212:	3301      	adds	r3, #1
 8008214:	b2da      	uxtb	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008222:	2b03      	cmp	r3, #3
 8008224:	d903      	bls.n	800822e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	220d      	movs	r2, #13
 800822a:	701a      	strb	r2, [r3, #0]
      break;
 800822c:	e177      	b.n	800851e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	795b      	ldrb	r3, [r3, #5]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 f8f1 	bl	800941c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	791b      	ldrb	r3, [r3, #4]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 f8eb 	bl	800941c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]
      break;
 8008252:	e164      	b.n	800851e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008254:	2101      	movs	r1, #1
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fb02 	bl	8008860 <USBH_SetAddress>
 800825c:	4603      	mov	r3, r0
 800825e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d132      	bne.n	80082cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008266:	2002      	movs	r0, #2
 8008268:	f003 fe31 	bl	800bece <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2203      	movs	r2, #3
 8008278:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7919      	ldrb	r1, [r3, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800828e:	b292      	uxth	r2, r2
 8008290:	9202      	str	r2, [sp, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	4603      	mov	r3, r0
 800829a:	2280      	movs	r2, #128	; 0x80
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 f86d 	bl	800937c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7959      	ldrb	r1, [r3, #5]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082b6:	b292      	uxth	r2, r2
 80082b8:	9202      	str	r2, [sp, #8]
 80082ba:	2200      	movs	r2, #0
 80082bc:	9201      	str	r2, [sp, #4]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	4603      	mov	r3, r0
 80082c2:	2200      	movs	r2, #0
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 f859 	bl	800937c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082ca:	e12a      	b.n	8008522 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	f040 8127 	bne.w	8008522 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	220d      	movs	r2, #13
 80082d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	705a      	strb	r2, [r3, #1]
      break;
 80082e0:	e11f      	b.n	8008522 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082e2:	2109      	movs	r1, #9
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fa37 	bl	8008758 <USBH_Get_CfgDesc>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d103      	bne.n	80082fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2204      	movs	r2, #4
 80082f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082fa:	e114      	b.n	8008526 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b03      	cmp	r3, #3
 8008300:	f040 8111 	bne.w	8008526 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800830a:	3301      	adds	r3, #1
 800830c:	b2da      	uxtb	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800831a:	2b03      	cmp	r3, #3
 800831c:	d903      	bls.n	8008326 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	220d      	movs	r2, #13
 8008322:	701a      	strb	r2, [r3, #0]
      break;
 8008324:	e0ff      	b.n	8008526 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	795b      	ldrb	r3, [r3, #5]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 f875 	bl	800941c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	791b      	ldrb	r3, [r3, #4]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 f86f 	bl	800941c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	701a      	strb	r2, [r3, #0]
      break;
 800834a:	e0ec      	b.n	8008526 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f9ff 	bl	8008758 <USBH_Get_CfgDesc>
 800835a:	4603      	mov	r3, r0
 800835c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d103      	bne.n	800836c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2205      	movs	r2, #5
 8008368:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800836a:	e0de      	b.n	800852a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b03      	cmp	r3, #3
 8008370:	f040 80db 	bne.w	800852a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800837a:	3301      	adds	r3, #1
 800837c:	b2da      	uxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800838a:	2b03      	cmp	r3, #3
 800838c:	d903      	bls.n	8008396 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	220d      	movs	r2, #13
 8008392:	701a      	strb	r2, [r3, #0]
      break;
 8008394:	e0c9      	b.n	800852a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	795b      	ldrb	r3, [r3, #5]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 f83d 	bl	800941c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	791b      	ldrb	r3, [r3, #4]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 f837 	bl	800941c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]
      break;
 80083ba:	e0b6      	b.n	800852a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d036      	beq.n	8008434 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083d2:	23ff      	movs	r3, #255	; 0xff
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f9e3 	bl	80087a0 <USBH_Get_StringDesc>
 80083da:	4603      	mov	r3, r0
 80083dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d111      	bne.n	8008408 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2206      	movs	r2, #6
 80083e8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2205      	movs	r2, #5
 80083ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083fe:	2200      	movs	r2, #0
 8008400:	4619      	mov	r1, r3
 8008402:	f001 f907 	bl	8009614 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008406:	e092      	b.n	800852e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b03      	cmp	r3, #3
 800840c:	f040 808f 	bne.w	800852e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2206      	movs	r2, #6
 8008414:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2205      	movs	r2, #5
 800841a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800842a:	2200      	movs	r2, #0
 800842c:	4619      	mov	r1, r3
 800842e:	f001 f8f1 	bl	8009614 <osMessagePut>
      break;
 8008432:	e07c      	b.n	800852e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2206      	movs	r2, #6
 8008438:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2205      	movs	r2, #5
 800843e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800844e:	2200      	movs	r2, #0
 8008450:	4619      	mov	r1, r3
 8008452:	f001 f8df 	bl	8009614 <osMessagePut>
      break;
 8008456:	e06a      	b.n	800852e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800845e:	2b00      	cmp	r3, #0
 8008460:	d027      	beq.n	80084b2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800846e:	23ff      	movs	r3, #255	; 0xff
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f995 	bl	80087a0 <USBH_Get_StringDesc>
 8008476:	4603      	mov	r3, r0
 8008478:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2207      	movs	r2, #7
 8008484:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008486:	e054      	b.n	8008532 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b03      	cmp	r3, #3
 800848c:	d151      	bne.n	8008532 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2207      	movs	r2, #7
 8008492:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2205      	movs	r2, #5
 8008498:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084a8:	2200      	movs	r2, #0
 80084aa:	4619      	mov	r1, r3
 80084ac:	f001 f8b2 	bl	8009614 <osMessagePut>
      break;
 80084b0:	e03f      	b.n	8008532 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2207      	movs	r2, #7
 80084b6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2205      	movs	r2, #5
 80084bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084cc:	2200      	movs	r2, #0
 80084ce:	4619      	mov	r1, r3
 80084d0:	f001 f8a0 	bl	8009614 <osMessagePut>
      break;
 80084d4:	e02d      	b.n	8008532 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d017      	beq.n	8008510 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084ec:	23ff      	movs	r3, #255	; 0xff
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f956 	bl	80087a0 <USBH_Get_StringDesc>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008502:	e018      	b.n	8008536 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b03      	cmp	r3, #3
 8008508:	d115      	bne.n	8008536 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
      break;
 800850e:	e012      	b.n	8008536 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
      break;
 8008514:	e00f      	b.n	8008536 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008516:	bf00      	nop
 8008518:	e00e      	b.n	8008538 <USBH_HandleEnum+0x44c>
      break;
 800851a:	bf00      	nop
 800851c:	e00c      	b.n	8008538 <USBH_HandleEnum+0x44c>
      break;
 800851e:	bf00      	nop
 8008520:	e00a      	b.n	8008538 <USBH_HandleEnum+0x44c>
      break;
 8008522:	bf00      	nop
 8008524:	e008      	b.n	8008538 <USBH_HandleEnum+0x44c>
      break;
 8008526:	bf00      	nop
 8008528:	e006      	b.n	8008538 <USBH_HandleEnum+0x44c>
      break;
 800852a:	bf00      	nop
 800852c:	e004      	b.n	8008538 <USBH_HandleEnum+0x44c>
      break;
 800852e:	bf00      	nop
 8008530:	e002      	b.n	8008538 <USBH_HandleEnum+0x44c>
      break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <USBH_HandleEnum+0x44c>
      break;
 8008536:	bf00      	nop
  }
  return Status;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop

08008544 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f804 	bl	8008586 <USBH_HandleSof>
}
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b0b      	cmp	r3, #11
 8008596:	d10a      	bne.n	80085ae <USBH_HandleSof+0x28>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
  }
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085da:	2200      	movs	r2, #0
 80085dc:	4619      	mov	r1, r3
 80085de:	f001 f819 	bl	8009614 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80085e2:	bf00      	nop
}
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80085fa:	bf00      	nop
}
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800863a:	2200      	movs	r2, #0
 800863c:	4619      	mov	r1, r3
 800863e:	f000 ffe9 	bl	8009614 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f003 fae4 	bl	800bc3a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	791b      	ldrb	r3, [r3, #4]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fecf 	bl	800941c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	795b      	ldrb	r3, [r3, #5]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fec9 	bl	800941c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800869e:	2200      	movs	r2, #0
 80086a0:	4619      	mov	r1, r3
 80086a2:	f000 ffb7 	bl	8009614 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80086be:	f107 030c 	add.w	r3, r7, #12
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 ffe4 	bl	8009694 <osMessageGet>
    if (event.status == osEventMessage)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b10      	cmp	r3, #16
 80086d0:	d1f2      	bne.n	80086b8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff faa8 	bl	8007c28 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80086d8:	e7ee      	b.n	80086b8 <USBH_Process_OS+0x8>

080086da <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086f6:	2200      	movs	r2, #0
 80086f8:	4619      	mov	r1, r3
 80086fa:	f000 ff8b 	bl	8009614 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af02      	add	r7, sp, #8
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	b29b      	uxth	r3, r3
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008726:	2100      	movs	r1, #0
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f864 	bl	80087f6 <USBH_GetDescriptor>
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	b292      	uxth	r2, r2
 8008748:	4619      	mov	r1, r3
 800874a:	f000 f918 	bl	800897e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af02      	add	r7, sp, #8
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	331c      	adds	r3, #28
 8008768:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800876a:	887b      	ldrh	r3, [r7, #2]
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008774:	2100      	movs	r1, #0
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f83d 	bl	80087f6 <USBH_GetDescriptor>
 800877c:	4603      	mov	r3, r0
 800877e:	72fb      	strb	r3, [r7, #11]
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d107      	bne.n	8008796 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800878c:	887a      	ldrh	r2, [r7, #2]
 800878e:	68f9      	ldr	r1, [r7, #12]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f964 	bl	8008a5e <USBH_ParseCfgDesc>
  }

  return status;
 8008796:	7afb      	ldrb	r3, [r7, #11]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b088      	sub	sp, #32
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	607a      	str	r2, [r7, #4]
 80087aa:	461a      	mov	r2, r3
 80087ac:	460b      	mov	r3, r1
 80087ae:	72fb      	strb	r3, [r7, #11]
 80087b0:	4613      	mov	r3, r2
 80087b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80087bc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80087c4:	893b      	ldrh	r3, [r7, #8]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	460b      	mov	r3, r1
 80087ca:	2100      	movs	r1, #0
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f812 	bl	80087f6 <USBH_GetDescriptor>
 80087d2:	4603      	mov	r3, r0
 80087d4:	75fb      	strb	r3, [r7, #23]
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d107      	bne.n	80087ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087e2:	893a      	ldrh	r2, [r7, #8]
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fa37 	bl	8008c5a <USBH_ParseStringDesc>
  }

  return status;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	607b      	str	r3, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	72fb      	strb	r3, [r7, #11]
 8008804:	4613      	mov	r3, r2
 8008806:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	789b      	ldrb	r3, [r3, #2]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d11c      	bne.n	800884a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008810:	7afb      	ldrb	r3, [r7, #11]
 8008812:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008816:	b2da      	uxtb	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2206      	movs	r2, #6
 8008820:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	893a      	ldrh	r2, [r7, #8]
 8008826:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008828:	893b      	ldrh	r3, [r7, #8]
 800882a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800882e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008832:	d104      	bne.n	800883e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f240 4209 	movw	r2, #1033	; 0x409
 800883a:	829a      	strh	r2, [r3, #20]
 800883c:	e002      	b.n	8008844 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8b3a      	ldrh	r2, [r7, #24]
 8008848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800884a:	8b3b      	ldrh	r3, [r7, #24]
 800884c:	461a      	mov	r2, r3
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fa50 	bl	8008cf6 <USBH_CtlReq>
 8008856:	4603      	mov	r3, r0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	789b      	ldrb	r3, [r3, #2]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d10f      	bne.n	8008894 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2205      	movs	r2, #5
 800887e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008880:	78fb      	ldrb	r3, [r7, #3]
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008894:	2200      	movs	r2, #0
 8008896:	2100      	movs	r1, #0
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fa2c 	bl	8008cf6 <USBH_CtlReq>
 800889e:	4603      	mov	r3, r0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	789b      	ldrb	r3, [r3, #2]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d10e      	bne.n	80088da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2209      	movs	r2, #9
 80088c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	887a      	ldrh	r2, [r7, #2]
 80088cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088da:	2200      	movs	r2, #0
 80088dc:	2100      	movs	r1, #0
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa09 	bl	8008cf6 <USBH_CtlReq>
 80088e4:	4603      	mov	r3, r0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	789b      	ldrb	r3, [r3, #2]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d10f      	bne.n	8008922 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2203      	movs	r2, #3
 800890c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	b29a      	uxth	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008922:	2200      	movs	r2, #0
 8008924:	2100      	movs	r1, #0
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9e5 	bl	8008cf6 <USBH_CtlReq>
 800892c:	4603      	mov	r3, r0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	789b      	ldrb	r3, [r3, #2]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d10f      	bne.n	800896a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	b29a      	uxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800896a:	2200      	movs	r2, #0
 800896c:	2100      	movs	r1, #0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f9c1 	bl	8008cf6 <USBH_CtlReq>
 8008974:	4603      	mov	r3, r0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	4613      	mov	r3, r2
 800898a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	785a      	ldrb	r2, [r3, #1]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	3302      	adds	r3, #2
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	3303      	adds	r3, #3
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	4313      	orrs	r3, r2
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	791a      	ldrb	r2, [r3, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	795a      	ldrb	r2, [r3, #5]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	799a      	ldrb	r2, [r3, #6]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	79da      	ldrb	r2, [r3, #7]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	2b08      	cmp	r3, #8
 80089dc:	d939      	bls.n	8008a52 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	3308      	adds	r3, #8
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3309      	adds	r3, #9
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4313      	orrs	r3, r2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	330a      	adds	r3, #10
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	330b      	adds	r3, #11
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	330c      	adds	r3, #12
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	330d      	adds	r3, #13
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	021b      	lsls	r3, r3, #8
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	7b9a      	ldrb	r2, [r3, #14]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	7bda      	ldrb	r2, [r3, #15]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	7c1a      	ldrb	r2, [r3, #16]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	7c5a      	ldrb	r2, [r3, #17]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	745a      	strb	r2, [r3, #17]
  }
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b08a      	sub	sp, #40	; 0x28
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	781a      	ldrb	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	785a      	ldrb	r2, [r3, #1]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	3302      	adds	r3, #2
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	3303      	adds	r3, #3
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	021b      	lsls	r3, r3, #8
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	791a      	ldrb	r2, [r3, #4]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	795a      	ldrb	r2, [r3, #5]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	799a      	ldrb	r2, [r3, #6]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	79da      	ldrb	r2, [r3, #7]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	7a1a      	ldrb	r2, [r3, #8]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008ad4:	88fb      	ldrh	r3, [r7, #6]
 8008ad6:	2b09      	cmp	r3, #9
 8008ad8:	d95f      	bls.n	8008b9a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008ada:	2309      	movs	r3, #9
 8008adc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ae2:	e051      	b.n	8008b88 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ae4:	f107 0316 	add.w	r3, r7, #22
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aec:	f000 f8e8 	bl	8008cc0 <USBH_GetNextDesc>
 8008af0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d146      	bne.n	8008b88 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008afe:	221a      	movs	r2, #26
 8008b00:	fb02 f303 	mul.w	r3, r2, r3
 8008b04:	3308      	adds	r3, #8
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b10:	69f8      	ldr	r0, [r7, #28]
 8008b12:	f000 f846 	bl	8008ba2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b20:	e022      	b.n	8008b68 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b22:	f107 0316 	add.w	r3, r7, #22
 8008b26:	4619      	mov	r1, r3
 8008b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b2a:	f000 f8c9 	bl	8008cc0 <USBH_GetNextDesc>
 8008b2e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	2b05      	cmp	r3, #5
 8008b36:	d117      	bne.n	8008b68 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b3c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b40:	3201      	adds	r2, #1
 8008b42:	00d2      	lsls	r2, r2, #3
 8008b44:	211a      	movs	r1, #26
 8008b46:	fb01 f303 	mul.w	r3, r1, r3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	4413      	add	r3, r2
 8008b52:	3304      	adds	r3, #4
 8008b54:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b58:	69b8      	ldr	r0, [r7, #24]
 8008b5a:	f000 f851 	bl	8008c00 <USBH_ParseEPDesc>
            ep_ix++;
 8008b5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008b62:	3301      	adds	r3, #1
 8008b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	791b      	ldrb	r3, [r3, #4]
 8008b6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d204      	bcs.n	8008b7e <USBH_ParseCfgDesc+0x120>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	885a      	ldrh	r2, [r3, #2]
 8008b78:	8afb      	ldrh	r3, [r7, #22]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d8d1      	bhi.n	8008b22 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b82:	3301      	adds	r3, #1
 8008b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d804      	bhi.n	8008b9a <USBH_ParseCfgDesc+0x13c>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	885a      	ldrh	r2, [r3, #2]
 8008b94:	8afb      	ldrh	r3, [r7, #22]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d8a4      	bhi.n	8008ae4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008b9a:	bf00      	nop
 8008b9c:	3728      	adds	r7, #40	; 0x28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781a      	ldrb	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	785a      	ldrb	r2, [r3, #1]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	789a      	ldrb	r2, [r3, #2]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	78da      	ldrb	r2, [r3, #3]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	791a      	ldrb	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	795a      	ldrb	r2, [r3, #5]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	799a      	ldrb	r2, [r3, #6]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	79da      	ldrb	r2, [r3, #7]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	7a1a      	ldrb	r2, [r3, #8]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	721a      	strb	r2, [r3, #8]
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781a      	ldrb	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	785a      	ldrb	r2, [r3, #1]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	789a      	ldrb	r2, [r3, #2]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	78da      	ldrb	r2, [r3, #3]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	3305      	adds	r3, #5
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	021b      	lsls	r3, r3, #8
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	799a      	ldrb	r2, [r3, #6]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	719a      	strb	r2, [r3, #6]
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b087      	sub	sp, #28
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	4613      	mov	r3, r2
 8008c66:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d120      	bne.n	8008cb4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	1e9a      	subs	r2, r3, #2
 8008c78:	88fb      	ldrh	r3, [r7, #6]
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	bf28      	it	cs
 8008c7e:	4613      	movcs	r3, r2
 8008c80:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3302      	adds	r3, #2
 8008c86:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	82fb      	strh	r3, [r7, #22]
 8008c8c:	e00b      	b.n	8008ca6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c8e:	8afb      	ldrh	r3, [r7, #22]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ca0:	8afb      	ldrh	r3, [r7, #22]
 8008ca2:	3302      	adds	r3, #2
 8008ca4:	82fb      	strh	r3, [r7, #22]
 8008ca6:	8afa      	ldrh	r2, [r7, #22]
 8008ca8:	8abb      	ldrh	r3, [r7, #20]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d3ef      	bcc.n	8008c8e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	881a      	ldrh	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b086      	sub	sp, #24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	4613      	mov	r3, r2
 8008d02:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d04:	2301      	movs	r3, #1
 8008d06:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	789b      	ldrb	r3, [r3, #2]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d002      	beq.n	8008d16 <USBH_CtlReq+0x20>
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d01d      	beq.n	8008d50 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008d14:	e043      	b.n	8008d9e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	88fa      	ldrh	r2, [r7, #6]
 8008d20:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2203      	movs	r2, #3
 8008d36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d46:	2200      	movs	r2, #0
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f000 fc63 	bl	8009614 <osMessagePut>
      break;
 8008d4e:	e026      	b.n	8008d9e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f829 	bl	8008da8 <USBH_HandleControl>
 8008d56:	4603      	mov	r3, r0
 8008d58:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <USBH_CtlReq+0x70>
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d106      	bne.n	8008d74 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	761a      	strb	r2, [r3, #24]
 8008d72:	e005      	b.n	8008d80 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d102      	bne.n	8008d80 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2203      	movs	r2, #3
 8008d84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d94:	2200      	movs	r2, #0
 8008d96:	4619      	mov	r1, r3
 8008d98:	f000 fc3c 	bl	8009614 <osMessagePut>
      break;
 8008d9c:	bf00      	nop
  }
  return status;
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7e1b      	ldrb	r3, [r3, #24]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	2b0a      	cmp	r3, #10
 8008dc0:	f200 822b 	bhi.w	800921a <USBH_HandleControl+0x472>
 8008dc4:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <USBH_HandleControl+0x24>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008df9 	.word	0x08008df9
 8008dd0:	08008e13 	.word	0x08008e13
 8008dd4:	08008eb5 	.word	0x08008eb5
 8008dd8:	08008edb 	.word	0x08008edb
 8008ddc:	08008f67 	.word	0x08008f67
 8008de0:	08008f93 	.word	0x08008f93
 8008de4:	08009055 	.word	0x08009055
 8008de8:	08009077 	.word	0x08009077
 8008dec:	08009109 	.word	0x08009109
 8008df0:	08009131 	.word	0x08009131
 8008df4:	080091c3 	.word	0x080091c3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f103 0110 	add.w	r1, r3, #16
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	795b      	ldrb	r3, [r3, #5]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fa19 	bl	800923c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	761a      	strb	r2, [r3, #24]
      break;
 8008e10:	e20e      	b.n	8009230 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	795b      	ldrb	r3, [r3, #5]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f002 fffb 	bl	800be14 <USBH_LL_GetURBState>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d12c      	bne.n	8008e82 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7c1b      	ldrb	r3, [r3, #16]
 8008e2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	8adb      	ldrh	r3, [r3, #22]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e3a:	7b7b      	ldrb	r3, [r7, #13]
 8008e3c:	2b80      	cmp	r3, #128	; 0x80
 8008e3e:	d103      	bne.n	8008e48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2203      	movs	r2, #3
 8008e44:	761a      	strb	r2, [r3, #24]
 8008e46:	e00d      	b.n	8008e64 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2205      	movs	r2, #5
 8008e4c:	761a      	strb	r2, [r3, #24]
 8008e4e:	e009      	b.n	8008e64 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008e50:	7b7b      	ldrb	r3, [r7, #13]
 8008e52:	2b80      	cmp	r3, #128	; 0x80
 8008e54:	d103      	bne.n	8008e5e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2209      	movs	r2, #9
 8008e5a:	761a      	strb	r2, [r3, #24]
 8008e5c:	e002      	b.n	8008e64 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2207      	movs	r2, #7
 8008e62:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2203      	movs	r2, #3
 8008e68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f000 fbca 	bl	8009614 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e80:	e1cd      	b.n	800921e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d003      	beq.n	8008e90 <USBH_HandleControl+0xe8>
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	f040 81c7 	bne.w	800921e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	220b      	movs	r2, #11
 8008e94:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2203      	movs	r2, #3
 8008e9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008eaa:	2200      	movs	r2, #0
 8008eac:	4619      	mov	r1, r3
 8008eae:	f000 fbb1 	bl	8009614 <osMessagePut>
      break;
 8008eb2:	e1b4      	b.n	800921e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6899      	ldr	r1, [r3, #8]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	899a      	ldrh	r2, [r3, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	791b      	ldrb	r3, [r3, #4]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f9f4 	bl	80092ba <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	761a      	strb	r2, [r3, #24]
      break;
 8008ed8:	e1aa      	b.n	8009230 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	791b      	ldrb	r3, [r3, #4]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f002 ff97 	bl	800be14 <USBH_LL_GetURBState>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d110      	bne.n	8008f12 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2209      	movs	r2, #9
 8008ef4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2203      	movs	r2, #3
 8008efa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f000 fb81 	bl	8009614 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	d110      	bne.n	8008f3a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2203      	movs	r2, #3
 8008f20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f30:	2200      	movs	r2, #0
 8008f32:	4619      	mov	r1, r3
 8008f34:	f000 fb6e 	bl	8009614 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f38:	e173      	b.n	8009222 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	f040 8170 	bne.w	8009222 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	220b      	movs	r2, #11
 8008f46:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4619      	mov	r1, r3
 8008f60:	f000 fb58 	bl	8009614 <osMessagePut>
      break;
 8008f64:	e15d      	b.n	8009222 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6899      	ldr	r1, [r3, #8]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	899a      	ldrh	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	7958      	ldrb	r0, [r3, #5]
 8008f72:	2301      	movs	r3, #1
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	4603      	mov	r3, r0
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f979 	bl	8009270 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2206      	movs	r2, #6
 8008f8e:	761a      	strb	r2, [r3, #24]
      break;
 8008f90:	e14e      	b.n	8009230 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	795b      	ldrb	r3, [r3, #5]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f002 ff3b 	bl	800be14 <USBH_LL_GetURBState>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d111      	bne.n	8008fcc <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2207      	movs	r2, #7
 8008fac:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f000 fb25 	bl	8009614 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fca:	e12c      	b.n	8009226 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d113      	bne.n	8008ffa <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	220c      	movs	r2, #12
 8008fd6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2203      	movs	r2, #3
 8008fe0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	f000 fb0e 	bl	8009614 <osMessagePut>
      break;
 8008ff8:	e115      	b.n	8009226 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d111      	bne.n	8009024 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2205      	movs	r2, #5
 8009004:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2203      	movs	r2, #3
 800900a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800901a:	2200      	movs	r2, #0
 800901c:	4619      	mov	r1, r3
 800901e:	f000 faf9 	bl	8009614 <osMessagePut>
      break;
 8009022:	e100      	b.n	8009226 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	2b04      	cmp	r3, #4
 8009028:	f040 80fd 	bne.w	8009226 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	220b      	movs	r2, #11
 8009030:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009032:	2302      	movs	r3, #2
 8009034:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2203      	movs	r2, #3
 800903a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800904a:	2200      	movs	r2, #0
 800904c:	4619      	mov	r1, r3
 800904e:	f000 fae1 	bl	8009614 <osMessagePut>
      break;
 8009052:	e0e8      	b.n	8009226 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	791b      	ldrb	r3, [r3, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	2100      	movs	r1, #0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f92c 	bl	80092ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009068:	b29a      	uxth	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2208      	movs	r2, #8
 8009072:	761a      	strb	r2, [r3, #24]

      break;
 8009074:	e0dc      	b.n	8009230 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	791b      	ldrb	r3, [r3, #4]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f002 fec9 	bl	800be14 <USBH_LL_GetURBState>
 8009082:	4603      	mov	r3, r0
 8009084:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d113      	bne.n	80090b4 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	220d      	movs	r2, #13
 8009090:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2203      	movs	r2, #3
 800909a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090aa:	2200      	movs	r2, #0
 80090ac:	4619      	mov	r1, r3
 80090ae:	f000 fab1 	bl	8009614 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80090b2:	e0ba      	b.n	800922a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d111      	bne.n	80090de <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	220b      	movs	r2, #11
 80090be:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2203      	movs	r2, #3
 80090c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090d4:	2200      	movs	r2, #0
 80090d6:	4619      	mov	r1, r3
 80090d8:	f000 fa9c 	bl	8009614 <osMessagePut>
      break;
 80090dc:	e0a5      	b.n	800922a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	2b05      	cmp	r3, #5
 80090e2:	f040 80a2 	bne.w	800922a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80090e6:	2303      	movs	r3, #3
 80090e8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2203      	movs	r2, #3
 80090ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090fe:	2200      	movs	r2, #0
 8009100:	4619      	mov	r1, r3
 8009102:	f000 fa87 	bl	8009614 <osMessagePut>
      break;
 8009106:	e090      	b.n	800922a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	795a      	ldrb	r2, [r3, #5]
 800910c:	2301      	movs	r3, #1
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	2200      	movs	r2, #0
 8009114:	2100      	movs	r1, #0
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f8aa 	bl	8009270 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	220a      	movs	r2, #10
 800912c:	761a      	strb	r2, [r3, #24]
      break;
 800912e:	e07f      	b.n	8009230 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	795b      	ldrb	r3, [r3, #5]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f002 fe6c 	bl	800be14 <USBH_LL_GetURBState>
 800913c:	4603      	mov	r3, r0
 800913e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d113      	bne.n	800916e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	220d      	movs	r2, #13
 800914e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2203      	movs	r2, #3
 8009154:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009164:	2200      	movs	r2, #0
 8009166:	4619      	mov	r1, r3
 8009168:	f000 fa54 	bl	8009614 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800916c:	e05f      	b.n	800922e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	2b02      	cmp	r3, #2
 8009172:	d111      	bne.n	8009198 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2209      	movs	r2, #9
 8009178:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2203      	movs	r2, #3
 800917e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800918e:	2200      	movs	r2, #0
 8009190:	4619      	mov	r1, r3
 8009192:	f000 fa3f 	bl	8009614 <osMessagePut>
      break;
 8009196:	e04a      	b.n	800922e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b04      	cmp	r3, #4
 800919c:	d147      	bne.n	800922e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	220b      	movs	r2, #11
 80091a2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2203      	movs	r2, #3
 80091a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091b8:	2200      	movs	r2, #0
 80091ba:	4619      	mov	r1, r3
 80091bc:	f000 fa2a 	bl	8009614 <osMessagePut>
      break;
 80091c0:	e035      	b.n	800922e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7e5b      	ldrb	r3, [r3, #25]
 80091c6:	3301      	adds	r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	765a      	strb	r2, [r3, #25]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7e5b      	ldrb	r3, [r3, #25]
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d806      	bhi.n	80091e4 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80091e2:	e025      	b.n	8009230 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091ea:	2106      	movs	r1, #6
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	795b      	ldrb	r3, [r3, #5]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f90d 	bl	800941c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	791b      	ldrb	r3, [r3, #4]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f907 	bl	800941c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009214:	2302      	movs	r3, #2
 8009216:	73fb      	strb	r3, [r7, #15]
      break;
 8009218:	e00a      	b.n	8009230 <USBH_HandleControl+0x488>

    default:
      break;
 800921a:	bf00      	nop
 800921c:	e008      	b.n	8009230 <USBH_HandleControl+0x488>
      break;
 800921e:	bf00      	nop
 8009220:	e006      	b.n	8009230 <USBH_HandleControl+0x488>
      break;
 8009222:	bf00      	nop
 8009224:	e004      	b.n	8009230 <USBH_HandleControl+0x488>
      break;
 8009226:	bf00      	nop
 8009228:	e002      	b.n	8009230 <USBH_HandleControl+0x488>
      break;
 800922a:	bf00      	nop
 800922c:	e000      	b.n	8009230 <USBH_HandleControl+0x488>
      break;
 800922e:	bf00      	nop
  }

  return status;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop

0800923c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af04      	add	r7, sp, #16
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800924a:	79f9      	ldrb	r1, [r7, #7]
 800924c:	2300      	movs	r3, #0
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	2308      	movs	r3, #8
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	2300      	movs	r3, #0
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	2300      	movs	r3, #0
 800925e:	2200      	movs	r2, #0
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f002 fda6 	bl	800bdb2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af04      	add	r7, sp, #16
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4611      	mov	r1, r2
 800927c:	461a      	mov	r2, r3
 800927e:	460b      	mov	r3, r1
 8009280:	80fb      	strh	r3, [r7, #6]
 8009282:	4613      	mov	r3, r2
 8009284:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009294:	7979      	ldrb	r1, [r7, #5]
 8009296:	7e3b      	ldrb	r3, [r7, #24]
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	2301      	movs	r3, #1
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	2300      	movs	r3, #0
 80092a8:	2200      	movs	r2, #0
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f002 fd81 	bl	800bdb2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b088      	sub	sp, #32
 80092be:	af04      	add	r7, sp, #16
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	4611      	mov	r1, r2
 80092c6:	461a      	mov	r2, r3
 80092c8:	460b      	mov	r3, r1
 80092ca:	80fb      	strh	r3, [r7, #6]
 80092cc:	4613      	mov	r3, r2
 80092ce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092d0:	7979      	ldrb	r1, [r7, #5]
 80092d2:	2300      	movs	r3, #0
 80092d4:	9303      	str	r3, [sp, #12]
 80092d6:	88fb      	ldrh	r3, [r7, #6]
 80092d8:	9302      	str	r3, [sp, #8]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	2301      	movs	r3, #1
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	2300      	movs	r3, #0
 80092e4:	2201      	movs	r2, #1
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f002 fd63 	bl	800bdb2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80092ec:	2300      	movs	r3, #0

}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b088      	sub	sp, #32
 80092fa:	af04      	add	r7, sp, #16
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	4611      	mov	r1, r2
 8009302:	461a      	mov	r2, r3
 8009304:	460b      	mov	r3, r1
 8009306:	80fb      	strh	r3, [r7, #6]
 8009308:	4613      	mov	r3, r2
 800930a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800931a:	7979      	ldrb	r1, [r7, #5]
 800931c:	7e3b      	ldrb	r3, [r7, #24]
 800931e:	9303      	str	r3, [sp, #12]
 8009320:	88fb      	ldrh	r3, [r7, #6]
 8009322:	9302      	str	r3, [sp, #8]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	2301      	movs	r3, #1
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	2302      	movs	r3, #2
 800932e:	2200      	movs	r2, #0
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f002 fd3e 	bl	800bdb2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af04      	add	r7, sp, #16
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4611      	mov	r1, r2
 800934c:	461a      	mov	r2, r3
 800934e:	460b      	mov	r3, r1
 8009350:	80fb      	strh	r3, [r7, #6]
 8009352:	4613      	mov	r3, r2
 8009354:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009356:	7979      	ldrb	r1, [r7, #5]
 8009358:	2300      	movs	r3, #0
 800935a:	9303      	str	r3, [sp, #12]
 800935c:	88fb      	ldrh	r3, [r7, #6]
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	2301      	movs	r3, #1
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	2302      	movs	r3, #2
 800936a:	2201      	movs	r2, #1
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f002 fd20 	bl	800bdb2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af04      	add	r7, sp, #16
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	4608      	mov	r0, r1
 8009386:	4611      	mov	r1, r2
 8009388:	461a      	mov	r2, r3
 800938a:	4603      	mov	r3, r0
 800938c:	70fb      	strb	r3, [r7, #3]
 800938e:	460b      	mov	r3, r1
 8009390:	70bb      	strb	r3, [r7, #2]
 8009392:	4613      	mov	r3, r2
 8009394:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009396:	7878      	ldrb	r0, [r7, #1]
 8009398:	78ba      	ldrb	r2, [r7, #2]
 800939a:	78f9      	ldrb	r1, [r7, #3]
 800939c:	8b3b      	ldrh	r3, [r7, #24]
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	7d3b      	ldrb	r3, [r7, #20]
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	7c3b      	ldrb	r3, [r7, #16]
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	4603      	mov	r3, r0
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f002 fcb3 	bl	800bd16 <USBH_LL_OpenPipe>

  return USBH_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80093c6:	78fb      	ldrb	r3, [r7, #3]
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f002 fcd2 	bl	800bd74 <USBH_LL_ClosePipe>

  return USBH_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f836 	bl	8009458 <USBH_GetFreePipe>
 80093ec:	4603      	mov	r3, r0
 80093ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80093f0:	89fb      	ldrh	r3, [r7, #14]
 80093f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d00a      	beq.n	8009410 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	89fb      	ldrh	r3, [r7, #14]
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	33e0      	adds	r3, #224	; 0xe0
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	440b      	add	r3, r1
 800940e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009410:	89fb      	ldrh	r3, [r7, #14]
 8009412:	b2db      	uxtb	r3, r3
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	2b0a      	cmp	r3, #10
 800942c:	d80d      	bhi.n	800944a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800942e:	78fb      	ldrb	r3, [r7, #3]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	33e0      	adds	r3, #224	; 0xe0
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	33e0      	adds	r3, #224	; 0xe0
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
 8009468:	e00f      	b.n	800948a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	33e0      	adds	r3, #224	; 0xe0
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d102      	bne.n	8009484 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	b29b      	uxth	r3, r3
 8009482:	e007      	b.n	8009494 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	3301      	adds	r3, #1
 8009488:	73fb      	strb	r3, [r7, #15]
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	2b0a      	cmp	r3, #10
 800948e:	d9ec      	bls.n	800946a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009490:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80094ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094b2:	2b84      	cmp	r3, #132	; 0x84
 80094b4:	d005      	beq.n	80094c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80094b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4413      	add	r3, r2
 80094be:	3303      	adds	r3, #3
 80094c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80094c2:	68fb      	ldr	r3, [r7, #12]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094d6:	f3ef 8305 	mrs	r3, IPSR
 80094da:	607b      	str	r3, [r7, #4]
  return(result);
 80094dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80094de:	2b00      	cmp	r3, #0
 80094e0:	bf14      	ite	ne
 80094e2:	2301      	movne	r3, #1
 80094e4:	2300      	moveq	r3, #0
 80094e6:	b2db      	uxtb	r3, r3
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80094f8:	f001 f8f4 	bl	800a6e4 <vTaskStartScheduler>
  
  return osOK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	bd80      	pop	{r7, pc}

08009502 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009504:	b089      	sub	sp, #36	; 0x24
 8009506:	af04      	add	r7, sp, #16
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d020      	beq.n	8009556 <osThreadCreate+0x54>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01c      	beq.n	8009556 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685c      	ldr	r4, [r3, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681d      	ldr	r5, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	691e      	ldr	r6, [r3, #16]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff ffb6 	bl	80094a0 <makeFreeRtosPriority>
 8009534:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800953e:	9202      	str	r2, [sp, #8]
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	9100      	str	r1, [sp, #0]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	4632      	mov	r2, r6
 8009548:	4629      	mov	r1, r5
 800954a:	4620      	mov	r0, r4
 800954c:	f000 fefb 	bl	800a346 <xTaskCreateStatic>
 8009550:	4603      	mov	r3, r0
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e01c      	b.n	8009590 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685c      	ldr	r4, [r3, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009562:	b29e      	uxth	r6, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff ff98 	bl	80094a0 <makeFreeRtosPriority>
 8009570:	4602      	mov	r2, r0
 8009572:	f107 030c 	add.w	r3, r7, #12
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	9200      	str	r2, [sp, #0]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	4632      	mov	r2, r6
 800957e:	4629      	mov	r1, r5
 8009580:	4620      	mov	r0, r4
 8009582:	f000 ff3a 	bl	800a3fa <xTaskCreate>
 8009586:	4603      	mov	r3, r0
 8009588:	2b01      	cmp	r3, #1
 800958a:	d001      	beq.n	8009590 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800958c:	2300      	movs	r3, #0
 800958e:	e000      	b.n	8009592 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009590:	68fb      	ldr	r3, [r7, #12]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800959a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <osDelay+0x16>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	e000      	b.n	80095b2 <osDelay+0x18>
 80095b0:	2301      	movs	r3, #1
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 f862 	bl	800a67c <vTaskDelay>
  
  return osOK;
 80095b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80095c2:	b590      	push	{r4, r7, lr}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af02      	add	r7, sp, #8
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d012      	beq.n	80095fa <osMessageCreate+0x38>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00e      	beq.n	80095fa <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6859      	ldr	r1, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68dc      	ldr	r4, [r3, #12]
 80095ec:	2300      	movs	r3, #0
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	4623      	mov	r3, r4
 80095f2:	f000 f9df 	bl	80099b4 <xQueueGenericCreateStatic>
 80095f6:	4603      	mov	r3, r0
 80095f8:	e008      	b.n	800960c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6818      	ldr	r0, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	4619      	mov	r1, r3
 8009606:	f000 fa48 	bl	8009a9a <xQueueGenericCreate>
 800960a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800960c:	4618      	mov	r0, r3
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	bd90      	pop	{r4, r7, pc}

08009614 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009620:	2300      	movs	r3, #0
 8009622:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <osMessagePut+0x1e>
    ticks = 1;
 800962e:	2301      	movs	r3, #1
 8009630:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009632:	f7ff ff4d 	bl	80094d0 <inHandlerMode>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d018      	beq.n	800966e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800963c:	f107 0210 	add.w	r2, r7, #16
 8009640:	f107 0108 	add.w	r1, r7, #8
 8009644:	2300      	movs	r3, #0
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 fb80 	bl	8009d4c <xQueueGenericSendFromISR>
 800964c:	4603      	mov	r3, r0
 800964e:	2b01      	cmp	r3, #1
 8009650:	d001      	beq.n	8009656 <osMessagePut+0x42>
      return osErrorOS;
 8009652:	23ff      	movs	r3, #255	; 0xff
 8009654:	e018      	b.n	8009688 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d014      	beq.n	8009686 <osMessagePut+0x72>
 800965c:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <osMessagePut+0x7c>)
 800965e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	e00b      	b.n	8009686 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800966e:	f107 0108 	add.w	r1, r7, #8
 8009672:	2300      	movs	r3, #0
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 fa6e 	bl	8009b58 <xQueueGenericSend>
 800967c:	4603      	mov	r3, r0
 800967e:	2b01      	cmp	r3, #1
 8009680:	d001      	beq.n	8009686 <osMessagePut+0x72>
      return osErrorOS;
 8009682:	23ff      	movs	r3, #255	; 0xff
 8009684:	e000      	b.n	8009688 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009694:	b590      	push	{r4, r7, lr}
 8009696:	b08b      	sub	sp, #44	; 0x2c
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80096ae:	2380      	movs	r3, #128	; 0x80
 80096b0:	617b      	str	r3, [r7, #20]
    return event;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	461c      	mov	r4, r3
 80096b6:	f107 0314 	add.w	r3, r7, #20
 80096ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096c2:	e054      	b.n	800976e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80096c4:	2300      	movs	r3, #0
 80096c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d2:	d103      	bne.n	80096dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80096d4:	f04f 33ff 	mov.w	r3, #4294967295
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
 80096da:	e009      	b.n	80096f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d006      	beq.n	80096f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <osMessageGet+0x5c>
      ticks = 1;
 80096ec:	2301      	movs	r3, #1
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80096f0:	f7ff feee 	bl	80094d0 <inHandlerMode>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01c      	beq.n	8009734 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80096fa:	f107 0220 	add.w	r2, r7, #32
 80096fe:	f107 0314 	add.w	r3, r7, #20
 8009702:	3304      	adds	r3, #4
 8009704:	4619      	mov	r1, r3
 8009706:	68b8      	ldr	r0, [r7, #8]
 8009708:	f000 fc90 	bl	800a02c <xQueueReceiveFromISR>
 800970c:	4603      	mov	r3, r0
 800970e:	2b01      	cmp	r3, #1
 8009710:	d102      	bne.n	8009718 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009712:	2310      	movs	r3, #16
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e001      	b.n	800971c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01d      	beq.n	800975e <osMessageGet+0xca>
 8009722:	4b15      	ldr	r3, [pc, #84]	; (8009778 <osMessageGet+0xe4>)
 8009724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	e014      	b.n	800975e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009734:	f107 0314 	add.w	r3, r7, #20
 8009738:	3304      	adds	r3, #4
 800973a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973c:	4619      	mov	r1, r3
 800973e:	68b8      	ldr	r0, [r7, #8]
 8009740:	f000 fb98 	bl	8009e74 <xQueueReceive>
 8009744:	4603      	mov	r3, r0
 8009746:	2b01      	cmp	r3, #1
 8009748:	d102      	bne.n	8009750 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800974a:	2310      	movs	r3, #16
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	e006      	b.n	800975e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <osMessageGet+0xc6>
 8009756:	2300      	movs	r3, #0
 8009758:	e000      	b.n	800975c <osMessageGet+0xc8>
 800975a:	2340      	movs	r3, #64	; 0x40
 800975c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	461c      	mov	r4, r3
 8009762:	f107 0314 	add.w	r3, r7, #20
 8009766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800976a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	372c      	adds	r7, #44	; 0x2c
 8009772:	46bd      	mov	sp, r7
 8009774:	bd90      	pop	{r4, r7, pc}
 8009776:	bf00      	nop
 8009778:	e000ed04 	.word	0xe000ed04

0800977c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f103 0208 	add.w	r2, r3, #8
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f04f 32ff 	mov.w	r2, #4294967295
 8009794:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f103 0208 	add.w	r2, r3, #8
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f103 0208 	add.w	r2, r3, #8
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097ca:	bf00      	nop
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097d6:	b480      	push	{r7}
 80097d8:	b085      	sub	sp, #20
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	601a      	str	r2, [r3, #0]
}
 8009812:	bf00      	nop
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800981e:	b480      	push	{r7}
 8009820:	b085      	sub	sp, #20
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009834:	d103      	bne.n	800983e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	e00c      	b.n	8009858 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3308      	adds	r3, #8
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	e002      	b.n	800984c <vListInsert+0x2e>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	429a      	cmp	r2, r3
 8009856:	d2f6      	bcs.n	8009846 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]
}
 8009884:	bf00      	nop
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	6892      	ldr	r2, [r2, #8]
 80098a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6852      	ldr	r2, [r2, #4]
 80098b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d103      	bne.n	80098c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	1e5a      	subs	r2, r3, #1
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	60bb      	str	r3, [r7, #8]
 800990a:	e7fe      	b.n	800990a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800990c:	f001 fd36 	bl	800b37c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009918:	68f9      	ldr	r1, [r7, #12]
 800991a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800991c:	fb01 f303 	mul.w	r3, r1, r3
 8009920:	441a      	add	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993c:	3b01      	subs	r3, #1
 800993e:	68f9      	ldr	r1, [r7, #12]
 8009940:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009942:	fb01 f303 	mul.w	r3, r1, r3
 8009946:	441a      	add	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	22ff      	movs	r2, #255	; 0xff
 8009950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	22ff      	movs	r2, #255	; 0xff
 8009958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d114      	bne.n	800998c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01a      	beq.n	80099a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3310      	adds	r3, #16
 800996e:	4618      	mov	r0, r3
 8009970:	f001 f91c 	bl	800abac <xTaskRemoveFromEventList>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d012      	beq.n	80099a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800997a:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <xQueueGenericReset+0xcc>)
 800997c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	e009      	b.n	80099a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3310      	adds	r3, #16
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff fef3 	bl	800977c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3324      	adds	r3, #36	; 0x24
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff feee 	bl	800977c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099a0:	f001 fd1a 	bl	800b3d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099a4:	2301      	movs	r3, #1
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	e000ed04 	.word	0xe000ed04

080099b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08e      	sub	sp, #56	; 0x38
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d109      	bne.n	80099dc <xQueueGenericCreateStatic+0x28>
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099da:	e7fe      	b.n	80099da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d109      	bne.n	80099f6 <xQueueGenericCreateStatic+0x42>
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
 80099f4:	e7fe      	b.n	80099f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <xQueueGenericCreateStatic+0x4e>
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <xQueueGenericCreateStatic+0x52>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e000      	b.n	8009a08 <xQueueGenericCreateStatic+0x54>
 8009a06:	2300      	movs	r3, #0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d109      	bne.n	8009a20 <xQueueGenericCreateStatic+0x6c>
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	623b      	str	r3, [r7, #32]
 8009a1e:	e7fe      	b.n	8009a1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <xQueueGenericCreateStatic+0x78>
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <xQueueGenericCreateStatic+0x7c>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e000      	b.n	8009a32 <xQueueGenericCreateStatic+0x7e>
 8009a30:	2300      	movs	r3, #0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <xQueueGenericCreateStatic+0x96>
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	61fb      	str	r3, [r7, #28]
 8009a48:	e7fe      	b.n	8009a48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a4a:	2348      	movs	r3, #72	; 0x48
 8009a4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b48      	cmp	r3, #72	; 0x48
 8009a52:	d009      	beq.n	8009a68 <xQueueGenericCreateStatic+0xb4>
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	61bb      	str	r3, [r7, #24]
 8009a66:	e7fe      	b.n	8009a66 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00d      	beq.n	8009a90 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	68b9      	ldr	r1, [r7, #8]
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f844 	bl	8009b18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3730      	adds	r7, #48	; 0x30
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b08a      	sub	sp, #40	; 0x28
 8009a9e:	af02      	add	r7, sp, #8
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d109      	bne.n	8009ac2 <xQueueGenericCreate+0x28>
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	613b      	str	r3, [r7, #16]
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	61fb      	str	r3, [r7, #28]
 8009acc:	e004      	b.n	8009ad8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	fb02 f303 	mul.w	r3, r2, r3
 8009ad6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	3348      	adds	r3, #72	; 0x48
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 fd67 	bl	800b5b0 <pvPortMalloc>
 8009ae2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d011      	beq.n	8009b0e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	3348      	adds	r3, #72	; 0x48
 8009af2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009afc:	79fa      	ldrb	r2, [r7, #7]
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	4613      	mov	r3, r2
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	68b9      	ldr	r1, [r7, #8]
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 f805 	bl	8009b18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b0e:	69bb      	ldr	r3, [r7, #24]
	}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3720      	adds	r7, #32
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	e002      	b.n	8009b3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b46:	2101      	movs	r1, #1
 8009b48:	69b8      	ldr	r0, [r7, #24]
 8009b4a:	f7ff fecb 	bl	80098e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08e      	sub	sp, #56	; 0x38
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b66:	2300      	movs	r3, #0
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d109      	bne.n	8009b88 <xQueueGenericSend+0x30>
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b86:	e7fe      	b.n	8009b86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d103      	bne.n	8009b96 <xQueueGenericSend+0x3e>
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <xQueueGenericSend+0x42>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e000      	b.n	8009b9c <xQueueGenericSend+0x44>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d109      	bne.n	8009bb4 <xQueueGenericSend+0x5c>
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bb2:	e7fe      	b.n	8009bb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d103      	bne.n	8009bc2 <xQueueGenericSend+0x6a>
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d101      	bne.n	8009bc6 <xQueueGenericSend+0x6e>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <xQueueGenericSend+0x70>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d109      	bne.n	8009be0 <xQueueGenericSend+0x88>
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	623b      	str	r3, [r7, #32]
 8009bde:	e7fe      	b.n	8009bde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009be0:	f001 f99c 	bl	800af1c <xTaskGetSchedulerState>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <xQueueGenericSend+0x98>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <xQueueGenericSend+0x9c>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e000      	b.n	8009bf6 <xQueueGenericSend+0x9e>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d109      	bne.n	8009c0e <xQueueGenericSend+0xb6>
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	61fb      	str	r3, [r7, #28]
 8009c0c:	e7fe      	b.n	8009c0c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c0e:	f001 fbb5 	bl	800b37c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d302      	bcc.n	8009c24 <xQueueGenericSend+0xcc>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d129      	bne.n	8009c78 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c2a:	f000 fa7c 	bl	800a126 <prvCopyDataToQueue>
 8009c2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d010      	beq.n	8009c5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	3324      	adds	r3, #36	; 0x24
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 ffb5 	bl	800abac <xTaskRemoveFromEventList>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d013      	beq.n	8009c70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c48:	4b3f      	ldr	r3, [pc, #252]	; (8009d48 <xQueueGenericSend+0x1f0>)
 8009c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	e00a      	b.n	8009c70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d007      	beq.n	8009c70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c60:	4b39      	ldr	r3, [pc, #228]	; (8009d48 <xQueueGenericSend+0x1f0>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c70:	f001 fbb2 	bl	800b3d8 <vPortExitCritical>
				return pdPASS;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e063      	b.n	8009d40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d103      	bne.n	8009c86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c7e:	f001 fbab 	bl	800b3d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	e05c      	b.n	8009d40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d106      	bne.n	8009c9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c8c:	f107 0314 	add.w	r3, r7, #20
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 ffed 	bl	800ac70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c96:	2301      	movs	r3, #1
 8009c98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c9a:	f001 fb9d 	bl	800b3d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c9e:	f000 fd7f 	bl	800a7a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ca2:	f001 fb6b 	bl	800b37c <vPortEnterCritical>
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cac:	b25b      	sxtb	r3, r3
 8009cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb2:	d103      	bne.n	8009cbc <xQueueGenericSend+0x164>
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cc2:	b25b      	sxtb	r3, r3
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc8:	d103      	bne.n	8009cd2 <xQueueGenericSend+0x17a>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cd2:	f001 fb81 	bl	800b3d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cd6:	1d3a      	adds	r2, r7, #4
 8009cd8:	f107 0314 	add.w	r3, r7, #20
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 ffdc 	bl	800ac9c <xTaskCheckForTimeOut>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d124      	bne.n	8009d34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cec:	f000 fb13 	bl	800a316 <prvIsQueueFull>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d018      	beq.n	8009d28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	3310      	adds	r3, #16
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 ff30 	bl	800ab64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d06:	f000 fa9e 	bl	800a246 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d0a:	f000 fd57 	bl	800a7bc <xTaskResumeAll>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f47f af7c 	bne.w	8009c0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <xQueueGenericSend+0x1f0>)
 8009d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	e772      	b.n	8009c0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d2a:	f000 fa8c 	bl	800a246 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d2e:	f000 fd45 	bl	800a7bc <xTaskResumeAll>
 8009d32:	e76c      	b.n	8009c0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d36:	f000 fa86 	bl	800a246 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d3a:	f000 fd3f 	bl	800a7bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3738      	adds	r7, #56	; 0x38
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08e      	sub	sp, #56	; 0x38
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d109      	bne.n	8009d78 <xQueueGenericSendFromISR+0x2c>
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
 8009d76:	e7fe      	b.n	8009d76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d103      	bne.n	8009d86 <xQueueGenericSendFromISR+0x3a>
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <xQueueGenericSendFromISR+0x3e>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e000      	b.n	8009d8c <xQueueGenericSendFromISR+0x40>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d109      	bne.n	8009da4 <xQueueGenericSendFromISR+0x58>
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	623b      	str	r3, [r7, #32]
 8009da2:	e7fe      	b.n	8009da2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d103      	bne.n	8009db2 <xQueueGenericSendFromISR+0x66>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d101      	bne.n	8009db6 <xQueueGenericSendFromISR+0x6a>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e000      	b.n	8009db8 <xQueueGenericSendFromISR+0x6c>
 8009db6:	2300      	movs	r3, #0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d109      	bne.n	8009dd0 <xQueueGenericSendFromISR+0x84>
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	61fb      	str	r3, [r7, #28]
 8009dce:	e7fe      	b.n	8009dce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dd0:	f001 fbb0 	bl	800b534 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009dd4:	f3ef 8211 	mrs	r2, BASEPRI
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	61ba      	str	r2, [r7, #24]
 8009dea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009dec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d302      	bcc.n	8009e02 <xQueueGenericSendFromISR+0xb6>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d12c      	bne.n	8009e5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	68b9      	ldr	r1, [r7, #8]
 8009e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e12:	f000 f988 	bl	800a126 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1e:	d112      	bne.n	8009e46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d016      	beq.n	8009e56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	3324      	adds	r3, #36	; 0x24
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 febd 	bl	800abac <xTaskRemoveFromEventList>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00e      	beq.n	8009e56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	e007      	b.n	8009e56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	b25a      	sxtb	r2, r3
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e56:	2301      	movs	r3, #1
 8009e58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009e5a:	e001      	b.n	8009e60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3738      	adds	r7, #56	; 0x38
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08c      	sub	sp, #48	; 0x30
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e80:	2300      	movs	r3, #0
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d109      	bne.n	8009ea2 <xQueueReceive+0x2e>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	623b      	str	r3, [r7, #32]
 8009ea0:	e7fe      	b.n	8009ea0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d103      	bne.n	8009eb0 <xQueueReceive+0x3c>
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <xQueueReceive+0x40>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e000      	b.n	8009eb6 <xQueueReceive+0x42>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d109      	bne.n	8009ece <xQueueReceive+0x5a>
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	e7fe      	b.n	8009ecc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ece:	f001 f825 	bl	800af1c <xTaskGetSchedulerState>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <xQueueReceive+0x6a>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <xQueueReceive+0x6e>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e000      	b.n	8009ee4 <xQueueReceive+0x70>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d109      	bne.n	8009efc <xQueueReceive+0x88>
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	e7fe      	b.n	8009efa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009efc:	f001 fa3e 	bl	800b37c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f04:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d01f      	beq.n	8009f4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f0c:	68b9      	ldr	r1, [r7, #8]
 8009f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f10:	f000 f973 	bl	800a1fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	1e5a      	subs	r2, r3, #1
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00f      	beq.n	8009f44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	3310      	adds	r3, #16
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fe3f 	bl	800abac <xTaskRemoveFromEventList>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d007      	beq.n	8009f44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f34:	4b3c      	ldr	r3, [pc, #240]	; (800a028 <xQueueReceive+0x1b4>)
 8009f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f44:	f001 fa48 	bl	800b3d8 <vPortExitCritical>
				return pdPASS;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e069      	b.n	800a020 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d103      	bne.n	8009f5a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f52:	f001 fa41 	bl	800b3d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f56:	2300      	movs	r3, #0
 8009f58:	e062      	b.n	800a020 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d106      	bne.n	8009f6e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f60:	f107 0310 	add.w	r3, r7, #16
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 fe83 	bl	800ac70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f6e:	f001 fa33 	bl	800b3d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f72:	f000 fc15 	bl	800a7a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f76:	f001 fa01 	bl	800b37c <vPortEnterCritical>
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f80:	b25b      	sxtb	r3, r3
 8009f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f86:	d103      	bne.n	8009f90 <xQueueReceive+0x11c>
 8009f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f96:	b25b      	sxtb	r3, r3
 8009f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9c:	d103      	bne.n	8009fa6 <xQueueReceive+0x132>
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fa6:	f001 fa17 	bl	800b3d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009faa:	1d3a      	adds	r2, r7, #4
 8009fac:	f107 0310 	add.w	r3, r7, #16
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fe72 	bl	800ac9c <xTaskCheckForTimeOut>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d123      	bne.n	800a006 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fc0:	f000 f993 	bl	800a2ea <prvIsQueueEmpty>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d017      	beq.n	8009ffa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	3324      	adds	r3, #36	; 0x24
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 fdc6 	bl	800ab64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fda:	f000 f934 	bl	800a246 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fde:	f000 fbed 	bl	800a7bc <xTaskResumeAll>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d189      	bne.n	8009efc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009fe8:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <xQueueReceive+0x1b4>)
 8009fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	e780      	b.n	8009efc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ffc:	f000 f923 	bl	800a246 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a000:	f000 fbdc 	bl	800a7bc <xTaskResumeAll>
 800a004:	e77a      	b.n	8009efc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a008:	f000 f91d 	bl	800a246 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a00c:	f000 fbd6 	bl	800a7bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a012:	f000 f96a 	bl	800a2ea <prvIsQueueEmpty>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f43f af6f 	beq.w	8009efc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a01e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a020:	4618      	mov	r0, r3
 800a022:	3730      	adds	r7, #48	; 0x30
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08e      	sub	sp, #56	; 0x38
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d109      	bne.n	800a056 <xQueueReceiveFromISR+0x2a>
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	623b      	str	r3, [r7, #32]
 800a054:	e7fe      	b.n	800a054 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d103      	bne.n	800a064 <xQueueReceiveFromISR+0x38>
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <xQueueReceiveFromISR+0x3c>
 800a064:	2301      	movs	r3, #1
 800a066:	e000      	b.n	800a06a <xQueueReceiveFromISR+0x3e>
 800a068:	2300      	movs	r3, #0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d109      	bne.n	800a082 <xQueueReceiveFromISR+0x56>
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	e7fe      	b.n	800a080 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a082:	f001 fa57 	bl	800b534 <vPortValidateInterruptPriority>
	__asm volatile
 800a086:	f3ef 8211 	mrs	r2, BASEPRI
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	61ba      	str	r2, [r7, #24]
 800a09c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a09e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d02f      	beq.n	800a10e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0bc:	f000 f89d 	bl	800a1fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	1e5a      	subs	r2, r3, #1
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a0c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d0:	d112      	bne.n	800a0f8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d016      	beq.n	800a108 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	3310      	adds	r3, #16
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fd64 	bl	800abac <xTaskRemoveFromEventList>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00e      	beq.n	800a108 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	e007      	b.n	800a108 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	b25a      	sxtb	r2, r3
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a108:	2301      	movs	r3, #1
 800a10a:	637b      	str	r3, [r7, #52]	; 0x34
 800a10c:	e001      	b.n	800a112 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a10e:	2300      	movs	r3, #0
 800a110:	637b      	str	r3, [r7, #52]	; 0x34
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3738      	adds	r7, #56	; 0x38
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10d      	bne.n	800a160 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d14d      	bne.n	800a1e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 ff01 	bl	800af58 <xTaskPriorityDisinherit>
 800a156:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	609a      	str	r2, [r3, #8]
 800a15e:	e043      	b.n	800a1e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d119      	bne.n	800a19a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6858      	ldr	r0, [r3, #4]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	461a      	mov	r2, r3
 800a170:	68b9      	ldr	r1, [r7, #8]
 800a172:	f001 ff39 	bl	800bfe8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	441a      	add	r2, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d32b      	bcc.n	800a1e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	605a      	str	r2, [r3, #4]
 800a198:	e026      	b.n	800a1e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	68d8      	ldr	r0, [r3, #12]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	f001 ff1f 	bl	800bfe8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	68da      	ldr	r2, [r3, #12]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	425b      	negs	r3, r3
 800a1b4:	441a      	add	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d207      	bcs.n	800a1d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	425b      	negs	r3, r3
 800a1d0:	441a      	add	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d105      	bne.n	800a1e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d002      	beq.n	800a1e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1f0:	697b      	ldr	r3, [r7, #20]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3718      	adds	r7, #24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d018      	beq.n	800a23e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68da      	ldr	r2, [r3, #12]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a214:	441a      	add	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	429a      	cmp	r2, r3
 800a224:	d303      	bcc.n	800a22e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68d9      	ldr	r1, [r3, #12]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	461a      	mov	r2, r3
 800a238:	6838      	ldr	r0, [r7, #0]
 800a23a:	f001 fed5 	bl	800bfe8 <memcpy>
	}
}
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a24e:	f001 f895 	bl	800b37c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a258:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a25a:	e011      	b.n	800a280 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	d012      	beq.n	800a28a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3324      	adds	r3, #36	; 0x24
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 fc9f 	bl	800abac <xTaskRemoveFromEventList>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a274:	f000 fd72 	bl	800ad5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a284:	2b00      	cmp	r3, #0
 800a286:	dce9      	bgt.n	800a25c <prvUnlockQueue+0x16>
 800a288:	e000      	b.n	800a28c <prvUnlockQueue+0x46>
					break;
 800a28a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	22ff      	movs	r2, #255	; 0xff
 800a290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a294:	f001 f8a0 	bl	800b3d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a298:	f001 f870 	bl	800b37c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2a4:	e011      	b.n	800a2ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d012      	beq.n	800a2d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3310      	adds	r3, #16
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fc7a 	bl	800abac <xTaskRemoveFromEventList>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2be:	f000 fd4d 	bl	800ad5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2c2:	7bbb      	ldrb	r3, [r7, #14]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	dce9      	bgt.n	800a2a6 <prvUnlockQueue+0x60>
 800a2d2:	e000      	b.n	800a2d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	22ff      	movs	r2, #255	; 0xff
 800a2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2de:	f001 f87b 	bl	800b3d8 <vPortExitCritical>
}
 800a2e2:	bf00      	nop
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2f2:	f001 f843 	bl	800b37c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2fe:	2301      	movs	r3, #1
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	e001      	b.n	800a308 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a304:	2300      	movs	r3, #0
 800a306:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a308:	f001 f866 	bl	800b3d8 <vPortExitCritical>

	return xReturn;
 800a30c:	68fb      	ldr	r3, [r7, #12]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a31e:	f001 f82d 	bl	800b37c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d102      	bne.n	800a334 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a32e:	2301      	movs	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	e001      	b.n	800a338 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a334:	2300      	movs	r3, #0
 800a336:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a338:	f001 f84e 	bl	800b3d8 <vPortExitCritical>

	return xReturn;
 800a33c:	68fb      	ldr	r3, [r7, #12]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a346:	b580      	push	{r7, lr}
 800a348:	b08e      	sub	sp, #56	; 0x38
 800a34a:	af04      	add	r7, sp, #16
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	607a      	str	r2, [r7, #4]
 800a352:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a356:	2b00      	cmp	r3, #0
 800a358:	d109      	bne.n	800a36e <xTaskCreateStatic+0x28>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	623b      	str	r3, [r7, #32]
 800a36c:	e7fe      	b.n	800a36c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <xTaskCreateStatic+0x42>
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	61fb      	str	r3, [r7, #28]
 800a386:	e7fe      	b.n	800a386 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a388:	2358      	movs	r3, #88	; 0x58
 800a38a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	2b58      	cmp	r3, #88	; 0x58
 800a390:	d009      	beq.n	800a3a6 <xTaskCreateStatic+0x60>
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	61bb      	str	r3, [r7, #24]
 800a3a4:	e7fe      	b.n	800a3a4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d01e      	beq.n	800a3ec <xTaskCreateStatic+0xa6>
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d01b      	beq.n	800a3ec <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9303      	str	r3, [sp, #12]
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	f107 0314 	add.w	r3, r7, #20
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	68b9      	ldr	r1, [r7, #8]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 f850 	bl	800a484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3e6:	f000 f8df 	bl	800a5a8 <prvAddNewTaskToReadyList>
 800a3ea:	e001      	b.n	800a3f0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a3f0:	697b      	ldr	r3, [r7, #20]
	}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3728      	adds	r7, #40	; 0x28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b08c      	sub	sp, #48	; 0x30
 800a3fe:	af04      	add	r7, sp, #16
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 f8ce 	bl	800b5b0 <pvPortMalloc>
 800a414:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00e      	beq.n	800a43a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a41c:	2058      	movs	r0, #88	; 0x58
 800a41e:	f001 f8c7 	bl	800b5b0 <pvPortMalloc>
 800a422:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	631a      	str	r2, [r3, #48]	; 0x30
 800a430:	e005      	b.n	800a43e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a432:	6978      	ldr	r0, [r7, #20]
 800a434:	f001 f982 	bl	800b73c <vPortFree>
 800a438:	e001      	b.n	800a43e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d017      	beq.n	800a474 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a44c:	88fa      	ldrh	r2, [r7, #6]
 800a44e:	2300      	movs	r3, #0
 800a450:	9303      	str	r3, [sp, #12]
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	9302      	str	r3, [sp, #8]
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 f80e 	bl	800a484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a468:	69f8      	ldr	r0, [r7, #28]
 800a46a:	f000 f89d 	bl	800a5a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a46e:	2301      	movs	r3, #1
 800a470:	61bb      	str	r3, [r7, #24]
 800a472:	e002      	b.n	800a47a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a474:	f04f 33ff 	mov.w	r3, #4294967295
 800a478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a47a:	69bb      	ldr	r3, [r7, #24]
	}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	461a      	mov	r2, r3
 800a49c:	21a5      	movs	r1, #165	; 0xa5
 800a49e:	f001 fdae 	bl	800bffe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	f023 0307 	bic.w	r3, r3, #7
 800a4ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	f003 0307 	and.w	r3, r3, #7
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d009      	beq.n	800a4da <prvInitialiseNewTask+0x56>
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	e7fe      	b.n	800a4d8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01f      	beq.n	800a520 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	e012      	b.n	800a50c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	7819      	ldrb	r1, [r3, #0]
 800a4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	3334      	adds	r3, #52	; 0x34
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	4413      	add	r3, r2
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d006      	beq.n	800a514 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	3301      	adds	r3, #1
 800a50a:	61fb      	str	r3, [r7, #28]
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	2b0f      	cmp	r3, #15
 800a510:	d9e9      	bls.n	800a4e6 <prvInitialiseNewTask+0x62>
 800a512:	e000      	b.n	800a516 <prvInitialiseNewTask+0x92>
			{
				break;
 800a514:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a51e:	e003      	b.n	800a528 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	2b06      	cmp	r3, #6
 800a52c:	d901      	bls.n	800a532 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a52e:	2306      	movs	r3, #6
 800a530:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a536:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	2200      	movs	r2, #0
 800a542:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	3304      	adds	r3, #4
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff f937 	bl	80097bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	3318      	adds	r3, #24
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff f932 	bl	80097bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a55c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	f1c3 0207 	rsb	r2, r3, #7
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a56c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	2200      	movs	r2, #0
 800a572:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	2200      	movs	r2, #0
 800a578:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	68f9      	ldr	r1, [r7, #12]
 800a586:	69b8      	ldr	r0, [r7, #24]
 800a588:	f000 fdd0 	bl	800b12c <pxPortInitialiseStack>
 800a58c:	4602      	mov	r2, r0
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a59e:	bf00      	nop
 800a5a0:	3720      	adds	r7, #32
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5b0:	f000 fee4 	bl	800b37c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5b4:	4b2a      	ldr	r3, [pc, #168]	; (800a660 <prvAddNewTaskToReadyList+0xb8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	4a29      	ldr	r2, [pc, #164]	; (800a660 <prvAddNewTaskToReadyList+0xb8>)
 800a5bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5be:	4b29      	ldr	r3, [pc, #164]	; (800a664 <prvAddNewTaskToReadyList+0xbc>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d109      	bne.n	800a5da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5c6:	4a27      	ldr	r2, [pc, #156]	; (800a664 <prvAddNewTaskToReadyList+0xbc>)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5cc:	4b24      	ldr	r3, [pc, #144]	; (800a660 <prvAddNewTaskToReadyList+0xb8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d110      	bne.n	800a5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5d4:	f000 fbe8 	bl	800ada8 <prvInitialiseTaskLists>
 800a5d8:	e00d      	b.n	800a5f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5da:	4b23      	ldr	r3, [pc, #140]	; (800a668 <prvAddNewTaskToReadyList+0xc0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d109      	bne.n	800a5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a5e2:	4b20      	ldr	r3, [pc, #128]	; (800a664 <prvAddNewTaskToReadyList+0xbc>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d802      	bhi.n	800a5f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a5f0:	4a1c      	ldr	r2, [pc, #112]	; (800a664 <prvAddNewTaskToReadyList+0xbc>)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a5f6:	4b1d      	ldr	r3, [pc, #116]	; (800a66c <prvAddNewTaskToReadyList+0xc4>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	4a1b      	ldr	r2, [pc, #108]	; (800a66c <prvAddNewTaskToReadyList+0xc4>)
 800a5fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a604:	2201      	movs	r2, #1
 800a606:	409a      	lsls	r2, r3
 800a608:	4b19      	ldr	r3, [pc, #100]	; (800a670 <prvAddNewTaskToReadyList+0xc8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	4a18      	ldr	r2, [pc, #96]	; (800a670 <prvAddNewTaskToReadyList+0xc8>)
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4a15      	ldr	r2, [pc, #84]	; (800a674 <prvAddNewTaskToReadyList+0xcc>)
 800a620:	441a      	add	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3304      	adds	r3, #4
 800a626:	4619      	mov	r1, r3
 800a628:	4610      	mov	r0, r2
 800a62a:	f7ff f8d4 	bl	80097d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a62e:	f000 fed3 	bl	800b3d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <prvAddNewTaskToReadyList+0xc0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00e      	beq.n	800a658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a63a:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <prvAddNewTaskToReadyList+0xbc>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	429a      	cmp	r2, r3
 800a646:	d207      	bcs.n	800a658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a648:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <prvAddNewTaskToReadyList+0xd0>)
 800a64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a64e:	601a      	str	r2, [r3, #0]
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20000414 	.word	0x20000414
 800a664:	20000314 	.word	0x20000314
 800a668:	20000420 	.word	0x20000420
 800a66c:	20000430 	.word	0x20000430
 800a670:	2000041c 	.word	0x2000041c
 800a674:	20000318 	.word	0x20000318
 800a678:	e000ed04 	.word	0xe000ed04

0800a67c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a684:	2300      	movs	r3, #0
 800a686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d016      	beq.n	800a6bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a68e:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <vTaskDelay+0x60>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <vTaskDelay+0x2e>
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	60bb      	str	r3, [r7, #8]
 800a6a8:	e7fe      	b.n	800a6a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a6aa:	f000 f879 	bl	800a7a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fcd5 	bl	800b060 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6b6:	f000 f881 	bl	800a7bc <xTaskResumeAll>
 800a6ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d107      	bne.n	800a6d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a6c2:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <vTaskDelay+0x64>)
 800a6c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6d2:	bf00      	nop
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	2000043c 	.word	0x2000043c
 800a6e0:	e000ed04 	.word	0xe000ed04

0800a6e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08a      	sub	sp, #40	; 0x28
 800a6e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a6f2:	463a      	mov	r2, r7
 800a6f4:	1d39      	adds	r1, r7, #4
 800a6f6:	f107 0308 	add.w	r3, r7, #8
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7f5 ff12 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	9202      	str	r2, [sp, #8]
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	2300      	movs	r3, #0
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	2300      	movs	r3, #0
 800a710:	460a      	mov	r2, r1
 800a712:	491d      	ldr	r1, [pc, #116]	; (800a788 <vTaskStartScheduler+0xa4>)
 800a714:	481d      	ldr	r0, [pc, #116]	; (800a78c <vTaskStartScheduler+0xa8>)
 800a716:	f7ff fe16 	bl	800a346 <xTaskCreateStatic>
 800a71a:	4602      	mov	r2, r0
 800a71c:	4b1c      	ldr	r3, [pc, #112]	; (800a790 <vTaskStartScheduler+0xac>)
 800a71e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a720:	4b1b      	ldr	r3, [pc, #108]	; (800a790 <vTaskStartScheduler+0xac>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a728:	2301      	movs	r3, #1
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e001      	b.n	800a732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a72e:	2300      	movs	r3, #0
 800a730:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d115      	bne.n	800a764 <vTaskStartScheduler+0x80>
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a74a:	4b12      	ldr	r3, [pc, #72]	; (800a794 <vTaskStartScheduler+0xb0>)
 800a74c:	f04f 32ff 	mov.w	r2, #4294967295
 800a750:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a752:	4b11      	ldr	r3, [pc, #68]	; (800a798 <vTaskStartScheduler+0xb4>)
 800a754:	2201      	movs	r2, #1
 800a756:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a758:	4b10      	ldr	r3, [pc, #64]	; (800a79c <vTaskStartScheduler+0xb8>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a75e:	f000 fd6f 	bl	800b240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a762:	e00d      	b.n	800a780 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d109      	bne.n	800a780 <vTaskStartScheduler+0x9c>
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	e7fe      	b.n	800a77e <vTaskStartScheduler+0x9a>
}
 800a780:	bf00      	nop
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	0800c200 	.word	0x0800c200
 800a78c:	0800ad75 	.word	0x0800ad75
 800a790:	20000438 	.word	0x20000438
 800a794:	20000434 	.word	0x20000434
 800a798:	20000420 	.word	0x20000420
 800a79c:	20000418 	.word	0x20000418

0800a7a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a7a4:	4b04      	ldr	r3, [pc, #16]	; (800a7b8 <vTaskSuspendAll+0x18>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	4a03      	ldr	r2, [pc, #12]	; (800a7b8 <vTaskSuspendAll+0x18>)
 800a7ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a7ae:	bf00      	nop
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	2000043c 	.word	0x2000043c

0800a7bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7ca:	4b41      	ldr	r3, [pc, #260]	; (800a8d0 <xTaskResumeAll+0x114>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d109      	bne.n	800a7e6 <xTaskResumeAll+0x2a>
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	e7fe      	b.n	800a7e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a7e6:	f000 fdc9 	bl	800b37c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a7ea:	4b39      	ldr	r3, [pc, #228]	; (800a8d0 <xTaskResumeAll+0x114>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	4a37      	ldr	r2, [pc, #220]	; (800a8d0 <xTaskResumeAll+0x114>)
 800a7f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7f4:	4b36      	ldr	r3, [pc, #216]	; (800a8d0 <xTaskResumeAll+0x114>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d161      	bne.n	800a8c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7fc:	4b35      	ldr	r3, [pc, #212]	; (800a8d4 <xTaskResumeAll+0x118>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d05d      	beq.n	800a8c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a804:	e02e      	b.n	800a864 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a806:	4b34      	ldr	r3, [pc, #208]	; (800a8d8 <xTaskResumeAll+0x11c>)
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3318      	adds	r3, #24
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff f83c 	bl	8009890 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7ff f837 	bl	8009890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a826:	2201      	movs	r2, #1
 800a828:	409a      	lsls	r2, r3
 800a82a:	4b2c      	ldr	r3, [pc, #176]	; (800a8dc <xTaskResumeAll+0x120>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4313      	orrs	r3, r2
 800a830:	4a2a      	ldr	r2, [pc, #168]	; (800a8dc <xTaskResumeAll+0x120>)
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a838:	4613      	mov	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4413      	add	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4a27      	ldr	r2, [pc, #156]	; (800a8e0 <xTaskResumeAll+0x124>)
 800a842:	441a      	add	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3304      	adds	r3, #4
 800a848:	4619      	mov	r1, r3
 800a84a:	4610      	mov	r0, r2
 800a84c:	f7fe ffc3 	bl	80097d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a854:	4b23      	ldr	r3, [pc, #140]	; (800a8e4 <xTaskResumeAll+0x128>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d302      	bcc.n	800a864 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a85e:	4b22      	ldr	r3, [pc, #136]	; (800a8e8 <xTaskResumeAll+0x12c>)
 800a860:	2201      	movs	r2, #1
 800a862:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a864:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <xTaskResumeAll+0x11c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1cc      	bne.n	800a806 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a872:	f000 fb33 	bl	800aedc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a876:	4b1d      	ldr	r3, [pc, #116]	; (800a8ec <xTaskResumeAll+0x130>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d010      	beq.n	800a8a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a882:	f000 f837 	bl	800a8f4 <xTaskIncrementTick>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a88c:	4b16      	ldr	r3, [pc, #88]	; (800a8e8 <xTaskResumeAll+0x12c>)
 800a88e:	2201      	movs	r2, #1
 800a890:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	3b01      	subs	r3, #1
 800a896:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f1      	bne.n	800a882 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a89e:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <xTaskResumeAll+0x130>)
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8a4:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <xTaskResumeAll+0x12c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d009      	beq.n	800a8c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8b0:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <xTaskResumeAll+0x134>)
 800a8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8c0:	f000 fd8a 	bl	800b3d8 <vPortExitCritical>

	return xAlreadyYielded;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	2000043c 	.word	0x2000043c
 800a8d4:	20000414 	.word	0x20000414
 800a8d8:	200003d4 	.word	0x200003d4
 800a8dc:	2000041c 	.word	0x2000041c
 800a8e0:	20000318 	.word	0x20000318
 800a8e4:	20000314 	.word	0x20000314
 800a8e8:	20000428 	.word	0x20000428
 800a8ec:	20000424 	.word	0x20000424
 800a8f0:	e000ed04 	.word	0xe000ed04

0800a8f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8fe:	4b4e      	ldr	r3, [pc, #312]	; (800aa38 <xTaskIncrementTick+0x144>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	f040 8087 	bne.w	800aa16 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a908:	4b4c      	ldr	r3, [pc, #304]	; (800aa3c <xTaskIncrementTick+0x148>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3301      	adds	r3, #1
 800a90e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a910:	4a4a      	ldr	r2, [pc, #296]	; (800aa3c <xTaskIncrementTick+0x148>)
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d11f      	bne.n	800a95c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a91c:	4b48      	ldr	r3, [pc, #288]	; (800aa40 <xTaskIncrementTick+0x14c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d009      	beq.n	800a93a <xTaskIncrementTick+0x46>
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	603b      	str	r3, [r7, #0]
 800a938:	e7fe      	b.n	800a938 <xTaskIncrementTick+0x44>
 800a93a:	4b41      	ldr	r3, [pc, #260]	; (800aa40 <xTaskIncrementTick+0x14c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]
 800a940:	4b40      	ldr	r3, [pc, #256]	; (800aa44 <xTaskIncrementTick+0x150>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a3e      	ldr	r2, [pc, #248]	; (800aa40 <xTaskIncrementTick+0x14c>)
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	4a3e      	ldr	r2, [pc, #248]	; (800aa44 <xTaskIncrementTick+0x150>)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	4b3e      	ldr	r3, [pc, #248]	; (800aa48 <xTaskIncrementTick+0x154>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	4a3c      	ldr	r2, [pc, #240]	; (800aa48 <xTaskIncrementTick+0x154>)
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	f000 fac0 	bl	800aedc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a95c:	4b3b      	ldr	r3, [pc, #236]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	429a      	cmp	r2, r3
 800a964:	d348      	bcc.n	800a9f8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a966:	4b36      	ldr	r3, [pc, #216]	; (800aa40 <xTaskIncrementTick+0x14c>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d104      	bne.n	800a97a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a970:	4b36      	ldr	r3, [pc, #216]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a972:	f04f 32ff 	mov.w	r2, #4294967295
 800a976:	601a      	str	r2, [r3, #0]
					break;
 800a978:	e03e      	b.n	800a9f8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a97a:	4b31      	ldr	r3, [pc, #196]	; (800aa40 <xTaskIncrementTick+0x14c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d203      	bcs.n	800a99a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a992:	4a2e      	ldr	r2, [pc, #184]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a998:	e02e      	b.n	800a9f8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	3304      	adds	r3, #4
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe ff76 	bl	8009890 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d004      	beq.n	800a9b6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	3318      	adds	r3, #24
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe ff6d 	bl	8009890 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	409a      	lsls	r2, r3
 800a9be:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	4a22      	ldr	r2, [pc, #136]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4a1f      	ldr	r2, [pc, #124]	; (800aa54 <xTaskIncrementTick+0x160>)
 800a9d6:	441a      	add	r2, r3
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f7fe fef9 	bl	80097d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	4b1b      	ldr	r3, [pc, #108]	; (800aa58 <xTaskIncrementTick+0x164>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d3b9      	bcc.n	800a966 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9f6:	e7b6      	b.n	800a966 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9f8:	4b17      	ldr	r3, [pc, #92]	; (800aa58 <xTaskIncrementTick+0x164>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fe:	4915      	ldr	r1, [pc, #84]	; (800aa54 <xTaskIncrementTick+0x160>)
 800aa00:	4613      	mov	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	440b      	add	r3, r1
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d907      	bls.n	800aa20 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800aa10:	2301      	movs	r3, #1
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	e004      	b.n	800aa20 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa16:	4b11      	ldr	r3, [pc, #68]	; (800aa5c <xTaskIncrementTick+0x168>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	4a0f      	ldr	r2, [pc, #60]	; (800aa5c <xTaskIncrementTick+0x168>)
 800aa1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa20:	4b0f      	ldr	r3, [pc, #60]	; (800aa60 <xTaskIncrementTick+0x16c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa2c:	697b      	ldr	r3, [r7, #20]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	2000043c 	.word	0x2000043c
 800aa3c:	20000418 	.word	0x20000418
 800aa40:	200003cc 	.word	0x200003cc
 800aa44:	200003d0 	.word	0x200003d0
 800aa48:	2000042c 	.word	0x2000042c
 800aa4c:	20000434 	.word	0x20000434
 800aa50:	2000041c 	.word	0x2000041c
 800aa54:	20000318 	.word	0x20000318
 800aa58:	20000314 	.word	0x20000314
 800aa5c:	20000424 	.word	0x20000424
 800aa60:	20000428 	.word	0x20000428

0800aa64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa6a:	4b39      	ldr	r3, [pc, #228]	; (800ab50 <vTaskSwitchContext+0xec>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa72:	4b38      	ldr	r3, [pc, #224]	; (800ab54 <vTaskSwitchContext+0xf0>)
 800aa74:	2201      	movs	r2, #1
 800aa76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa78:	e065      	b.n	800ab46 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800aa7a:	4b36      	ldr	r3, [pc, #216]	; (800ab54 <vTaskSwitchContext+0xf0>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800aa80:	4b35      	ldr	r3, [pc, #212]	; (800ab58 <vTaskSwitchContext+0xf4>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	61fb      	str	r3, [r7, #28]
 800aa88:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800aa8c:	61bb      	str	r3, [r7, #24]
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d111      	bne.n	800aabc <vTaskSwitchContext+0x58>
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69ba      	ldr	r2, [r7, #24]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d10b      	bne.n	800aabc <vTaskSwitchContext+0x58>
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	69ba      	ldr	r2, [r7, #24]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d105      	bne.n	800aabc <vTaskSwitchContext+0x58>
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	330c      	adds	r3, #12
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69ba      	ldr	r2, [r7, #24]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d008      	beq.n	800aace <vTaskSwitchContext+0x6a>
 800aabc:	4b26      	ldr	r3, [pc, #152]	; (800ab58 <vTaskSwitchContext+0xf4>)
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	4b25      	ldr	r3, [pc, #148]	; (800ab58 <vTaskSwitchContext+0xf4>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3334      	adds	r3, #52	; 0x34
 800aac6:	4619      	mov	r1, r3
 800aac8:	4610      	mov	r0, r2
 800aaca:	f7f5 fd18 	bl	80004fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aace:	4b23      	ldr	r3, [pc, #140]	; (800ab5c <vTaskSwitchContext+0xf8>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	fab3 f383 	clz	r3, r3
 800aada:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aadc:	7afb      	ldrb	r3, [r7, #11]
 800aade:	f1c3 031f 	rsb	r3, r3, #31
 800aae2:	617b      	str	r3, [r7, #20]
 800aae4:	491e      	ldr	r1, [pc, #120]	; (800ab60 <vTaskSwitchContext+0xfc>)
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d109      	bne.n	800ab0c <vTaskSwitchContext+0xa8>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	607b      	str	r3, [r7, #4]
 800ab0a:	e7fe      	b.n	800ab0a <vTaskSwitchContext+0xa6>
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4a12      	ldr	r2, [pc, #72]	; (800ab60 <vTaskSwitchContext+0xfc>)
 800ab18:	4413      	add	r3, r2
 800ab1a:	613b      	str	r3, [r7, #16]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	605a      	str	r2, [r3, #4]
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d104      	bne.n	800ab3c <vTaskSwitchContext+0xd8>
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	605a      	str	r2, [r3, #4]
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	4a05      	ldr	r2, [pc, #20]	; (800ab58 <vTaskSwitchContext+0xf4>)
 800ab44:	6013      	str	r3, [r2, #0]
}
 800ab46:	bf00      	nop
 800ab48:	3720      	adds	r7, #32
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	2000043c 	.word	0x2000043c
 800ab54:	20000428 	.word	0x20000428
 800ab58:	20000314 	.word	0x20000314
 800ab5c:	2000041c 	.word	0x2000041c
 800ab60:	20000318 	.word	0x20000318

0800ab64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d109      	bne.n	800ab88 <vTaskPlaceOnEventList+0x24>
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	e7fe      	b.n	800ab86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab88:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <vTaskPlaceOnEventList+0x44>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3318      	adds	r3, #24
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7fe fe44 	bl	800981e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab96:	2101      	movs	r1, #1
 800ab98:	6838      	ldr	r0, [r7, #0]
 800ab9a:	f000 fa61 	bl	800b060 <prvAddCurrentTaskToDelayedList>
}
 800ab9e:	bf00      	nop
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20000314 	.word	0x20000314

0800abac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d109      	bne.n	800abd6 <xTaskRemoveFromEventList+0x2a>
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	e7fe      	b.n	800abd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	3318      	adds	r3, #24
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fe58 	bl	8009890 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abe0:	4b1d      	ldr	r3, [pc, #116]	; (800ac58 <xTaskRemoveFromEventList+0xac>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d11c      	bne.n	800ac22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	3304      	adds	r3, #4
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe fe4f 	bl	8009890 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf6:	2201      	movs	r2, #1
 800abf8:	409a      	lsls	r2, r3
 800abfa:	4b18      	ldr	r3, [pc, #96]	; (800ac5c <xTaskRemoveFromEventList+0xb0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	4a16      	ldr	r2, [pc, #88]	; (800ac5c <xTaskRemoveFromEventList+0xb0>)
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4a13      	ldr	r2, [pc, #76]	; (800ac60 <xTaskRemoveFromEventList+0xb4>)
 800ac12:	441a      	add	r2, r3
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	3304      	adds	r3, #4
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	f7fe fddb 	bl	80097d6 <vListInsertEnd>
 800ac20:	e005      	b.n	800ac2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	3318      	adds	r3, #24
 800ac26:	4619      	mov	r1, r3
 800ac28:	480e      	ldr	r0, [pc, #56]	; (800ac64 <xTaskRemoveFromEventList+0xb8>)
 800ac2a:	f7fe fdd4 	bl	80097d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac32:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <xTaskRemoveFromEventList+0xbc>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d905      	bls.n	800ac48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac40:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <xTaskRemoveFromEventList+0xc0>)
 800ac42:	2201      	movs	r2, #1
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	e001      	b.n	800ac4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac4c:	697b      	ldr	r3, [r7, #20]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000043c 	.word	0x2000043c
 800ac5c:	2000041c 	.word	0x2000041c
 800ac60:	20000318 	.word	0x20000318
 800ac64:	200003d4 	.word	0x200003d4
 800ac68:	20000314 	.word	0x20000314
 800ac6c:	20000428 	.word	0x20000428

0800ac70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac78:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <vTaskInternalSetTimeOutState+0x24>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac80:	4b05      	ldr	r3, [pc, #20]	; (800ac98 <vTaskInternalSetTimeOutState+0x28>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	605a      	str	r2, [r3, #4]
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	2000042c 	.word	0x2000042c
 800ac98:	20000418 	.word	0x20000418

0800ac9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d109      	bne.n	800acc0 <xTaskCheckForTimeOut+0x24>
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	613b      	str	r3, [r7, #16]
 800acbe:	e7fe      	b.n	800acbe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <xTaskCheckForTimeOut+0x3e>
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	e7fe      	b.n	800acd8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800acda:	f000 fb4f 	bl	800b37c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acde:	4b1d      	ldr	r3, [pc, #116]	; (800ad54 <xTaskCheckForTimeOut+0xb8>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf6:	d102      	bne.n	800acfe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	61fb      	str	r3, [r7, #28]
 800acfc:	e023      	b.n	800ad46 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	4b15      	ldr	r3, [pc, #84]	; (800ad58 <xTaskCheckForTimeOut+0xbc>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d007      	beq.n	800ad1a <xTaskCheckForTimeOut+0x7e>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d302      	bcc.n	800ad1a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	61fb      	str	r3, [r7, #28]
 800ad18:	e015      	b.n	800ad46 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d20b      	bcs.n	800ad3c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	1ad2      	subs	r2, r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff ff9d 	bl	800ac70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad36:	2300      	movs	r3, #0
 800ad38:	61fb      	str	r3, [r7, #28]
 800ad3a:	e004      	b.n	800ad46 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad42:	2301      	movs	r3, #1
 800ad44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad46:	f000 fb47 	bl	800b3d8 <vPortExitCritical>

	return xReturn;
 800ad4a:	69fb      	ldr	r3, [r7, #28]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3720      	adds	r7, #32
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	20000418 	.word	0x20000418
 800ad58:	2000042c 	.word	0x2000042c

0800ad5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad60:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <vTaskMissedYield+0x14>)
 800ad62:	2201      	movs	r2, #1
 800ad64:	601a      	str	r2, [r3, #0]
}
 800ad66:	bf00      	nop
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	20000428 	.word	0x20000428

0800ad74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad7c:	f000 f854 	bl	800ae28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad80:	4b07      	ldr	r3, [pc, #28]	; (800ada0 <prvIdleTask+0x2c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d907      	bls.n	800ad98 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ad88:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <prvIdleTask+0x30>)
 800ad8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ad98:	f7f5 fbaa 	bl	80004f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ad9c:	e7ee      	b.n	800ad7c <prvIdleTask+0x8>
 800ad9e:	bf00      	nop
 800ada0:	20000318 	.word	0x20000318
 800ada4:	e000ed04 	.word	0xe000ed04

0800ada8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adae:	2300      	movs	r3, #0
 800adb0:	607b      	str	r3, [r7, #4]
 800adb2:	e00c      	b.n	800adce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4a12      	ldr	r2, [pc, #72]	; (800ae08 <prvInitialiseTaskLists+0x60>)
 800adc0:	4413      	add	r3, r2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fcda 	bl	800977c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3301      	adds	r3, #1
 800adcc:	607b      	str	r3, [r7, #4]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b06      	cmp	r3, #6
 800add2:	d9ef      	bls.n	800adb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800add4:	480d      	ldr	r0, [pc, #52]	; (800ae0c <prvInitialiseTaskLists+0x64>)
 800add6:	f7fe fcd1 	bl	800977c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adda:	480d      	ldr	r0, [pc, #52]	; (800ae10 <prvInitialiseTaskLists+0x68>)
 800addc:	f7fe fcce 	bl	800977c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ade0:	480c      	ldr	r0, [pc, #48]	; (800ae14 <prvInitialiseTaskLists+0x6c>)
 800ade2:	f7fe fccb 	bl	800977c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ade6:	480c      	ldr	r0, [pc, #48]	; (800ae18 <prvInitialiseTaskLists+0x70>)
 800ade8:	f7fe fcc8 	bl	800977c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800adec:	480b      	ldr	r0, [pc, #44]	; (800ae1c <prvInitialiseTaskLists+0x74>)
 800adee:	f7fe fcc5 	bl	800977c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adf2:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <prvInitialiseTaskLists+0x78>)
 800adf4:	4a05      	ldr	r2, [pc, #20]	; (800ae0c <prvInitialiseTaskLists+0x64>)
 800adf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adf8:	4b0a      	ldr	r3, [pc, #40]	; (800ae24 <prvInitialiseTaskLists+0x7c>)
 800adfa:	4a05      	ldr	r2, [pc, #20]	; (800ae10 <prvInitialiseTaskLists+0x68>)
 800adfc:	601a      	str	r2, [r3, #0]
}
 800adfe:	bf00      	nop
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	20000318 	.word	0x20000318
 800ae0c:	200003a4 	.word	0x200003a4
 800ae10:	200003b8 	.word	0x200003b8
 800ae14:	200003d4 	.word	0x200003d4
 800ae18:	200003e8 	.word	0x200003e8
 800ae1c:	20000400 	.word	0x20000400
 800ae20:	200003cc 	.word	0x200003cc
 800ae24:	200003d0 	.word	0x200003d0

0800ae28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae2e:	e019      	b.n	800ae64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae30:	f000 faa4 	bl	800b37c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae34:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <prvCheckTasksWaitingTermination+0x4c>)
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fd25 	bl	8009890 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae46:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <prvCheckTasksWaitingTermination+0x50>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	4a0a      	ldr	r2, [pc, #40]	; (800ae78 <prvCheckTasksWaitingTermination+0x50>)
 800ae4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae50:	4b0a      	ldr	r3, [pc, #40]	; (800ae7c <prvCheckTasksWaitingTermination+0x54>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	4a09      	ldr	r2, [pc, #36]	; (800ae7c <prvCheckTasksWaitingTermination+0x54>)
 800ae58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae5a:	f000 fabd 	bl	800b3d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f80e 	bl	800ae80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae64:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <prvCheckTasksWaitingTermination+0x54>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1e1      	bne.n	800ae30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	200003e8 	.word	0x200003e8
 800ae78:	20000414 	.word	0x20000414
 800ae7c:	200003fc 	.word	0x200003fc

0800ae80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d108      	bne.n	800aea4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fc50 	bl	800b73c <vPortFree>
				vPortFree( pxTCB );
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fc4d 	bl	800b73c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aea2:	e017      	b.n	800aed4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d103      	bne.n	800aeb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fc44 	bl	800b73c <vPortFree>
	}
 800aeb4:	e00e      	b.n	800aed4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d009      	beq.n	800aed4 <prvDeleteTCB+0x54>
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	e7fe      	b.n	800aed2 <prvDeleteTCB+0x52>
	}
 800aed4:	bf00      	nop
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <prvResetNextTaskUnblockTime+0x38>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d104      	bne.n	800aef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aeec:	4b0a      	ldr	r3, [pc, #40]	; (800af18 <prvResetNextTaskUnblockTime+0x3c>)
 800aeee:	f04f 32ff 	mov.w	r2, #4294967295
 800aef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aef4:	e008      	b.n	800af08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef6:	4b07      	ldr	r3, [pc, #28]	; (800af14 <prvResetNextTaskUnblockTime+0x38>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	4a04      	ldr	r2, [pc, #16]	; (800af18 <prvResetNextTaskUnblockTime+0x3c>)
 800af06:	6013      	str	r3, [r2, #0]
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	200003cc 	.word	0x200003cc
 800af18:	20000434 	.word	0x20000434

0800af1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af22:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <xTaskGetSchedulerState+0x34>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d102      	bne.n	800af30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af2a:	2301      	movs	r3, #1
 800af2c:	607b      	str	r3, [r7, #4]
 800af2e:	e008      	b.n	800af42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af30:	4b08      	ldr	r3, [pc, #32]	; (800af54 <xTaskGetSchedulerState+0x38>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d102      	bne.n	800af3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af38:	2302      	movs	r3, #2
 800af3a:	607b      	str	r3, [r7, #4]
 800af3c:	e001      	b.n	800af42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af3e:	2300      	movs	r3, #0
 800af40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af42:	687b      	ldr	r3, [r7, #4]
	}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	20000420 	.word	0x20000420
 800af54:	2000043c 	.word	0x2000043c

0800af58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af64:	2300      	movs	r3, #0
 800af66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d06c      	beq.n	800b048 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af6e:	4b39      	ldr	r3, [pc, #228]	; (800b054 <xTaskPriorityDisinherit+0xfc>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	429a      	cmp	r2, r3
 800af76:	d009      	beq.n	800af8c <xTaskPriorityDisinherit+0x34>
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	e7fe      	b.n	800af8a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af90:	2b00      	cmp	r3, #0
 800af92:	d109      	bne.n	800afa8 <xTaskPriorityDisinherit+0x50>
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	60bb      	str	r3, [r7, #8]
 800afa6:	e7fe      	b.n	800afa6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afac:	1e5a      	subs	r2, r3, #1
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afba:	429a      	cmp	r2, r3
 800afbc:	d044      	beq.n	800b048 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d140      	bne.n	800b048 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	3304      	adds	r3, #4
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fc60 	bl	8009890 <uxListRemove>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d115      	bne.n	800b002 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afda:	491f      	ldr	r1, [pc, #124]	; (800b058 <xTaskPriorityDisinherit+0x100>)
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	440b      	add	r3, r1
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <xTaskPriorityDisinherit+0xaa>
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	2201      	movs	r2, #1
 800aff2:	fa02 f303 	lsl.w	r3, r2, r3
 800aff6:	43da      	mvns	r2, r3
 800aff8:	4b18      	ldr	r3, [pc, #96]	; (800b05c <xTaskPriorityDisinherit+0x104>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4013      	ands	r3, r2
 800affe:	4a17      	ldr	r2, [pc, #92]	; (800b05c <xTaskPriorityDisinherit+0x104>)
 800b000:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	f1c3 0207 	rsb	r2, r3, #7
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01a:	2201      	movs	r2, #1
 800b01c:	409a      	lsls	r2, r3
 800b01e:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <xTaskPriorityDisinherit+0x104>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4313      	orrs	r3, r2
 800b024:	4a0d      	ldr	r2, [pc, #52]	; (800b05c <xTaskPriorityDisinherit+0x104>)
 800b026:	6013      	str	r3, [r2, #0]
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02c:	4613      	mov	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4a08      	ldr	r2, [pc, #32]	; (800b058 <xTaskPriorityDisinherit+0x100>)
 800b036:	441a      	add	r2, r3
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	3304      	adds	r3, #4
 800b03c:	4619      	mov	r1, r3
 800b03e:	4610      	mov	r0, r2
 800b040:	f7fe fbc9 	bl	80097d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b044:	2301      	movs	r3, #1
 800b046:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b048:	697b      	ldr	r3, [r7, #20]
	}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20000314 	.word	0x20000314
 800b058:	20000318 	.word	0x20000318
 800b05c:	2000041c 	.word	0x2000041c

0800b060 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b06a:	4b29      	ldr	r3, [pc, #164]	; (800b110 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b070:	4b28      	ldr	r3, [pc, #160]	; (800b114 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3304      	adds	r3, #4
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe fc0a 	bl	8009890 <uxListRemove>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10b      	bne.n	800b09a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b082:	4b24      	ldr	r3, [pc, #144]	; (800b114 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	2201      	movs	r2, #1
 800b08a:	fa02 f303 	lsl.w	r3, r2, r3
 800b08e:	43da      	mvns	r2, r3
 800b090:	4b21      	ldr	r3, [pc, #132]	; (800b118 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4013      	ands	r3, r2
 800b096:	4a20      	ldr	r2, [pc, #128]	; (800b118 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b098:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a0:	d10a      	bne.n	800b0b8 <prvAddCurrentTaskToDelayedList+0x58>
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d007      	beq.n	800b0b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0a8:	4b1a      	ldr	r3, [pc, #104]	; (800b114 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	481a      	ldr	r0, [pc, #104]	; (800b11c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b0b2:	f7fe fb90 	bl	80097d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b0b6:	e026      	b.n	800b106 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4413      	add	r3, r2
 800b0be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0c0:	4b14      	ldr	r3, [pc, #80]	; (800b114 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d209      	bcs.n	800b0e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0d0:	4b13      	ldr	r3, [pc, #76]	; (800b120 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	4b0f      	ldr	r3, [pc, #60]	; (800b114 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	4619      	mov	r1, r3
 800b0dc:	4610      	mov	r0, r2
 800b0de:	f7fe fb9e 	bl	800981e <vListInsert>
}
 800b0e2:	e010      	b.n	800b106 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0e4:	4b0f      	ldr	r3, [pc, #60]	; (800b124 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	4b0a      	ldr	r3, [pc, #40]	; (800b114 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7fe fb94 	bl	800981e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d202      	bcs.n	800b106 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b100:	4a09      	ldr	r2, [pc, #36]	; (800b128 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	6013      	str	r3, [r2, #0]
}
 800b106:	bf00      	nop
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20000418 	.word	0x20000418
 800b114:	20000314 	.word	0x20000314
 800b118:	2000041c 	.word	0x2000041c
 800b11c:	20000400 	.word	0x20000400
 800b120:	200003d0 	.word	0x200003d0
 800b124:	200003cc 	.word	0x200003cc
 800b128:	20000434 	.word	0x20000434

0800b12c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	3b04      	subs	r3, #4
 800b13c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3b04      	subs	r3, #4
 800b14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	f023 0201 	bic.w	r2, r3, #1
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3b04      	subs	r3, #4
 800b15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b15c:	4a0c      	ldr	r2, [pc, #48]	; (800b190 <pxPortInitialiseStack+0x64>)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3b14      	subs	r3, #20
 800b166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3b04      	subs	r3, #4
 800b172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f06f 0202 	mvn.w	r2, #2
 800b17a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3b20      	subs	r3, #32
 800b180:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b182:	68fb      	ldr	r3, [r7, #12]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	0800b195 	.word	0x0800b195

0800b194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b19e:	4b11      	ldr	r3, [pc, #68]	; (800b1e4 <prvTaskExitError+0x50>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a6:	d009      	beq.n	800b1bc <prvTaskExitError+0x28>
 800b1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	e7fe      	b.n	800b1ba <prvTaskExitError+0x26>
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1ce:	bf00      	nop
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0fc      	beq.n	800b1d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1d6:	bf00      	nop
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	2000002c 	.word	0x2000002c
	...

0800b1f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1f0:	4b07      	ldr	r3, [pc, #28]	; (800b210 <pxCurrentTCBConst2>)
 800b1f2:	6819      	ldr	r1, [r3, #0]
 800b1f4:	6808      	ldr	r0, [r1, #0]
 800b1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fa:	f380 8809 	msr	PSP, r0
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f04f 0000 	mov.w	r0, #0
 800b206:	f380 8811 	msr	BASEPRI, r0
 800b20a:	4770      	bx	lr
 800b20c:	f3af 8000 	nop.w

0800b210 <pxCurrentTCBConst2>:
 800b210:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop

0800b218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b218:	4808      	ldr	r0, [pc, #32]	; (800b23c <prvPortStartFirstTask+0x24>)
 800b21a:	6800      	ldr	r0, [r0, #0]
 800b21c:	6800      	ldr	r0, [r0, #0]
 800b21e:	f380 8808 	msr	MSP, r0
 800b222:	f04f 0000 	mov.w	r0, #0
 800b226:	f380 8814 	msr	CONTROL, r0
 800b22a:	b662      	cpsie	i
 800b22c:	b661      	cpsie	f
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	df00      	svc	0
 800b238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b23a:	bf00      	nop
 800b23c:	e000ed08 	.word	0xe000ed08

0800b240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b246:	4b44      	ldr	r3, [pc, #272]	; (800b358 <xPortStartScheduler+0x118>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a44      	ldr	r2, [pc, #272]	; (800b35c <xPortStartScheduler+0x11c>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d109      	bne.n	800b264 <xPortStartScheduler+0x24>
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	613b      	str	r3, [r7, #16]
 800b262:	e7fe      	b.n	800b262 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b264:	4b3c      	ldr	r3, [pc, #240]	; (800b358 <xPortStartScheduler+0x118>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a3d      	ldr	r2, [pc, #244]	; (800b360 <xPortStartScheduler+0x120>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d109      	bne.n	800b282 <xPortStartScheduler+0x42>
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	e7fe      	b.n	800b280 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b282:	4b38      	ldr	r3, [pc, #224]	; (800b364 <xPortStartScheduler+0x124>)
 800b284:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	22ff      	movs	r2, #255	; 0xff
 800b292:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b29c:	78fb      	ldrb	r3, [r7, #3]
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	4b30      	ldr	r3, [pc, #192]	; (800b368 <xPortStartScheduler+0x128>)
 800b2a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2aa:	4b30      	ldr	r3, [pc, #192]	; (800b36c <xPortStartScheduler+0x12c>)
 800b2ac:	2207      	movs	r2, #7
 800b2ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2b0:	e009      	b.n	800b2c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b2b2:	4b2e      	ldr	r3, [pc, #184]	; (800b36c <xPortStartScheduler+0x12c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	4a2c      	ldr	r2, [pc, #176]	; (800b36c <xPortStartScheduler+0x12c>)
 800b2ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2bc:	78fb      	ldrb	r3, [r7, #3]
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2c6:	78fb      	ldrb	r3, [r7, #3]
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ce:	2b80      	cmp	r3, #128	; 0x80
 800b2d0:	d0ef      	beq.n	800b2b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2d2:	4b26      	ldr	r3, [pc, #152]	; (800b36c <xPortStartScheduler+0x12c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f1c3 0307 	rsb	r3, r3, #7
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d009      	beq.n	800b2f2 <xPortStartScheduler+0xb2>
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	60bb      	str	r3, [r7, #8]
 800b2f0:	e7fe      	b.n	800b2f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2f2:	4b1e      	ldr	r3, [pc, #120]	; (800b36c <xPortStartScheduler+0x12c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	4a1c      	ldr	r2, [pc, #112]	; (800b36c <xPortStartScheduler+0x12c>)
 800b2fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2fc:	4b1b      	ldr	r3, [pc, #108]	; (800b36c <xPortStartScheduler+0x12c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b304:	4a19      	ldr	r2, [pc, #100]	; (800b36c <xPortStartScheduler+0x12c>)
 800b306:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b310:	4b17      	ldr	r3, [pc, #92]	; (800b370 <xPortStartScheduler+0x130>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a16      	ldr	r2, [pc, #88]	; (800b370 <xPortStartScheduler+0x130>)
 800b316:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b31a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b31c:	4b14      	ldr	r3, [pc, #80]	; (800b370 <xPortStartScheduler+0x130>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a13      	ldr	r2, [pc, #76]	; (800b370 <xPortStartScheduler+0x130>)
 800b322:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b326:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b328:	f000 f8d6 	bl	800b4d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b32c:	4b11      	ldr	r3, [pc, #68]	; (800b374 <xPortStartScheduler+0x134>)
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b332:	f000 f8f5 	bl	800b520 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b336:	4b10      	ldr	r3, [pc, #64]	; (800b378 <xPortStartScheduler+0x138>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a0f      	ldr	r2, [pc, #60]	; (800b378 <xPortStartScheduler+0x138>)
 800b33c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b340:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b342:	f7ff ff69 	bl	800b218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b346:	f7ff fb8d 	bl	800aa64 <vTaskSwitchContext>
	prvTaskExitError();
 800b34a:	f7ff ff23 	bl	800b194 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	e000ed00 	.word	0xe000ed00
 800b35c:	410fc271 	.word	0x410fc271
 800b360:	410fc270 	.word	0x410fc270
 800b364:	e000e400 	.word	0xe000e400
 800b368:	20000440 	.word	0x20000440
 800b36c:	20000444 	.word	0x20000444
 800b370:	e000ed20 	.word	0xe000ed20
 800b374:	2000002c 	.word	0x2000002c
 800b378:	e000ef34 	.word	0xe000ef34

0800b37c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b394:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <vPortEnterCritical+0x54>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	4a0d      	ldr	r2, [pc, #52]	; (800b3d0 <vPortEnterCritical+0x54>)
 800b39c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b39e:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <vPortEnterCritical+0x54>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d10e      	bne.n	800b3c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3a6:	4b0b      	ldr	r3, [pc, #44]	; (800b3d4 <vPortEnterCritical+0x58>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d009      	beq.n	800b3c4 <vPortEnterCritical+0x48>
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	603b      	str	r3, [r7, #0]
 800b3c2:	e7fe      	b.n	800b3c2 <vPortEnterCritical+0x46>
	}
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	2000002c 	.word	0x2000002c
 800b3d4:	e000ed04 	.word	0xe000ed04

0800b3d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3de:	4b11      	ldr	r3, [pc, #68]	; (800b424 <vPortExitCritical+0x4c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d109      	bne.n	800b3fa <vPortExitCritical+0x22>
 800b3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	607b      	str	r3, [r7, #4]
 800b3f8:	e7fe      	b.n	800b3f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b3fa:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <vPortExitCritical+0x4c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3b01      	subs	r3, #1
 800b400:	4a08      	ldr	r2, [pc, #32]	; (800b424 <vPortExitCritical+0x4c>)
 800b402:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b404:	4b07      	ldr	r3, [pc, #28]	; (800b424 <vPortExitCritical+0x4c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d104      	bne.n	800b416 <vPortExitCritical+0x3e>
 800b40c:	2300      	movs	r3, #0
 800b40e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	2000002c 	.word	0x2000002c
	...

0800b430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b430:	f3ef 8009 	mrs	r0, PSP
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	4b15      	ldr	r3, [pc, #84]	; (800b490 <pxCurrentTCBConst>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	f01e 0f10 	tst.w	lr, #16
 800b440:	bf08      	it	eq
 800b442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44a:	6010      	str	r0, [r2, #0]
 800b44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b450:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b454:	f380 8811 	msr	BASEPRI, r0
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f7ff fb00 	bl	800aa64 <vTaskSwitchContext>
 800b464:	f04f 0000 	mov.w	r0, #0
 800b468:	f380 8811 	msr	BASEPRI, r0
 800b46c:	bc09      	pop	{r0, r3}
 800b46e:	6819      	ldr	r1, [r3, #0]
 800b470:	6808      	ldr	r0, [r1, #0]
 800b472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b476:	f01e 0f10 	tst.w	lr, #16
 800b47a:	bf08      	it	eq
 800b47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b480:	f380 8809 	msr	PSP, r0
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	f3af 8000 	nop.w

0800b490 <pxCurrentTCBConst>:
 800b490:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop

0800b498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4b0:	f7ff fa20 	bl	800a8f4 <xTaskIncrementTick>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4ba:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <SysTick_Handler+0x3c>)
 800b4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	e000ed04 	.word	0xe000ed04

0800b4d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4d8:	b480      	push	{r7}
 800b4da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4dc:	4b0b      	ldr	r3, [pc, #44]	; (800b50c <vPortSetupTimerInterrupt+0x34>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4e2:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <vPortSetupTimerInterrupt+0x38>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <vPortSetupTimerInterrupt+0x3c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a0a      	ldr	r2, [pc, #40]	; (800b518 <vPortSetupTimerInterrupt+0x40>)
 800b4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f2:	099b      	lsrs	r3, r3, #6
 800b4f4:	4a09      	ldr	r2, [pc, #36]	; (800b51c <vPortSetupTimerInterrupt+0x44>)
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4fa:	4b04      	ldr	r3, [pc, #16]	; (800b50c <vPortSetupTimerInterrupt+0x34>)
 800b4fc:	2207      	movs	r2, #7
 800b4fe:	601a      	str	r2, [r3, #0]
}
 800b500:	bf00      	nop
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	e000e010 	.word	0xe000e010
 800b510:	e000e018 	.word	0xe000e018
 800b514:	20000000 	.word	0x20000000
 800b518:	10624dd3 	.word	0x10624dd3
 800b51c:	e000e014 	.word	0xe000e014

0800b520 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b520:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b530 <vPortEnableVFP+0x10>
 800b524:	6801      	ldr	r1, [r0, #0]
 800b526:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b52a:	6001      	str	r1, [r0, #0]
 800b52c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b52e:	bf00      	nop
 800b530:	e000ed88 	.word	0xe000ed88

0800b534 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b53a:	f3ef 8305 	mrs	r3, IPSR
 800b53e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b0f      	cmp	r3, #15
 800b544:	d913      	bls.n	800b56e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b546:	4a16      	ldr	r2, [pc, #88]	; (800b5a0 <vPortValidateInterruptPriority+0x6c>)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b550:	4b14      	ldr	r3, [pc, #80]	; (800b5a4 <vPortValidateInterruptPriority+0x70>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	7afa      	ldrb	r2, [r7, #11]
 800b556:	429a      	cmp	r2, r3
 800b558:	d209      	bcs.n	800b56e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	607b      	str	r3, [r7, #4]
 800b56c:	e7fe      	b.n	800b56c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b56e:	4b0e      	ldr	r3, [pc, #56]	; (800b5a8 <vPortValidateInterruptPriority+0x74>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b576:	4b0d      	ldr	r3, [pc, #52]	; (800b5ac <vPortValidateInterruptPriority+0x78>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d909      	bls.n	800b592 <vPortValidateInterruptPriority+0x5e>
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	e7fe      	b.n	800b590 <vPortValidateInterruptPriority+0x5c>
	}
 800b592:	bf00      	nop
 800b594:	3714      	adds	r7, #20
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	e000e3f0 	.word	0xe000e3f0
 800b5a4:	20000440 	.word	0x20000440
 800b5a8:	e000ed0c 	.word	0xe000ed0c
 800b5ac:	20000444 	.word	0x20000444

0800b5b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08a      	sub	sp, #40	; 0x28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5bc:	f7ff f8f0 	bl	800a7a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5c0:	4b59      	ldr	r3, [pc, #356]	; (800b728 <pvPortMalloc+0x178>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5c8:	f000 f910 	bl	800b7ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5cc:	4b57      	ldr	r3, [pc, #348]	; (800b72c <pvPortMalloc+0x17c>)
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f040 808c 	bne.w	800b6f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01c      	beq.n	800b61a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f003 0307 	and.w	r3, r3, #7
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d013      	beq.n	800b61a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f023 0307 	bic.w	r3, r3, #7
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f003 0307 	and.w	r3, r3, #7
 800b602:	2b00      	cmp	r3, #0
 800b604:	d009      	beq.n	800b61a <pvPortMalloc+0x6a>
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	e7fe      	b.n	800b618 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d068      	beq.n	800b6f2 <pvPortMalloc+0x142>
 800b620:	4b43      	ldr	r3, [pc, #268]	; (800b730 <pvPortMalloc+0x180>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	429a      	cmp	r2, r3
 800b628:	d863      	bhi.n	800b6f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b62a:	4b42      	ldr	r3, [pc, #264]	; (800b734 <pvPortMalloc+0x184>)
 800b62c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b62e:	4b41      	ldr	r3, [pc, #260]	; (800b734 <pvPortMalloc+0x184>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b634:	e004      	b.n	800b640 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	429a      	cmp	r2, r3
 800b648:	d903      	bls.n	800b652 <pvPortMalloc+0xa2>
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1f1      	bne.n	800b636 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b652:	4b35      	ldr	r3, [pc, #212]	; (800b728 <pvPortMalloc+0x178>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b658:	429a      	cmp	r2, r3
 800b65a:	d04a      	beq.n	800b6f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2208      	movs	r2, #8
 800b662:	4413      	add	r3, r2
 800b664:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	1ad2      	subs	r2, r2, r3
 800b676:	2308      	movs	r3, #8
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d91e      	bls.n	800b6bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b67e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4413      	add	r3, r2
 800b684:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d009      	beq.n	800b6a4 <pvPortMalloc+0xf4>
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	613b      	str	r3, [r7, #16]
 800b6a2:	e7fe      	b.n	800b6a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	1ad2      	subs	r2, r2, r3
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6b6:	69b8      	ldr	r0, [r7, #24]
 800b6b8:	f000 f8fa 	bl	800b8b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6bc:	4b1c      	ldr	r3, [pc, #112]	; (800b730 <pvPortMalloc+0x180>)
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	4a1a      	ldr	r2, [pc, #104]	; (800b730 <pvPortMalloc+0x180>)
 800b6c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6ca:	4b19      	ldr	r3, [pc, #100]	; (800b730 <pvPortMalloc+0x180>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	4b1a      	ldr	r3, [pc, #104]	; (800b738 <pvPortMalloc+0x188>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d203      	bcs.n	800b6de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6d6:	4b16      	ldr	r3, [pc, #88]	; (800b730 <pvPortMalloc+0x180>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <pvPortMalloc+0x188>)
 800b6dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	4b12      	ldr	r3, [pc, #72]	; (800b72c <pvPortMalloc+0x17c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6f2:	f7ff f863 	bl	800a7bc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b6fc:	f7f4 ff0a 	bl	8000514 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	2b00      	cmp	r3, #0
 800b708:	d009      	beq.n	800b71e <pvPortMalloc+0x16e>
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	e7fe      	b.n	800b71c <pvPortMalloc+0x16c>
	return pvReturn;
 800b71e:	69fb      	ldr	r3, [r7, #28]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3728      	adds	r7, #40	; 0x28
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	20008450 	.word	0x20008450
 800b72c:	2000845c 	.word	0x2000845c
 800b730:	20008454 	.word	0x20008454
 800b734:	20008448 	.word	0x20008448
 800b738:	20008458 	.word	0x20008458

0800b73c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d046      	beq.n	800b7dc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b74e:	2308      	movs	r3, #8
 800b750:	425b      	negs	r3, r3
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	4413      	add	r3, r2
 800b756:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	4b20      	ldr	r3, [pc, #128]	; (800b7e4 <vPortFree+0xa8>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4013      	ands	r3, r2
 800b766:	2b00      	cmp	r3, #0
 800b768:	d109      	bne.n	800b77e <vPortFree+0x42>
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	e7fe      	b.n	800b77c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d009      	beq.n	800b79a <vPortFree+0x5e>
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	60bb      	str	r3, [r7, #8]
 800b798:	e7fe      	b.n	800b798 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	685a      	ldr	r2, [r3, #4]
 800b79e:	4b11      	ldr	r3, [pc, #68]	; (800b7e4 <vPortFree+0xa8>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d019      	beq.n	800b7dc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d115      	bne.n	800b7dc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	685a      	ldr	r2, [r3, #4]
 800b7b4:	4b0b      	ldr	r3, [pc, #44]	; (800b7e4 <vPortFree+0xa8>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	43db      	mvns	r3, r3
 800b7ba:	401a      	ands	r2, r3
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7c0:	f7fe ffee 	bl	800a7a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <vPortFree+0xac>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	4a06      	ldr	r2, [pc, #24]	; (800b7e8 <vPortFree+0xac>)
 800b7d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7d2:	6938      	ldr	r0, [r7, #16]
 800b7d4:	f000 f86c 	bl	800b8b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b7d8:	f7fe fff0 	bl	800a7bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7dc:	bf00      	nop
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	2000845c 	.word	0x2000845c
 800b7e8:	20008454 	.word	0x20008454

0800b7ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7f8:	4b27      	ldr	r3, [pc, #156]	; (800b898 <prvHeapInit+0xac>)
 800b7fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f003 0307 	and.w	r3, r3, #7
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00c      	beq.n	800b820 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3307      	adds	r3, #7
 800b80a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f023 0307 	bic.w	r3, r3, #7
 800b812:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	4a1f      	ldr	r2, [pc, #124]	; (800b898 <prvHeapInit+0xac>)
 800b81c:	4413      	add	r3, r2
 800b81e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b824:	4a1d      	ldr	r2, [pc, #116]	; (800b89c <prvHeapInit+0xb0>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b82a:	4b1c      	ldr	r3, [pc, #112]	; (800b89c <prvHeapInit+0xb0>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	4413      	add	r3, r2
 800b836:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b838:	2208      	movs	r2, #8
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	1a9b      	subs	r3, r3, r2
 800b83e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f023 0307 	bic.w	r3, r3, #7
 800b846:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4a15      	ldr	r2, [pc, #84]	; (800b8a0 <prvHeapInit+0xb4>)
 800b84c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b84e:	4b14      	ldr	r3, [pc, #80]	; (800b8a0 <prvHeapInit+0xb4>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2200      	movs	r2, #0
 800b854:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b856:	4b12      	ldr	r3, [pc, #72]	; (800b8a0 <prvHeapInit+0xb4>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	1ad2      	subs	r2, r2, r3
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b86c:	4b0c      	ldr	r3, [pc, #48]	; (800b8a0 <prvHeapInit+0xb4>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	4a0a      	ldr	r2, [pc, #40]	; (800b8a4 <prvHeapInit+0xb8>)
 800b87a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	4a09      	ldr	r2, [pc, #36]	; (800b8a8 <prvHeapInit+0xbc>)
 800b882:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b884:	4b09      	ldr	r3, [pc, #36]	; (800b8ac <prvHeapInit+0xc0>)
 800b886:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b88a:	601a      	str	r2, [r3, #0]
}
 800b88c:	bf00      	nop
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	20000448 	.word	0x20000448
 800b89c:	20008448 	.word	0x20008448
 800b8a0:	20008450 	.word	0x20008450
 800b8a4:	20008458 	.word	0x20008458
 800b8a8:	20008454 	.word	0x20008454
 800b8ac:	2000845c 	.word	0x2000845c

0800b8b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8b8:	4b28      	ldr	r3, [pc, #160]	; (800b95c <prvInsertBlockIntoFreeList+0xac>)
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	e002      	b.n	800b8c4 <prvInsertBlockIntoFreeList+0x14>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d8f7      	bhi.n	800b8be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	4413      	add	r3, r2
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d108      	bne.n	800b8f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	441a      	add	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	441a      	add	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	429a      	cmp	r2, r3
 800b904:	d118      	bne.n	800b938 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	4b15      	ldr	r3, [pc, #84]	; (800b960 <prvInsertBlockIntoFreeList+0xb0>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d00d      	beq.n	800b92e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	441a      	add	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	e008      	b.n	800b940 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b92e:	4b0c      	ldr	r3, [pc, #48]	; (800b960 <prvInsertBlockIntoFreeList+0xb0>)
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	601a      	str	r2, [r3, #0]
 800b936:	e003      	b.n	800b940 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	429a      	cmp	r2, r3
 800b946:	d002      	beq.n	800b94e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b94e:	bf00      	nop
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	20008448 	.word	0x20008448
 800b960:	20008450 	.word	0x20008450

0800b964 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800b968:	2200      	movs	r2, #0
 800b96a:	490e      	ldr	r1, [pc, #56]	; (800b9a4 <MX_USB_HOST_Init+0x40>)
 800b96c:	480e      	ldr	r0, [pc, #56]	; (800b9a8 <MX_USB_HOST_Init+0x44>)
 800b96e:	f7fc f809 	bl	8007984 <USBH_Init>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b978:	f7f5 f9d6 	bl	8000d28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800b97c:	490b      	ldr	r1, [pc, #44]	; (800b9ac <MX_USB_HOST_Init+0x48>)
 800b97e:	480a      	ldr	r0, [pc, #40]	; (800b9a8 <MX_USB_HOST_Init+0x44>)
 800b980:	f7fc f8b6 	bl	8007af0 <USBH_RegisterClass>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b98a:	f7f5 f9cd 	bl	8000d28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800b98e:	4806      	ldr	r0, [pc, #24]	; (800b9a8 <MX_USB_HOST_Init+0x44>)
 800b990:	f7fc f93a 	bl	8007c08 <USBH_Start>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b99a:	f7f5 f9c5 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b99e:	bf00      	nop
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	0800b9b1 	.word	0x0800b9b1
 800b9a8:	20008704 	.word	0x20008704
 800b9ac:	2000000c 	.word	0x2000000c

0800b9b0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b9bc:	78fb      	ldrb	r3, [r7, #3]
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	2b04      	cmp	r3, #4
 800b9c2:	d819      	bhi.n	800b9f8 <USBH_UserProcess+0x48>
 800b9c4:	a201      	add	r2, pc, #4	; (adr r2, 800b9cc <USBH_UserProcess+0x1c>)
 800b9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ca:	bf00      	nop
 800b9cc:	0800b9f9 	.word	0x0800b9f9
 800b9d0:	0800b9e9 	.word	0x0800b9e9
 800b9d4:	0800b9f9 	.word	0x0800b9f9
 800b9d8:	0800b9f1 	.word	0x0800b9f1
 800b9dc:	0800b9e1 	.word	0x0800b9e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b9e0:	4b09      	ldr	r3, [pc, #36]	; (800ba08 <USBH_UserProcess+0x58>)
 800b9e2:	2203      	movs	r2, #3
 800b9e4:	701a      	strb	r2, [r3, #0]
  break;
 800b9e6:	e008      	b.n	800b9fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <USBH_UserProcess+0x58>)
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	701a      	strb	r2, [r3, #0]
  break;
 800b9ee:	e004      	b.n	800b9fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b9f0:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <USBH_UserProcess+0x58>)
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	701a      	strb	r2, [r3, #0]
  break;
 800b9f6:	e000      	b.n	800b9fa <USBH_UserProcess+0x4a>

  default:
  break;
 800b9f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	20008460 	.word	0x20008460

0800ba0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08a      	sub	sp, #40	; 0x28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba14:	f107 0314 	add.w	r3, r7, #20
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	605a      	str	r2, [r3, #4]
 800ba1e:	609a      	str	r2, [r3, #8]
 800ba20:	60da      	str	r2, [r3, #12]
 800ba22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a24      	ldr	r2, [pc, #144]	; (800babc <HAL_HCD_MspInit+0xb0>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d141      	bne.n	800bab2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba2e:	2300      	movs	r3, #0
 800ba30:	613b      	str	r3, [r7, #16]
 800ba32:	4b23      	ldr	r3, [pc, #140]	; (800bac0 <HAL_HCD_MspInit+0xb4>)
 800ba34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba36:	4a22      	ldr	r2, [pc, #136]	; (800bac0 <HAL_HCD_MspInit+0xb4>)
 800ba38:	f043 0302 	orr.w	r3, r3, #2
 800ba3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ba3e:	4b20      	ldr	r3, [pc, #128]	; (800bac0 <HAL_HCD_MspInit+0xb4>)
 800ba40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba42:	f003 0302 	and.w	r3, r3, #2
 800ba46:	613b      	str	r3, [r7, #16]
 800ba48:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ba4a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800ba4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba50:	2302      	movs	r3, #2
 800ba52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba54:	2300      	movs	r3, #0
 800ba56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ba5c:	230c      	movs	r3, #12
 800ba5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba60:	f107 0314 	add.w	r3, r7, #20
 800ba64:	4619      	mov	r1, r3
 800ba66:	4817      	ldr	r0, [pc, #92]	; (800bac4 <HAL_HCD_MspInit+0xb8>)
 800ba68:	f7f6 f900 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ba6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba72:	2300      	movs	r3, #0
 800ba74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ba7a:	f107 0314 	add.w	r3, r7, #20
 800ba7e:	4619      	mov	r1, r3
 800ba80:	4810      	ldr	r0, [pc, #64]	; (800bac4 <HAL_HCD_MspInit+0xb8>)
 800ba82:	f7f6 f8f3 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ba86:	2300      	movs	r3, #0
 800ba88:	60fb      	str	r3, [r7, #12]
 800ba8a:	4b0d      	ldr	r3, [pc, #52]	; (800bac0 <HAL_HCD_MspInit+0xb4>)
 800ba8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8e:	4a0c      	ldr	r2, [pc, #48]	; (800bac0 <HAL_HCD_MspInit+0xb4>)
 800ba90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba94:	6313      	str	r3, [r2, #48]	; 0x30
 800ba96:	4b0a      	ldr	r3, [pc, #40]	; (800bac0 <HAL_HCD_MspInit+0xb4>)
 800ba98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba9e:	60fb      	str	r3, [r7, #12]
 800baa0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800baa2:	2200      	movs	r2, #0
 800baa4:	2105      	movs	r1, #5
 800baa6:	204d      	movs	r0, #77	; 0x4d
 800baa8:	f7f5 feae 	bl	8001808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800baac:	204d      	movs	r0, #77	; 0x4d
 800baae:	f7f5 fec7 	bl	8001840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bab2:	bf00      	nop
 800bab4:	3728      	adds	r7, #40	; 0x28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	40040000 	.word	0x40040000
 800bac0:	40023800 	.word	0x40023800
 800bac4:	40020400 	.word	0x40020400

0800bac8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fc fd43 	bl	8008562 <USBH_LL_IncTimer>
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fc fd87 	bl	8008606 <USBH_LL_Connect>
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fc fd9c 	bl	800864c <USBH_LL_Disconnect>
}
 800bb14:	bf00      	nop
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fc fdd1 	bl	80086da <USBH_LL_NotifyURBChange>
#endif
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fc fd31 	bl	80085b6 <USBH_LL_PortEnabled>
} 
 800bb54:	bf00      	nop
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fc fd3d 	bl	80085ea <USBH_LL_PortDisabled>
} 
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d132      	bne.n	800bbf0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800bb8a:	4a1c      	ldr	r2, [pc, #112]	; (800bbfc <USBH_LL_Init+0x84>)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4a19      	ldr	r2, [pc, #100]	; (800bbfc <USBH_LL_Init+0x84>)
 800bb96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800bb9a:	4b18      	ldr	r3, [pc, #96]	; (800bbfc <USBH_LL_Init+0x84>)
 800bb9c:	4a18      	ldr	r2, [pc, #96]	; (800bc00 <USBH_LL_Init+0x88>)
 800bb9e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800bba0:	4b16      	ldr	r3, [pc, #88]	; (800bbfc <USBH_LL_Init+0x84>)
 800bba2:	220c      	movs	r2, #12
 800bba4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800bba6:	4b15      	ldr	r3, [pc, #84]	; (800bbfc <USBH_LL_Init+0x84>)
 800bba8:	2201      	movs	r2, #1
 800bbaa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800bbac:	4b13      	ldr	r3, [pc, #76]	; (800bbfc <USBH_LL_Init+0x84>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800bbb2:	4b12      	ldr	r3, [pc, #72]	; (800bbfc <USBH_LL_Init+0x84>)
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800bbb8:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <USBH_LL_Init+0x84>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800bbbe:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <USBH_LL_Init+0x84>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800bbc4:	4b0d      	ldr	r3, [pc, #52]	; (800bbfc <USBH_LL_Init+0x84>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800bbca:	4b0c      	ldr	r3, [pc, #48]	; (800bbfc <USBH_LL_Init+0x84>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800bbd0:	480a      	ldr	r0, [pc, #40]	; (800bbfc <USBH_LL_Init+0x84>)
 800bbd2:	f7f6 fa0e 	bl	8001ff2 <HAL_HCD_Init>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800bbdc:	f7f5 f8a4 	bl	8000d28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800bbe0:	4806      	ldr	r0, [pc, #24]	; (800bbfc <USBH_LL_Init+0x84>)
 800bbe2:	f7f6 fe11 	bl	8002808 <HAL_HCD_GetCurrentFrame>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7fc fcaa 	bl	8008544 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20008ae8 	.word	0x20008ae8
 800bc00:	40040000 	.word	0x40040000

0800bc04 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7f6 fd7c 	bl	8002718 <HAL_HCD_Start>
 800bc20:	4603      	mov	r3, r0
 800bc22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 f95c 	bl	800bee4 <USBH_Get_USB_Status>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bc30:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7f6 fd84 	bl	800275e <HAL_HCD_Stop>
 800bc56:	4603      	mov	r3, r0
 800bc58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc5a:	7bfb      	ldrb	r3, [r7, #15]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 f941 	bl	800bee4 <USBH_Get_USB_Status>
 800bc62:	4603      	mov	r3, r0
 800bc64:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7f6 fdce 	bl	8002824 <HAL_HCD_GetCurrentSpeed>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d007      	beq.n	800bc9e <USBH_LL_GetSpeed+0x2e>
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d302      	bcc.n	800bc98 <USBH_LL_GetSpeed+0x28>
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d006      	beq.n	800bca4 <USBH_LL_GetSpeed+0x34>
 800bc96:	e008      	b.n	800bcaa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc9c:	e008      	b.n	800bcb0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	73fb      	strb	r3, [r7, #15]
    break;
 800bca2:	e005      	b.n	800bcb0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bca4:	2302      	movs	r3, #2
 800bca6:	73fb      	strb	r3, [r7, #15]
    break;
 800bca8:	e002      	b.n	800bcb0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	73fb      	strb	r3, [r7, #15]
    break;
 800bcae:	bf00      	nop
  }
  return  speed;
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7f6 fd61 	bl	8002798 <HAL_HCD_ResetPort>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 f901 	bl	800bee4 <USBH_Get_USB_Status>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	4611      	mov	r1, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f6 fd69 	bl	80027de <HAL_HCD_HC_GetXferCount>
 800bd0c:	4603      	mov	r3, r0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd16:	b590      	push	{r4, r7, lr}
 800bd18:	b089      	sub	sp, #36	; 0x24
 800bd1a:	af04      	add	r7, sp, #16
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	4608      	mov	r0, r1
 800bd20:	4611      	mov	r1, r2
 800bd22:	461a      	mov	r2, r3
 800bd24:	4603      	mov	r3, r0
 800bd26:	70fb      	strb	r3, [r7, #3]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	70bb      	strb	r3, [r7, #2]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bd3e:	787c      	ldrb	r4, [r7, #1]
 800bd40:	78ba      	ldrb	r2, [r7, #2]
 800bd42:	78f9      	ldrb	r1, [r7, #3]
 800bd44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd46:	9302      	str	r3, [sp, #8]
 800bd48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	4623      	mov	r3, r4
 800bd56:	f7f6 f9ae 	bl	80020b6 <HAL_HCD_HC_Init>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 f8bf 	bl	800bee4 <USBH_Get_USB_Status>
 800bd66:	4603      	mov	r3, r0
 800bd68:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd90      	pop	{r4, r7, pc}

0800bd74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd8e:	78fa      	ldrb	r2, [r7, #3]
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7f6 fa27 	bl	80021e6 <HAL_HCD_HC_Halt>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f8a0 	bl	800bee4 <USBH_Get_USB_Status>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bdb2:	b590      	push	{r4, r7, lr}
 800bdb4:	b089      	sub	sp, #36	; 0x24
 800bdb6:	af04      	add	r7, sp, #16
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	4608      	mov	r0, r1
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	70fb      	strb	r3, [r7, #3]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70bb      	strb	r3, [r7, #2]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bdda:	787c      	ldrb	r4, [r7, #1]
 800bddc:	78ba      	ldrb	r2, [r7, #2]
 800bdde:	78f9      	ldrb	r1, [r7, #3]
 800bde0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bde4:	9303      	str	r3, [sp, #12]
 800bde6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bde8:	9302      	str	r3, [sp, #8]
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	4623      	mov	r3, r4
 800bdf6:	f7f6 fa19 	bl	800222c <HAL_HCD_HC_SubmitRequest>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	4618      	mov	r0, r3
 800be02:	f000 f86f 	bl	800bee4 <USBH_Get_USB_Status>
 800be06:	4603      	mov	r3, r0
 800be08:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	bd90      	pop	{r4, r7, pc}

0800be14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be26:	78fa      	ldrb	r2, [r7, #3]
 800be28:	4611      	mov	r1, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f6 fcc2 	bl	80027b4 <HAL_HCD_HC_GetURBState>
 800be30:	4603      	mov	r3, r0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	460b      	mov	r3, r1
 800be44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d103      	bne.n	800be58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800be50:	78fb      	ldrb	r3, [r7, #3]
 800be52:	4618      	mov	r0, r3
 800be54:	f000 f872 	bl	800bf3c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800be58:	20c8      	movs	r0, #200	; 0xc8
 800be5a:	f7f5 fbfb 	bl	8001654 <HAL_Delay>
  return USBH_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
 800be74:	4613      	mov	r3, r2
 800be76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800be80:	78fa      	ldrb	r2, [r7, #3]
 800be82:	68f9      	ldr	r1, [r7, #12]
 800be84:	4613      	mov	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	440b      	add	r3, r1
 800be8e:	333b      	adds	r3, #59	; 0x3b
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800be96:	78fa      	ldrb	r2, [r7, #3]
 800be98:	68f9      	ldr	r1, [r7, #12]
 800be9a:	4613      	mov	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4413      	add	r3, r2
 800bea0:	00db      	lsls	r3, r3, #3
 800bea2:	440b      	add	r3, r1
 800bea4:	3350      	adds	r3, #80	; 0x50
 800bea6:	78ba      	ldrb	r2, [r7, #2]
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	e009      	b.n	800bec0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800beac:	78fa      	ldrb	r2, [r7, #3]
 800beae:	68f9      	ldr	r1, [r7, #12]
 800beb0:	4613      	mov	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	440b      	add	r3, r1
 800beba:	3351      	adds	r3, #81	; 0x51
 800bebc:	78ba      	ldrb	r2, [r7, #2]
 800bebe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7f5 fbbc 	bl	8001654 <HAL_Delay>
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	2b03      	cmp	r3, #3
 800bef6:	d817      	bhi.n	800bf28 <USBH_Get_USB_Status+0x44>
 800bef8:	a201      	add	r2, pc, #4	; (adr r2, 800bf00 <USBH_Get_USB_Status+0x1c>)
 800befa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befe:	bf00      	nop
 800bf00:	0800bf11 	.word	0x0800bf11
 800bf04:	0800bf17 	.word	0x0800bf17
 800bf08:	0800bf1d 	.word	0x0800bf1d
 800bf0c:	0800bf23 	.word	0x0800bf23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	73fb      	strb	r3, [r7, #15]
    break;
 800bf14:	e00b      	b.n	800bf2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bf16:	2302      	movs	r3, #2
 800bf18:	73fb      	strb	r3, [r7, #15]
    break;
 800bf1a:	e008      	b.n	800bf2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf20:	e005      	b.n	800bf2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bf22:	2302      	movs	r3, #2
 800bf24:	73fb      	strb	r3, [r7, #15]
    break;
 800bf26:	e002      	b.n	800bf2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bf28:	2302      	movs	r3, #2
 800bf2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf2c:	bf00      	nop
  }
  return usb_status;
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3714      	adds	r7, #20
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{ 
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	4603      	mov	r3, r0
 800bf44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800bf46:	79fb      	ldrb	r3, [r7, #7]
 800bf48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800bf4a:	79fb      	ldrb	r3, [r7, #7]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d102      	bne.n	800bf56 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800bf50:	2301      	movs	r3, #1
 800bf52:	73fb      	strb	r3, [r7, #15]
 800bf54:	e001      	b.n	800bf5a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bf56:	2300      	movs	r3, #0
 800bf58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	2110      	movs	r1, #16
 800bf60:	4803      	ldr	r0, [pc, #12]	; (800bf70 <MX_DriverVbusHS+0x34>)
 800bf62:	f7f6 f82d 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 800bf66:	bf00      	nop
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	40020800 	.word	0x40020800

0800bf74 <__errno>:
 800bf74:	4b01      	ldr	r3, [pc, #4]	; (800bf7c <__errno+0x8>)
 800bf76:	6818      	ldr	r0, [r3, #0]
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	20000030 	.word	0x20000030

0800bf80 <__libc_init_array>:
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	4e0d      	ldr	r6, [pc, #52]	; (800bfb8 <__libc_init_array+0x38>)
 800bf84:	4c0d      	ldr	r4, [pc, #52]	; (800bfbc <__libc_init_array+0x3c>)
 800bf86:	1ba4      	subs	r4, r4, r6
 800bf88:	10a4      	asrs	r4, r4, #2
 800bf8a:	2500      	movs	r5, #0
 800bf8c:	42a5      	cmp	r5, r4
 800bf8e:	d109      	bne.n	800bfa4 <__libc_init_array+0x24>
 800bf90:	4e0b      	ldr	r6, [pc, #44]	; (800bfc0 <__libc_init_array+0x40>)
 800bf92:	4c0c      	ldr	r4, [pc, #48]	; (800bfc4 <__libc_init_array+0x44>)
 800bf94:	f000 f8f6 	bl	800c184 <_init>
 800bf98:	1ba4      	subs	r4, r4, r6
 800bf9a:	10a4      	asrs	r4, r4, #2
 800bf9c:	2500      	movs	r5, #0
 800bf9e:	42a5      	cmp	r5, r4
 800bfa0:	d105      	bne.n	800bfae <__libc_init_array+0x2e>
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfa8:	4798      	blx	r3
 800bfaa:	3501      	adds	r5, #1
 800bfac:	e7ee      	b.n	800bf8c <__libc_init_array+0xc>
 800bfae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfb2:	4798      	blx	r3
 800bfb4:	3501      	adds	r5, #1
 800bfb6:	e7f2      	b.n	800bf9e <__libc_init_array+0x1e>
 800bfb8:	0800c228 	.word	0x0800c228
 800bfbc:	0800c228 	.word	0x0800c228
 800bfc0:	0800c228 	.word	0x0800c228
 800bfc4:	0800c22c 	.word	0x0800c22c

0800bfc8 <malloc>:
 800bfc8:	4b02      	ldr	r3, [pc, #8]	; (800bfd4 <malloc+0xc>)
 800bfca:	4601      	mov	r1, r0
 800bfcc:	6818      	ldr	r0, [r3, #0]
 800bfce:	f000 b86d 	b.w	800c0ac <_malloc_r>
 800bfd2:	bf00      	nop
 800bfd4:	20000030 	.word	0x20000030

0800bfd8 <free>:
 800bfd8:	4b02      	ldr	r3, [pc, #8]	; (800bfe4 <free+0xc>)
 800bfda:	4601      	mov	r1, r0
 800bfdc:	6818      	ldr	r0, [r3, #0]
 800bfde:	f000 b817 	b.w	800c010 <_free_r>
 800bfe2:	bf00      	nop
 800bfe4:	20000030 	.word	0x20000030

0800bfe8 <memcpy>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	1e43      	subs	r3, r0, #1
 800bfec:	440a      	add	r2, r1
 800bfee:	4291      	cmp	r1, r2
 800bff0:	d100      	bne.n	800bff4 <memcpy+0xc>
 800bff2:	bd10      	pop	{r4, pc}
 800bff4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bff8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bffc:	e7f7      	b.n	800bfee <memcpy+0x6>

0800bffe <memset>:
 800bffe:	4402      	add	r2, r0
 800c000:	4603      	mov	r3, r0
 800c002:	4293      	cmp	r3, r2
 800c004:	d100      	bne.n	800c008 <memset+0xa>
 800c006:	4770      	bx	lr
 800c008:	f803 1b01 	strb.w	r1, [r3], #1
 800c00c:	e7f9      	b.n	800c002 <memset+0x4>
	...

0800c010 <_free_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4605      	mov	r5, r0
 800c014:	2900      	cmp	r1, #0
 800c016:	d045      	beq.n	800c0a4 <_free_r+0x94>
 800c018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c01c:	1f0c      	subs	r4, r1, #4
 800c01e:	2b00      	cmp	r3, #0
 800c020:	bfb8      	it	lt
 800c022:	18e4      	addlt	r4, r4, r3
 800c024:	f000 f8ac 	bl	800c180 <__malloc_lock>
 800c028:	4a1f      	ldr	r2, [pc, #124]	; (800c0a8 <_free_r+0x98>)
 800c02a:	6813      	ldr	r3, [r2, #0]
 800c02c:	4610      	mov	r0, r2
 800c02e:	b933      	cbnz	r3, 800c03e <_free_r+0x2e>
 800c030:	6063      	str	r3, [r4, #4]
 800c032:	6014      	str	r4, [r2, #0]
 800c034:	4628      	mov	r0, r5
 800c036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c03a:	f000 b8a2 	b.w	800c182 <__malloc_unlock>
 800c03e:	42a3      	cmp	r3, r4
 800c040:	d90c      	bls.n	800c05c <_free_r+0x4c>
 800c042:	6821      	ldr	r1, [r4, #0]
 800c044:	1862      	adds	r2, r4, r1
 800c046:	4293      	cmp	r3, r2
 800c048:	bf04      	itt	eq
 800c04a:	681a      	ldreq	r2, [r3, #0]
 800c04c:	685b      	ldreq	r3, [r3, #4]
 800c04e:	6063      	str	r3, [r4, #4]
 800c050:	bf04      	itt	eq
 800c052:	1852      	addeq	r2, r2, r1
 800c054:	6022      	streq	r2, [r4, #0]
 800c056:	6004      	str	r4, [r0, #0]
 800c058:	e7ec      	b.n	800c034 <_free_r+0x24>
 800c05a:	4613      	mov	r3, r2
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	b10a      	cbz	r2, 800c064 <_free_r+0x54>
 800c060:	42a2      	cmp	r2, r4
 800c062:	d9fa      	bls.n	800c05a <_free_r+0x4a>
 800c064:	6819      	ldr	r1, [r3, #0]
 800c066:	1858      	adds	r0, r3, r1
 800c068:	42a0      	cmp	r0, r4
 800c06a:	d10b      	bne.n	800c084 <_free_r+0x74>
 800c06c:	6820      	ldr	r0, [r4, #0]
 800c06e:	4401      	add	r1, r0
 800c070:	1858      	adds	r0, r3, r1
 800c072:	4282      	cmp	r2, r0
 800c074:	6019      	str	r1, [r3, #0]
 800c076:	d1dd      	bne.n	800c034 <_free_r+0x24>
 800c078:	6810      	ldr	r0, [r2, #0]
 800c07a:	6852      	ldr	r2, [r2, #4]
 800c07c:	605a      	str	r2, [r3, #4]
 800c07e:	4401      	add	r1, r0
 800c080:	6019      	str	r1, [r3, #0]
 800c082:	e7d7      	b.n	800c034 <_free_r+0x24>
 800c084:	d902      	bls.n	800c08c <_free_r+0x7c>
 800c086:	230c      	movs	r3, #12
 800c088:	602b      	str	r3, [r5, #0]
 800c08a:	e7d3      	b.n	800c034 <_free_r+0x24>
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	1821      	adds	r1, r4, r0
 800c090:	428a      	cmp	r2, r1
 800c092:	bf04      	itt	eq
 800c094:	6811      	ldreq	r1, [r2, #0]
 800c096:	6852      	ldreq	r2, [r2, #4]
 800c098:	6062      	str	r2, [r4, #4]
 800c09a:	bf04      	itt	eq
 800c09c:	1809      	addeq	r1, r1, r0
 800c09e:	6021      	streq	r1, [r4, #0]
 800c0a0:	605c      	str	r4, [r3, #4]
 800c0a2:	e7c7      	b.n	800c034 <_free_r+0x24>
 800c0a4:	bd38      	pop	{r3, r4, r5, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20008464 	.word	0x20008464

0800c0ac <_malloc_r>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	1ccd      	adds	r5, r1, #3
 800c0b0:	f025 0503 	bic.w	r5, r5, #3
 800c0b4:	3508      	adds	r5, #8
 800c0b6:	2d0c      	cmp	r5, #12
 800c0b8:	bf38      	it	cc
 800c0ba:	250c      	movcc	r5, #12
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	4606      	mov	r6, r0
 800c0c0:	db01      	blt.n	800c0c6 <_malloc_r+0x1a>
 800c0c2:	42a9      	cmp	r1, r5
 800c0c4:	d903      	bls.n	800c0ce <_malloc_r+0x22>
 800c0c6:	230c      	movs	r3, #12
 800c0c8:	6033      	str	r3, [r6, #0]
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	bd70      	pop	{r4, r5, r6, pc}
 800c0ce:	f000 f857 	bl	800c180 <__malloc_lock>
 800c0d2:	4a21      	ldr	r2, [pc, #132]	; (800c158 <_malloc_r+0xac>)
 800c0d4:	6814      	ldr	r4, [r2, #0]
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	b991      	cbnz	r1, 800c100 <_malloc_r+0x54>
 800c0da:	4c20      	ldr	r4, [pc, #128]	; (800c15c <_malloc_r+0xb0>)
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	b91b      	cbnz	r3, 800c0e8 <_malloc_r+0x3c>
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f000 f83d 	bl	800c160 <_sbrk_r>
 800c0e6:	6020      	str	r0, [r4, #0]
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f000 f838 	bl	800c160 <_sbrk_r>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	d124      	bne.n	800c13e <_malloc_r+0x92>
 800c0f4:	230c      	movs	r3, #12
 800c0f6:	6033      	str	r3, [r6, #0]
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f000 f842 	bl	800c182 <__malloc_unlock>
 800c0fe:	e7e4      	b.n	800c0ca <_malloc_r+0x1e>
 800c100:	680b      	ldr	r3, [r1, #0]
 800c102:	1b5b      	subs	r3, r3, r5
 800c104:	d418      	bmi.n	800c138 <_malloc_r+0x8c>
 800c106:	2b0b      	cmp	r3, #11
 800c108:	d90f      	bls.n	800c12a <_malloc_r+0x7e>
 800c10a:	600b      	str	r3, [r1, #0]
 800c10c:	50cd      	str	r5, [r1, r3]
 800c10e:	18cc      	adds	r4, r1, r3
 800c110:	4630      	mov	r0, r6
 800c112:	f000 f836 	bl	800c182 <__malloc_unlock>
 800c116:	f104 000b 	add.w	r0, r4, #11
 800c11a:	1d23      	adds	r3, r4, #4
 800c11c:	f020 0007 	bic.w	r0, r0, #7
 800c120:	1ac3      	subs	r3, r0, r3
 800c122:	d0d3      	beq.n	800c0cc <_malloc_r+0x20>
 800c124:	425a      	negs	r2, r3
 800c126:	50e2      	str	r2, [r4, r3]
 800c128:	e7d0      	b.n	800c0cc <_malloc_r+0x20>
 800c12a:	428c      	cmp	r4, r1
 800c12c:	684b      	ldr	r3, [r1, #4]
 800c12e:	bf16      	itet	ne
 800c130:	6063      	strne	r3, [r4, #4]
 800c132:	6013      	streq	r3, [r2, #0]
 800c134:	460c      	movne	r4, r1
 800c136:	e7eb      	b.n	800c110 <_malloc_r+0x64>
 800c138:	460c      	mov	r4, r1
 800c13a:	6849      	ldr	r1, [r1, #4]
 800c13c:	e7cc      	b.n	800c0d8 <_malloc_r+0x2c>
 800c13e:	1cc4      	adds	r4, r0, #3
 800c140:	f024 0403 	bic.w	r4, r4, #3
 800c144:	42a0      	cmp	r0, r4
 800c146:	d005      	beq.n	800c154 <_malloc_r+0xa8>
 800c148:	1a21      	subs	r1, r4, r0
 800c14a:	4630      	mov	r0, r6
 800c14c:	f000 f808 	bl	800c160 <_sbrk_r>
 800c150:	3001      	adds	r0, #1
 800c152:	d0cf      	beq.n	800c0f4 <_malloc_r+0x48>
 800c154:	6025      	str	r5, [r4, #0]
 800c156:	e7db      	b.n	800c110 <_malloc_r+0x64>
 800c158:	20008464 	.word	0x20008464
 800c15c:	20008468 	.word	0x20008468

0800c160 <_sbrk_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4c06      	ldr	r4, [pc, #24]	; (800c17c <_sbrk_r+0x1c>)
 800c164:	2300      	movs	r3, #0
 800c166:	4605      	mov	r5, r0
 800c168:	4608      	mov	r0, r1
 800c16a:	6023      	str	r3, [r4, #0]
 800c16c:	f7f5 f9c4 	bl	80014f8 <_sbrk>
 800c170:	1c43      	adds	r3, r0, #1
 800c172:	d102      	bne.n	800c17a <_sbrk_r+0x1a>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	b103      	cbz	r3, 800c17a <_sbrk_r+0x1a>
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	20008dac 	.word	0x20008dac

0800c180 <__malloc_lock>:
 800c180:	4770      	bx	lr

0800c182 <__malloc_unlock>:
 800c182:	4770      	bx	lr

0800c184 <_init>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	bf00      	nop
 800c188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c18a:	bc08      	pop	{r3}
 800c18c:	469e      	mov	lr, r3
 800c18e:	4770      	bx	lr

0800c190 <_fini>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	bf00      	nop
 800c194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c196:	bc08      	pop	{r3}
 800c198:	469e      	mov	lr, r3
 800c19a:	4770      	bx	lr
